{.$I SRL-T/osr.simba}
{$loadlib ../../../plugins/libtpaex/libtpaex}

const
  PATH = {$macro CURRENT_DIRECTORY};
  RS_ITEM_BORDER = $010000;
  RS_ITEM_SHADOW = $202030;
  CLEANUP = True;

function String.Before(SubStr: String): String; constref;
var
  p: UInt32;
begin
  p := System.Pos(SubStr, Self);
  if (p = 0) then Exit(Self);
  Result := Copy(Self, 1, p - 1);
end;

function String.SubString(start, finish: Int32): String; constref;
begin
  Result := Copy(Self, start, finish);
end;

function String.SubString(finish: Int32): String; constref; overload;
begin
  Result := Copy(Self, 1, finish);
end;


function String.EndsWith(Suffix: String): Boolean; constref;
var
  i,l: Int32;
begin
  if Length(Suffix) > Length(Self) then
    Exit(False);
  Result := True;
  l := Length(Self);
  for i:=1 to Length(Suffix) do
    if (Suffix[i] <> Self[l-Length(Suffix)+i]) then
      Exit(False);
end;

function String.Hex(): string; constref;
var
  n: Integer;
begin
  Result := '';
  for n := 1 to Length(Self) do
    Result := LowerCase(Result + IntToHex(Ord(Self[n]), 2));
end;


function TPoint.InBox(Box: TBox): Boolean; constref;
begin
  Result := PointInBox(Self, Box);
end;

function TPointArray.Find(const value: TPoint): Integer; constref;
begin
  for Result := 0 to High(Self) do
    if value = Self[Result] then
      Exit;

  Result := -1;
end;

function TPointArray.Contains(const value: TPoint): Boolean; constref;
begin
  Result := Self.Find(value) > -1;
end;

function TPointArray.Invert(Area:TBox): TPointArray; constref;
begin
  Result := ReturnPointsNotInTPA(Self, Area);
end;

function TPointArray.Bounds(): TBox; constref;
begin
  if Length(Self) = 1 then
    Exit(TBox([Self[0].x, Self[0].y, Self[0].x, Self[0].y]));

  Result := GetTPABounds(Self);
end;

function CustomSplitTPA(const arr: TPointArray; dist: Extended): T2DPointArray;
var
  t1, t2, c, ec, tc, l: Integer;
  tpa: TPointArray;
begin
  tpa := Copy(arr);
  l := High(tpa);
  if (l < 0) then Exit;
  SetLength(Result, l + 1);
  c := 0;
  ec := 0;
  while ((l - ec) >= 0) do
  begin
    SetLength(Result[c], 1);
    Result[c][0] := tpa[0];
    tpa[0] := tpa[l - ec];
    Inc(ec);
    tc := 1;
    t1 := 0;
    while (t1 < tc) do
    begin
      t2 := 0;
      while (t2 <= (l - ec)) do
      begin
        if (sqrt(Sqr(Result[c][t1].x - tpa[t2].x) + Sqr(Result[c][t1].y - tpa[t2].y)) <= dist) then
        begin
          SetLength(Result[c], tc +1);
          Result[c][tc] := tpa[t2];
          tpa[t2] := tpa[l - ec];
          Inc(ec);
          Inc(tc);
          Dec(t2);
        end;
        Inc(t2);
      end;
      Inc(t1);
    end;
    Inc(c);
  end;
  SetLength(Result, c);
end;

function CustomClusterTPA(const TPA: TPointArray; dist: Extended): T2DPointArray;
type
  TPointScan = record
    skipRow: Boolean;
    count: Integer;
  end;
var
  h, i, l, c, s, x, y, o, r, d, m: Integer;
  p: array of array of TPointScan;
  q: TPointArray;
  a, b, t: TBox;
  e: Extended;
  z: TPoint;
  v: Boolean;
begin
  SetLength(Result, 0);
  h := High(TPA);
  if (h > -1) then
    if (h > 0) then
    begin
      b.X1 := TPA[0].X;
      b.Y1 := TPA[0].Y;
      b.X2 := TPA[0].X;
      b.Y2 := TPA[0].Y;
      r := 0;
      for i := 1 to h do
      begin
        if (TPA[i].X < b.X1) then
          b.X1 := TPA[i].X
        else
          if (TPA[i].X > b.X2) then
            b.X2 := TPA[i].X;
        if (TPA[i].Y < b.Y1) then
          b.Y1 := TPA[i].Y
        else
          if (TPA[i].Y > b.Y2) then
            b.Y2 := TPA[i].Y;
      end;
      SetLength(p, ((b.X2 - b.X1) + 1));
      for i := 0 to (b.X2 - b.X1) do
      begin
        SetLength(p[i], ((b.Y2 - b.Y1) + 1));
        for c := 0 to (b.Y2 - b.Y1) do
        begin
          p[i][c].count := 0;
          p[i][c].skipRow := False;
        end;
      end;
      e := dist;
      if (e < 0.0) then
        e := 0.0;
      d := Ceil(e);
      m := Max(((b.X2 - b.X1) + 1), ((b.Y2 - b.Y1) + 1));
      if (d > m) then
        d := m;
      for i := 0 to h do
        Inc(p[(TPA[i].X - b.X1)][(TPA[i].Y - b.Y1)].count);
      for i := 0 to h do
        if (p[(TPA[i].X - b.X1)][(TPA[i].Y - b.Y1)].count > 0) then
        begin
          c := Length(Result);
          SetLength(Result, (c + 1));
          SetLength(Result[c], p[(TPA[i].X - b.X1)][(TPA[i].Y - b.Y1)].count);
          for o := 0 to (p[(TPA[i].X - b.X1)][(TPA[i].Y - b.Y1)].count - 1) do
            Result[c][o] := TPA[i];
          r := (r + p[(TPA[i].X - b.X1)][(TPA[i].Y - b.Y1)].count);
          if (r > h) then
            Exit;
          SetLength(q, 1);
          q[0] := TPA[i];
          p[(TPA[i].X - b.X1)][(TPA[i].Y - b.Y1)].count := 0;
          s := 1;
          while (s > 0) do
          begin
            s := High(q);
            z := q[s];
            a.X1 := (z.X - d);
            a.Y1 := (z.Y - d);
            a.X2 := (z.X + d);
            a.Y2 := (z.Y + d);
            t := a;
            SetLength(q, s);
            if (a.X1 < b.X1) then
              a.X1 := b.X1
            else
              if (a.X1 > b.X2) then
                a.X1 := b.X2;
            if (a.Y1 < b.Y1) then
              a.Y1 := b.Y1
            else
              if (a.Y1 > b.Y2) then
                a.Y1 := b.Y2;
            if (a.X2 < b.X1) then
              a.X2 := b.X1
            else
              if (a.X2 > b.X2) then
                a.X2 := b.X2;
            if (a.Y2 < b.Y1) then
              a.Y2 := b.Y1
            else
              if (a.Y2 > b.Y2) then
                a.Y2 := b.Y2;
            case ((t.X1 <> a.X1) or (t.X2 <> a.X2)) of
              True:
              for y := a.Y1 to a.Y2 do
                if not p[(a.X2 - b.X1)][(y - b.Y1)].skipRow then
                for x := a.X1 to a.X2 do
                  if (p[(x - b.X1)][(y - b.Y1)].count > 0) then
                    if (Sqrt(Sqr(z.X - x) + Sqr(z.Y - y)) <= dist) then
                    begin
                      l := Length(Result[c]);
                      SetLength(Result[c], (l + p[(x - b.X1)][(y - b.Y1)].count));
                      for o := 0 to (p[(x - b.X1)][(y - b.Y1)].count - 1) do
                      begin
                        Result[c][(l + o)].X := x;
                        Result[c][(l + o)].Y := y;
                      end;
                      r := (r + p[(x - b.X1)][(y - b.Y1)].count);
                      if (r > h) then
                        Exit;
                      p[(x - b.X1)][(y - b.Y1)].count := 0;
                      SetLength(q, (s + 1));
                      q[s] := Result[c][l];
                      Inc(s);
                    end;
              False:
              for y := a.Y1 to a.Y2 do
                if not p[(a.X2 - b.X1)][(y - b.Y1)].skipRow then
                begin
                  v := True;
                  for x := a.X1 to a.X2 do
                    if (p[(x - b.X1)][(y - b.Y1)].count > 0) then
                      if (Sqrt(Sqr(z.X - x) + Sqr(z.Y - y)) <= dist) then
                      begin
                        l := Length(Result[c]);
                        SetLength(Result[c], (l + p[(x - b.X1)][(y - b.Y1)].count));
                        for o := 0 to (p[(x - b.X1)][(y - b.Y1)].count - 1) do
                        begin
                          Result[c][(l + o)].X := x;
                          Result[c][(l + o)].Y := y;
                        end;
                        r := (r + p[(x - b.X1)][(y - b.Y1)].count);
                        if (r > h) then
                          Exit;
                        p[(x - b.X1)][(y - b.Y1)].count := 0;
                        SetLength(q, (s + 1));
                        q[s] := Result[c][l];
                        Inc(s);
                      end else
                        v := False;
                  if v then
                    p[(a.X2 - b.X1)][(y - b.Y1)].skipRow := True;
                end;
            end;
          end;
        end;
    end else
    begin
      SetLength(Result, 1);
      SetLength(Result[0], 1);
      Result[0][0] := TPA[0];
    end;
end;

function TPointArray.NRCluster(dist: Double): T2DPointArray; constref;
begin
  if (Length(Self) < 700) then
    Exit(NRSplitTPA(Self, dist));
  Result := NRClusterTPA(Self, dist);
end;


function TIntegerArray.Find(const Value: Integer): Integer; constref;
begin
  for Result := 0 to High(Self) do
    if (Value = Self[Result]) then
      Exit;

  Result := -1;
end;

function TIntegerArray.FindAll(const Value: Integer): TIntegerArray; constref;
var
  i,top: UInt32;
begin
  for i:=0 to High(Self) do
    if (Self[i] = Value) then
    begin
      SetLength(Result, top+1);
      Result[Inc(top)-1] := i;
    end;
end;

procedure TIntegerArray.Del(const Index: Integer; const Count: Integer = 1);
begin
  Delete(Self, Index, Count);
end;

procedure TIntegerArray.Remove(const Value: Integer; const All: Boolean = False);
var
  i: Int32;
  lst: TIntegerArray;
begin
  if (not All) then
  begin
    i := Self.Find(Value);
    if i >= 0 then Self.Del(i);
    Exit;
  end;

  lst := Self.FindAll(Value);
  for i:=High(lst) downto 0 do
    Self.Del(lst[i]);
end;


function TMufasaBitmap.Bounds(): TBox;
begin
  Result := [0, 0, Self.getWidth()-1, Self.getHeight()-1];
end;

function TBox.Expand(SizeMod: Int32): TBox; constref;
begin
  Result.X1 := Self.X1 - SizeMod;
  Result.Y1 := Self.Y1 - SizeMod;
  Result.X2 := Self.X2 + SizeMod;
  Result.Y2 := Self.Y2 + SizeMod;
end;

var
  fullHashes, hashes: TStringArray;
  uniqueCount: Int32;

function FullHashCheck(str: String): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(fullhashes) do
  begin
    if fullhashes[i] = str then
    begin
      fullhashes += str;
      Exit(True);
    end;
  end;
  fullhashes += str;
end;

procedure CountUnique();
begin
  WriteLn('Total items: ', Length(fullHashes));
  WriteLn('Total unique items: ', uniqueCount);
end;

procedure AddHash(full, str: String);
var
  i: Int32;
begin
  if not FullHashCheck(full) then
  begin
    for i := 0 to High(hashes) do
      if hashes[i] = str then
        WriteLn('Collision!!! ', str);
  end
  else
    Inc(uniqueCount);

  hashes += str;
end;

function TMufasaBitmap.GetHashOld(): String;
var
  pixels: TIntegerArray;
  str: String;
begin
  pixels := Self.GetColors();
  SetLength(str, Length(pixels));
  Move(pixels^, str[1], length(str));
  str := SHA1String(str);
  Result := str.SubString(16);

  AddHash(str, Result);
end;

function TMufasaBitmap.GetHash(): String;
var
  pixels: TIntegerArray;
  str: String;
  h, i: Int32;
begin
  pixels := Self.GetColors();

  h := $811C9DC5;
  for i:=0 to High(pixels) do
  begin
    if pixels[i] = $0 then
      Continue;
    h := (h * $1000193) xor pixels[i];
  end;

  str := LowerCase(IntToHex(h, 16));
  Result := str.SubString(Length(str)-8, Length(str));

  AddHash(Result, Result);
end;

function ClearItemBackground(bmp: TMufasaBitmap): Boolean;
const
  NOTED_TPA: TPointArray = [[2,0],[2,1],[2,2],[2,3],[3,4],[4,4],[2,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,16],[1,17],[2,18],[3,18],[4,18],[5,18],[6,18],[7,18],[8,18],[9,18],[10,18],[11,18],[12,19],[13,19],[14,19],[15,19],[16,19],[17,19],[18,19],[19,20],[20,20],[21,20],[22,20],[23,20],[24,20],[25,20],[26,20],[27,20],[28,19],[28,18],[28,17],[28,16],[28,15],[28,14],[28,13],[28,12],[28,11],[27,10],[27,9],[27,8],[28,7],[28,6],[28,5],[28,4],[28,3],[28,2],[29,1],[29,0]];
var
  border, shadow, tpa, item, corners, bg: TPointArray;
  count, x, y, i: Int32;
  p: TPoint;
  b: TBox;
  matrix: T2DIntArray;
  atpa: T2DPointArray;
  noted: Boolean;
begin
  if not bmp.FindColors(border, RS_ITEM_BORDER) then
    Exit;

  Result := True;

  bmp.FindColors(shadow, RS_ITEM_SHADOW);
  if bmp.FindColors(tpa, $333333) then
    shadow += tpa;

  matrix := bmp.ToMatrix();

  corners := [[0,bmp.getHeight()-1], [bmp.getWidth()-1,bmp.getHeight()-1]];

  tpa := border.Invert(bmp.Bounds());
  atpa := tpa.NRCluster(1);
  for i := High(atpa) downto 0 do
    if atpa[i].Contains(corners[0]) or atpa[i].Contains(corners[1]) then
    begin
      bg += atpa[i];
      Delete(atpa, i, 1);
    end;

  noted := True;
  for i := 0 to High(NOTED_TPA) do
    if matrix[NOTED_TPA[i].y, NOTED_TPA[i].x] <> RS_ITEM_BORDER then
    begin
      noted := False;
      Break;
    end;

  if noted then
    b := border.Bounds().Expand(-2)
  else
    b := border.Bounds();

  for y := b.Y1 to b.Y2 do
  begin
    count := 0;
    tpa := [];

    for x := b.X1 to b.X2 do
    begin
      case matrix[y,x] of
        RS_ITEM_BORDER: if Inc(count) > 2 then Continue(2);
        else if count = 1 then tpa += [x,y];
      end;
    end;

    if (count = 2) and (Length(tpa) > 3) then
      item += tpa;
  end;

  for x := b.X1 to b.X2 do
  begin
    count := 0;
    tpa := [];

    for y := b.Y1 to b.Y2 do
    begin
      case matrix[y,x] of
        RS_ITEM_BORDER: if Inc(count) > 2 then Continue(2);
        else if count = 1 then tpa += [x,y];
      end;
    end;

    if (count = 2) and (Length(tpa) > 3) then
      item += tpa;
  end;

  for p in item do matrix[p.Y, p.X] := $00FFFF;
  item := [];

  for y := b.Y2 downto b.Y1 do
  begin
    count := 0;
    tpa := [];

    for x := b.X2 downto b.X1 do
    begin
      case matrix[y,x] of
        RS_ITEM_BORDER: if Inc(count) > 2 then Continue(2);
        $00FFFF:
        case count of
         0: matrix[y,x] := $0;
         1: Inc(count);
         2: Continue(2);
        end;
        else if count = 1 then tpa += [x,y];
      end;
    end;

    if (count = 2) and (Length(tpa) > 3) then
      item += tpa;
  end;

  for x := b.X2 downto b.X1 do
  begin
    count := 0;
    tpa := [];

    for y := b.Y2 downto b.Y1 do
    begin
      case matrix[y,x] of
        RS_ITEM_BORDER: if Inc(count) > 2 then Continue(2);
        $00FFFF:
        case count of
         0: matrix[y,x] := $0;
         1: Inc(count);
         2: Continue(2);
        end;
        else if count = 1 then tpa += [x,y];
      end;
    end;

    if (count = 2) and (Length(tpa) > 3) then
      item += tpa;
  end;

  for p in shadow do
  begin
    p := [p.X-1, p.Y-1];
    if p.InBox(b) then
      item += p;
  end;

  for p in item do matrix[p.Y, p.X] := $00FFFF;

  item := [];
  for y := 0 to High(matrix) do
    for x := 0 to High(matrix[y]) do
      if matrix[y,x] = $00FFFF then
        item += [x,y];

  item += border;

  for tpa in atpa do
    for p in item do
      if tpa.Contains(p) then
      begin
        item += tpa;
        Continue(2);
      end;

  tpa := item.Invert(bmp.Bounds());

  bmp.DrawTPA(tpa + bg, $0);
end;

function FileSort(constref l, r: String): Int32;
begin
  if Length(l) < Length(r) then
    Exit(-1);

  if Length(l) > Length(r) then
    Exit(1);

  if l < r then
    Exit(-1);

  if l > r then
    Exit(1);
end;


procedure CreateHashesFile();
const
  ZIP_FILE = PATH + 'images.zip';
  TMP_PATH = PATH + 'images';
  MODDED_PATH = PATH + 'modded' + DirectorySeparator;
var
  current, hash, id: String;
  bmp: TMufasaBitmap;
begin
  try
    if not DirectoryExists(TMP_PATH) then
    begin
      WriteLn 'unzipping... this will take a while.';
      UnZipFile(ZIP_FILE, TMP_PATH);
      WriteLn 'Done unzipping.';
    end;

    if DirectoryExists(MODDED_PATH) then
      DeleteDirectory(MODDED_PATH, True);

    ForceDirectories(MODDED_PATH);

    if FileExists(PATH + 'hash') then
      if not DeleteFile(PATH + 'hash') then
      begin
        WriteLn 'Something went wrong deleting the old hashes file. No privilleges?';
        TerminateScript();
      end;

    for current in Sorted(FindFiles(TMP_PATH + '\', ['.png']), @FileSort) do
    begin
      bmp.Init();
      bmp.LoadFromFile(current);
      bmp.Crop(0, 9, 35, 31);

      if (bmp.getWidth() <> 36) or (bmp.getHeight() <> 23) then
      begin
        WriteLn(ExtractFileName(current), ' has wrong dimensions.');
        bmp.Free();
        Continue;
      end;

      id := ExtractFileName(current).Before('.png');

      ClearItemBackground(bmp);
      hash := bmp.GetHash();

      if not WriteFileContents(PATH + 'hash', hash + LineEnding, True) then
      begin
        WriteLn 'Failed to write to hash';
        TerminateScript();
      end;

      if not bmp.SaveToFile(MODDED_PATH + id + '.png') then
      begin
        WriteLn 'Failed to write to img file';
        TerminateScript();
      end;

      bmp.Free();
    end;
  finally
    if CLEANUP then
    begin
      DeleteDirectory(TMP_PATH, False);
      DeleteDirectory(MODDED_PATH, False);
    end;
  end;
end;

procedure TestHash(itemID: String);
const
  ZIP_FILE = PATH + 'images.zip';
  TMP_PATH = PATH + 'images';
  MODDED_PATH = PATH + 'modded' + DirectorySeparator;
var
  current, hash, id: String;
  bmp: TMufasaBitmap;
begin
  if not DirectoryExists(TMP_PATH) then
  begin
    WriteLn 'unzipping... this will take a while.';
    UnZipFile(ZIP_FILE, TMP_PATH);
    WriteLn 'Done unzipping.';
  end;

  ForceDirectories(MODDED_PATH);

  if FileExists(MODDED_PATH + id + '.png') then
    if not DeleteFile(MODDED_PATH + id + '.png') then
    begin
      WriteLn 'Couldn''t delete modded/ ' + id + '.png';
      TerminateScript();
    end;

  bmp.Init();
  current := TMP_PATH + DirectorySeparator + itemID + '.png';
  bmp.LoadFromFile(current);
  bmp.ReplaceColor(0, $00FF00);
  bmp.Crop(0, 9, 35, 31);

  if (bmp.getWidth() <> 36) or (bmp.getHeight() <> 23) then
  begin
    WriteLn(ExtractFileName(current), ' has wrong dimensions.');
    bmp.Free();
    Exit;
  end;

  id := ExtractFileName(current).Before('.png');

  ClearItemBackground(bmp);

  ShowBitmap(bmp);

  hash := bmp.GetHash();

  if not bmp.SaveToFile(MODDED_PATH + id + '.png') then
  begin
    WriteLn 'Failed to write to img file';
    TerminateScript();
  end;

  WriteLn hash;
  bmp.Free();
end;


begin
  //TestHash('1387');
  CreateHashesFile();
  CountUnique();
end.
