{.$I SRL-T/osr.simba}

const PATH = {$macro CURRENT_DIRECTORY};


function String.Before(SubStr: String): String; constref;
var
  p: UInt32;
begin
  p := System.Pos(SubStr, Self);
  if (p = 0) then Exit(Self);
  Result := Copy(Self, 1, p - 1);
end;

function TMufasaBitmap.GetHash(): String;
var
  str: String;
begin
  Self.ReplaceColor(0,0);
  SetLength(str, Self.getWidth()*Self.getHeight()*4);
  Move(Self.getdata()^, str[1], length(str));
  Result := SHA1String(str);
end;

//for debugging purposes.
function TMufasaBitmap.GetString(): String;
var
  str: String;
begin
  SetLength(str, Self.getWidth()*Self.getHeight()*4);
  Move(Self.getdata()^, str[1], length(str));
  Result := str;
end;

procedure CreateHashesFile();
const
  ZIP_FILE = PATH + 'crop-images.zip';
  TMP_PATH = PATH + 'crop-images';
var
  files: TStringArray;
  current, hash, id: String;
  bmp: TMufasaBitmap;
begin
  WriteLn 'unzipping... this will take a while.';
  //UnZipFile(ZIP_FILE, TMP_PATH);
  WriteLn 'Done unzipping.';

  if FileExists(PATH + 'hash-id') then
    if not DeleteFile(PATH + 'hash-id') then
    begin
      WriteLn 'Something went wrong deleting the old hashes file. No privilleges?';
      TerminateScript();
    end;

  for current in FindFiles(TMP_PATH + '\', ['.png']) do
  begin
    bmp.Init();
    bmp.LoadFromFile(current);

    if (bmp.getWidth() <> 36) or (bmp.getHeight() <> 23) then
    begin
      WriteLn(ExtractFileName(current), ' has wrong dimensions.');
      bmp.Free();
      Continue;
    end;

    id := ExtractFileName(current).Before('.png');

    hash := bmp.GetHash();

    if not WriteFileContents(PATH + 'hash-id', hash + '=' + id + LineEnding, True) then
    begin
      WriteLn 'Failed to write to hash-id';
      TerminateScript();
    end;

    bmp.Free();
  end;
end;

begin
  CreateHashesFile();
end.
