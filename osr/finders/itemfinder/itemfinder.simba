(*
# Item Finder
Tool to find item sprites (bitmaps) in boxes.
*)

{$DEFINE SRL_ITEMFINDER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  TRSItem = Variant;
  TRSItemArray = array of TRSItem;

(*
## ItemArray.Find
```pascal
function TRSItemArray.Find(const value: TRSItem): Int32; constref;
```
Find a TRSItem in a TRSItemArray and return it's index.
*)
function TRSItemArray.Find(const value: TRSItem): Int32; constref;
begin
  for Result := 0 to High(Self) do
    if (value = Self[Result]) then
      Exit;

  Result := -1;
end;

(*
## ItemArray.Contains
```pascal
function TRSItemArray.Contains(const value: TRSItem): Boolean; constref;
```
Find a TRSItem in a TRSItemArray and return true or false.
*)
function TRSItemArray.Contains(const value: TRSItem): Boolean; constref;
begin
  Result := Self.Find(value) > -1;
end;

type
  TRSItemFinderCustomFilter = procedure(constref image, templ: TMufasaBitmap) of object;

  TRSItemFinder = record(TSRLBaseRecord)
    IMAGES_ZIP: String;
    ITEM_NAMES: String;
    IMAGES_PATH: String;

    ItemNames, IDItem, HashID: TStringList;
    ItemFilters: array of record
      Name: String;
      Filter: TRSItemFinderCustomFilter;
    end;

    ItemImages: array of record
      Name: String;
      Images: array of TMufasaBitmap;
    end;

    Similarity: Single;
  end;

procedure TRSItemFinder.Free();
var
  i, j: Int32;
begin
  Self.ItemNames.Free();
  Self.IDItem.Free();
  Self.HashID.Free();

  for i := 0 to High(Self.ItemImages) do
    for j := 0 to High(Self.ItemImages[i].Images) do
      Self.ItemImages[i].Images[j].Free();
end;

procedure TRSItemFinder.Setup();
begin
  Self.IMAGES_ZIP  := {$macro CURRENT_DIRECTORY} + 'images.zip';
  Self.ITEM_NAMES  := {$macro CURRENT_DIRECTORY} + 'item-id';
  Self.IMAGES_PATH := SIMBA_DATA_DIR + 'SRL' + DirectorySeparator + 'itemfinder' +
                      DirectorySeparator + SHA1File(Self.IMAGES_ZIP) +
                      DirectorySeparator;

  ForceDirectories(Self.IMAGES_PATH);

  Self.Name := 'ItemFinder';
  Self.Similarity := 0.999;

  Self.ItemNames.Init();
  Self.ItemNames.LoadFromFile({$macro CURRENT_DIRECTORY} + 'item-id');
  Self.ItemNames.SetSorted(True);

  Self.IDItem.Init();
  Self.IDItem.LoadFromFile({$macro CURRENT_DIRECTORY} + 'id-item');
  Self.IDItem.SetSorted(True);

  Self.HashID.Init();
  Self.HashID.LoadFromFile({$macro CURRENT_DIRECTORY} + 'hash-id');
  Self.HashID.SetSorted(True);

  AddOnTerminate(@Self.Free);
end;

procedure TRSItemFinder.AddItemName(constref item, id: String);
begin
  Self.ItemNames.Add(item + '=' + id);
end;

procedure TRSItemFinder.AddItemNames(constref items: TStringArray; constref id: String);
var
  item: String;
begin
  for item in items do
    Self.ItemNames.Add(item + '=' + id);
end;

procedure TRSItemFinder.AddItemFilter(item: String; filter: TRSItemFinderCustomFilter);
begin
  Self.ItemFilters += [item, @filter];
end;


//Thanks to Olly.
//Make sure your bitmap has the top 9 pixels cropped (possible stack number) and is 36 width.
function TRSItemFinder.GetHash(bmp: TMufasaBitmap): String;
var
  str: String;
begin
  SetLength(str, bmp.getWidth()*bmp.getHeight()*4);
  Move(bmp.getdata()^, str[1], length(str));
  str := SHA1String(str);
  Result := str.SubString(16);
end;

//Attempt to clean an item bmp. Should be 36x23
procedure TRSItemFinder.CleanItemBitmap(bmp: TMufasaBitmap);
const
  NOTED_TPA: TPointArray = [[2,0],[2,1],[2,2],[2,3],[3,4],[4,4],[2,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[1,14],[1,15],[1,16],[1,17],[2,18],[3,18],[4,18],[5,18],[6,18],[7,18],[8,18],[9,18],[10,18],[11,18],[12,19],[13,19],[14,19],[15,19],[16,19],[17,19],[18,19],[19,20],[20,20],[21,20],[22,20],[23,20],[24,20],[25,20],[26,20],[27,20],[28,19],[28,18],[28,17],[28,16],[28,15],[28,14],[28,13],[28,12],[28,11],[27,10],[27,9],[27,8],[28,7],[28,6],[28,5],[28,4],[28,3],[28,2],[29,1],[29,0]];
var
  border, tpa, item, corners, bg: TPointArray;
  count, x, y, i: Int32;
  p: TPoint;
  b: TBox;
  matrix: T2DIntArray;
  atpa: T2DPointArray;
  noted: Boolean;
begin
  bmp.FindColors(border, RS_ITEM_BORDER);
  matrix := bmp.ToMatrix();

  corners := [[0,bmp.getHeight()-1], [bmp.getWidth()-1,bmp.getHeight()-1]];

  tpa := border.Invert(bmp.Bounds());
  atpa := tpa.ClusterEx(1);
  for tpa in atpa do
    if tpa.Contains(corners[0]) or tpa.Contains(corners[1]) then
      bg += tpa;

  noted := True;
  for i := 0 to High(NOTED_TPA) do
    if matrix[NOTED_TPA[i].y, NOTED_TPA[i].x] <> RS_ITEM_BORDER then
    begin
      noted := False;
      Break;
    end;

  if noted then
    b := border.Bounds().Expand(-2)
  else
    b := border.Bounds();

  for y := b.Y1 to b.Y2 do
  begin
    count := 0;
    tpa := [];

    for x := b.X1 to b.X2 do
    begin
      case matrix[y,x] of
        RS_ITEM_BORDER: if Inc(count) > 2 then Continue(2);
        else if count = 1 then tpa += [x,y];
      end;
    end;

    if (count = 2) and (Length(tpa) > 3) then
      item += tpa;
  end;

  for x := b.X1 to b.X2 do
  begin
    count := 0;
    tpa := [];

    for y := b.Y1 to b.Y2 do
    begin
      case matrix[y,x] of
        RS_ITEM_BORDER: if Inc(count) > 2 then Continue(2);
        else if count = 1 then tpa += [x,y];
      end;
    end;

    if (count = 2) and (Length(tpa) > 3) then
      item += tpa;
  end;

  for p in item do matrix[p.Y, p.X] := $00FFFF;
  item := [];

  for y := b.Y2 downto b.Y1 do
  begin
    count := 0;
    tpa := [];

    for x := b.X2 downto b.X1 do
    begin
      case matrix[y,x] of
        RS_ITEM_BORDER: if Inc(count) > 2 then Continue(2);
        $00FFFF:
        case count of
         0: matrix[y,x] := $0;
         1: Inc(count);
         2: Continue(2);
        end;
        else if count = 1 then tpa += [x,y];
      end;
    end;

    if (count = 2) and (Length(tpa) > 3) then
      item += tpa;
  end;

  for x := b.X2 downto b.X1 do
  begin
    count := 0;
    tpa := [];

    for y := b.Y2 downto b.Y1 do
    begin
      case matrix[y,x] of
        RS_ITEM_BORDER: if Inc(count) > 2 then Continue(2);
        $00FFFF:
        case count of
         0: matrix[y,x] := $0;
         1: Inc(count);
         2: Continue(2);
        end;
        else if count = 1 then tpa += [x,y];
      end;
    end;

    if (count = 2) and (Length(tpa) > 3) then
      item += tpa;
  end;

  item := [];
  for y := 0 to High(matrix) do
    for x := 0 to High(matrix[y]) do
      if matrix[y,x] = $00FFFF then
        item += [x,y];

  item += border;
  tpa := item.Invert(bmp.Bounds());

  bmp.DrawTPA(tpa + bg, $0);
end;

function TRSItemFinder.GetItemIDs(item: String): TIntegerArray;
type
  TStringList = TStringList;

  function TStringList.NameFromIndex(index: Int32): String;
  begin
    if InRange(index, 0, Self.GetCount() - 1) then
      Result := Self.GetStrings(index).Before('=');
  end;

  function TStringList.ValueFromIndex(index: Int32): String;
  begin
    if InRange(index, 0, Self.GetCount() - 1) then
      Result := Self.GetStrings(index).After('=');
  end;

var
  index: Int32;
begin
  if item.IsDigit() then
    Exit(Result + item.ExtractNumber());

  index := Self.ItemNames.IndexOfName(item);
  while SameText(item, Self.ItemNames.NameFromIndex(index)) do
  begin
    Result := Result + StrToInt(Self.ItemNames.ValueFromIndex(index));
    Inc(index);
  end;
end;

function TRSItemFinder.GetIDItem(item: Int32): String;
var
  index: Int32;
begin
  index := Self.IDItem.IndexOfName(ToStr(item));
  Result := Self.IDItem.ValueFromIndex(index);
end;


//original concept idea by CanadianJames and Skunks
function TRSItemFinder.GetHashIDs(hash: String): TIntegerArray;
var
  index: Int32;
begin
  index := Self.HashID.IndexOfName(hash);
  while SameText(hash, Self.HashID.NameFromIndex(index)) do
  begin
    Result := Result + StrToInt(Self.HashID.ValueFromIndex(index));

    Inc(index);
  end;
end;

function TRSItemFinder.GetHashItems(hash: String): TRSItemArray;
var
  id: Int32;
begin
  for id in Self.GetHashIDs(hash) do
    Result += Self.GetIDItem(id);
end;



function TRSItemFinder.GetItemImages(item: String): array of TMufasaBitmap;
type
  TMufasaBitmap = TMufasaBitmap;

  function TMufasaBitmap.Equals(Other: TMufasaBitmap): Boolean;
  begin
    Result := (Self.GetWidth()  = Other.GetWidth()) and
              (Self.GetHeight() = Other.GetHeight()) and
              (CompareMem(Self.GetData()^, Other.GetData()^, Self.GetWidth() * Self.GetHeight() * SizeOf(TRGB32)));
  end;

var
  fileName: String;
  image: TMufasaBitmap;
  itemID: Int32;
  i: Int32;
begin
  for i := 0 to High(Self.ItemImages) do
    if (Self.ItemImages[i].Name = item) then
    begin
      Result := Self.ItemImages[i].Images;
      Exit;
    end;

  for itemID in Self.GetItemIDs(item) do
  begin
    fileName := ExpandFileName(Self.IMAGES_PATH + ToString(itemID) + '.png');

    if not FileExists(fileName) then
    begin
      Self.DebugLn('Unzipping item sprite: ' + ExtractFileName(fileName) + ' this can take a few seconds');
      if not UnZipOneFile(Self.IMAGES_ZIP, ExtractFileName(fileName), Self.IMAGES_PATH) then
        Self.Fatal('Unknown item: ' + ToString(itemID));
    end;

    image.Init(Client.GetMBitmaps());
    image.LoadFromFile(fileName);
    image.SetName(item);
    image.ReplaceColor(RS_ITEM_SHADOW, 0);

    for i := 0 to High(Result) do
      if image.Equals(Result[i]) then
      begin
        image.Free();
        image := nil;

        Break;
      end;

    if (image <> nil) then
      Result += image;
  end;

  if (Length(Result) = 0) then
    Self.Fatal('Unknown item: ' + item);

  Self.ItemImages += [item, Result];
end;

function TRSItemFinder.CompareItems(constref image, template: TMufasaBitmap; constref CustomFilter: TRSItemFinderCustomFilter): Single;
var
  imageBorder, templateBorder: TPointArray;
  tpa, clearTPA: TPointArray;
  alignedTemplate, alignedImage: TMufasaBitmap;
  align: TPoint;
  clearColor: Int32;
  p: TPoint;
begin
  if image.FindColors(imageBorder, RS_ITEM_BORDER) and template.FindColors(templateBorder, RS_ITEM_BORDER) then
  begin
    with templateBorder.Bounds() do
    begin
      template.Crop(X1, Y1, X2, Y2);
      templateBorder := templateBorder.Offset(-X1,-Y1);
    end;
    
    // Use highest Y point of both images for alignment
    // TPA is already sorted like this with how FindColors operates.
    align.X := Max(0, imageBorder[High(imageBorder)].X - templateBorder[High(templateBorder)].X);
    align.Y := Max(0, imageBorder[High(imageBorder)].Y - templateBorder[High(templateBorder)].Y);

    // Compare borders. Sparkles can modify boundaries.
    if (@CustomFilter = nil) then
      for p in templateBorder.Offset(align) do
      begin
        if (p.Y <= 8) then // Possible stack number... Don't compare.
          Continue;
        if (not PointInTPA(p, imageBorder)) then // Borders don't match. No point going further.
          Exit;
      end;
    
    alignedImage := image.Copy();
  
    alignedTemplate.Init(Client.GetMBitmaps());
    alignedTemplate.SetSize(image.GetWidth(), image.GetHeight());
    
    template.DrawTransparent(align.X, align.Y, alignedTemplate);
    
    if (@CustomFilter <> nil) then
      CustomFilter(alignedImage, alignedTemplate);

    // Clear these template colors on both images
    for clearColor in [RS_ITEM_YELLOW_STACK, RS_ITEM_WHITE_STACK, RS_ITEM_GREEN_STACK, RS_ITEM_BORDER] do
      if AlignedTemplate.FindColors(tpa, clearColor) then
        clearTPA += tpa;

    // Clear image background on template
    if alignedImage.FindColors(tpa, 0) then
      clearTPA += tpa;
    if alignedTemplate.FindColors(tpa, 0) then
      clearTPA += tpa;

    alignedTemplate.DrawTPA(clearTPA, 0);
    alignedImage.DrawTPA(clearTPA, 0);

    Result := alignedImage.MatchTemplate(alignedTemplate, TM_CCORR_NORMED)[0][0]; // IDK why I used CCORR. But it works!
  
    alignedImage.Free();
    alignedTemplate.Free(); 
  end;
end;

type
  TRSItemFinderMatch = record
    Item: TRSItem;
    Box: TBox;
    Index: Integer;
  end;
  TRSItemFinderMatchArray = array of TRSItemFinderMatch;

function TRSItemFinder.FindAll(items: TRSItemArray; boxes: TBoxArray; maxToFind: Integer = 0): TRSItemFinderMatchArray;
var
  i, j: Integer;
  images: TMufasaBitmapArray;
  template: TMufasaBitmap;
  filter: TRSItemFinderCustomFilter;
  itemsToSearchFor: array of record
    Image: TMufasaBitmap;
    Name: TRSItem;
    Filter: TRSItemFinderCustomFilter;
  end;
begin
  for i := 0 to High(items) do
  begin
    filter := nil;
    for j := 0 to High(Self.ItemFilters) do
    begin
      if SameText(Self.ItemFilters[j].Name, items[i]) then
      begin
        filter := @Self.ItemFilters[j].Filter;
        Break;
      end;
    end;

    images := Self.GetItemImages(items[i]);
    for j := 0 to High(images) do
      itemsToSearchFor += [images[j], items[i], @filter];
  end;

  for i := 0 to High(boxes) do
    for j := 0 to High(itemsToSearchFor) do
    begin
      if boxes[i].Width() < 36 then
        boxes[i].X2 := boxes[i].X1 + 36;
      template.FromClient(boxes[i]);

      try
        // Search for item image *ON* the screen image since screen image is never larger than 36x36 item image.
        if Self.CompareItems(itemsToSearchFor[j].Image, template, @itemsToSearchFor[j].Filter) >= Self.Similarity then
        begin
          Result += [itemsToSearchFor[j].Name, boxes[i], i];
          if Length(Result) = maxToFind then
            Exit;
          Break;
        end;
      finally
        template.Free();
      end;
    end;
end;

function TRSItemFinder.Find(Items: TRSItemArray; Boxes: TBoxArray; out Match: TRSItemFinderMatch): Boolean;
var
  Matches: TRSItemFinderMatchArray;
begin
  Matches := Self.FindAll(Items, Boxes, 1);

  Result := Length(Matches) = 1;
  if Result then
    Match := Matches[0];
end;


procedure TRSItemFinderCustomFilter.ClearSparkles(constref Image, Templ: TMufasaBitmap); static;
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();

  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    // grey/brightness calculation. Works for magic logs
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) div 3 > 130) or
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) div 3 > 130) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);

    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;

procedure TRSItemFinderCustomFilter.FireCape(constref Image, Templ: TMufasaBitmap); static;
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();

  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) > 300) or
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) > 300) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);

    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;

procedure TRSItemFinderCustomFilter.LavaScales(constref Image, Templ: TMufasaBitmap); static;
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();

  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) > 235) or
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) > 235) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);

    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;

procedure TRSItemFinderCustomFilter.DarkEss(constref Image, Templ: TMufasaBitmap); static;
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();

  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    // grey/brightness calculation. Works for magic logs
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) div 3 > 54) or
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) div 3 > 54) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);

    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;

procedure TRSItemFinder._SetupHerbSeeds(herbSeed: String);
const
  ID_ARRAY = ['5224', '5225', '5226', '5227'];
var
  i: Int32;
begin
  for i := 0 to High(ID_ARRAY) do
    Self.AddItemName(herbSeed, ID_ARRAY[i]);
end;

var
  ItemFinder: TRSItemFinder;

begin
  ItemFinder.Setup();

  // We can map some useful things here
  ItemFinder._SetupHerbSeeds('Marrentill seed');
  ItemFinder._SetupHerbSeeds('Tarromin seed');
  ItemFinder._SetupHerbSeeds('Harralander seed');
  ItemFinder._SetupHerbSeeds('Ranarr seed');
  ItemFinder._SetupHerbSeeds('Toadflax seed');
  ItemFinder._SetupHerbSeeds('Irit seed');
  ItemFinder._SetupHerbSeeds('Avantoe seed');
  ItemFinder._SetupHerbSeeds('Kwuarm seed');
  ItemFinder._SetupHerbSeeds('Snapdragon seed');
  ItemFinder._SetupHerbSeeds('Cadantine seed');
  ItemFinder._SetupHerbSeeds('Lantadyme seed');
  ItemFinder._SetupHerbSeeds('Dwarf weed seed');
  ItemFinder._SetupHerbSeeds('Torstol seed');
  ItemFinder.AddItemFilter('Magic logs', @TRSItemFinderCustomFilter.ClearSparkles);
  ItemFinder.AddItemFilter('noted Magic logs', @TRSItemFinderCustomFilter.ClearSparkles);
  ItemFinder.AddItemFilter('Fire cape', @TRSItemFinderCustomFilter.FireCape);
  ItemFinder.AddItemFilter('Lava scale', @TRSItemFinderCustomFilter.LavaScales);
  ItemFinder.AddItemFilter('Lava scale shard', @TRSItemFinderCustomFilter.LavaScales);
  ItemFinder.AddItemFilter('Dark essence block', @TRSItemFinderCustomFilter.DarkEss);
end;
