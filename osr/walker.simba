(*
# WalkerV2
This file is responsible for the walking system.
It is heavily inspired in the original TRSWalker by Slacky and it's future
iterations made by Olly.
*)

{$DEFINE SRL_WALKERV2_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
(*
## PRSWalkerV2
TRSWalkerV2 pointer.
*)
  PRSWalkerV2 = ^TRSWalkerV2;

(*
## TRSWalker_OnWalkEvent
Callback object method to use while walking. This can be used to perform custom tasks while walking.

Example:
```pascal
procedure TRSWalker.WalkerTasks(Walker: PRSWalker; Position: TPoint; Destination: TPoint);
begin
  Antiban.RandomTab();
end;

var
  rsw: TRSWalker;
begin
  rsw.Setup('world');
  rsw.OnWalkingEvent := @rsw.WalkerTasks;
end;
```
*)
  TRSWalkerV2_OnWalkEvent = procedure(walker: PRSWalkerV2; position: TPoint; destination: TPoint) of object;

  TRSWalkerV2 = record(TSRLBaseRecord)
    Position: function (): TPoint of object;
    Height: function (p: TPoint = [-1,-1]): Single of object;
    GetLocal: function (tpa: TPointArray): TPointArray of object;

    MinEnergy, ClickRandomness, MouseAheadTimer: Int32;

    ScreenWalk, AdaptiveWalk, FancyMouse, Walking: Boolean;

    AdaptiveToggleDistances: TPoint;

    PathIndex: Int32;
    Path: TPointArray;

    WalkUpText: TStringArray;

    WebGraph: ^TWebGraph;
    MapImage: TMufasaBitmap;
    OnWalkEvent, OnWalkingEvent: TRSWalkerV2_OnWalkEvent;
  end;

procedure TRSWalkerV2.Setup(
  position: function (): TPoint of object;
  height: function (p: TPoint = [-1,-1]): Single of object;
  getLocal: function (tpa: TPointArray): TPointArray of object;
  graph: ^TWebGraph;
  mapImage: TMufasaBitmap
);
begin
  Self.Position := @position;
  Self.Height := @height;
  Self.GetLocal := @getLocal;
  Self.WebGraph := graph;
  Self.WalkUpText := ['Walk here', 'alk her'];
  Self.AdaptiveWalk := True;
end;


function TRSWalkerV2.PointToMM(playerPoint, p: TPoint; radians: Double): TPoint;
begin
  with Minimap.Center() do
  begin
    Result := p - playerPoint + [X, Y];
    Result := Result.Rotate(radians, [X, Y]);
  end;
end;

function TRSWalkerV2.PointsToMM(playerPoint: TPoint; tpa: TPointArray; radians: Double): TPointArray;
var
  p: TPoint;
begin
  with Minimap.Center() do
    for p in tpa do
    begin
      p := p - playerPoint + [X, Y];
      Result += p.Rotate(radians, [X, Y]);
    end;
end;

function TRSWalkerV2.FilterToMM(playerPoint: TPoint; dotFilter: TRSDotFilter; roll: Double): TRSDotFilter;
begin
  if dotFilter.Circle <> [] then
    with Self.PointToMM(playerPoint, dotFilter.Circle.Mean(), roll) do
      Result.Circle := [X, Y, dotFilter.Circle.Radius];

  Result.Bounds  := Self.PointsToMM(playerPoint, dotFilter.Bounds, roll);
  Result.Inside  := dotFilter.Inside;
  Result.Timeout := dotFilter.Timeout;
  Result.Timer   := dotFilter.Timer;
end;

function TRSWalkerV2.FiltersToMM(playerPoint: TPoint; dotFilters: TRSDotFilterArray; roll: Double): TRSDotFilterArray;
var
  i: Int32;
begin

  for i := High(dotFilters) downto 0 do
  begin
    if dotFilters[i].IsExpired() then
    begin
      Delete(dotFilters, i, 1);
      Continue;
    end;

    Result += Self.FilterToMM(playerPoint, dotFilters[i], roll);
  end;
end;

function TRSWalkerV2.MMToMap(playerPoint, minimapPoint: TPoint; radians: Single = $FFFF): TPoint;
begin
  Result := playerPoint + minimapPoint - Minimap.Center();
  if (radians = $FFFF) then
    radians := Minimap.GetCompassAngle(False);
  Result := Result.Rotate(-radians, playerPoint);
end;


(*
## TRSWalkerV2.InRange
```pascal
function TRSWalkerV2.InRangeEx(me, coordinate: TPoint; distance: Int32 = 4): Boolean;
function TRSWalkerV2.AnyInRangeEx(me: TPoint; coordinates: TPointArray; distance: Int32 = 4): Boolean; overload;
function TRSWalkerV2.InRange(coordinate: TPoint; distance: Int32 = 4): Boolean;
function TRSWalkerV2.AnyInRange(coordinates: TPointArray; distance: Int32 = 4): Boolean; overload;
```
Method used to quickly check if we are within distance of a certain `coordinate`.
This distance is measure in pixels and in a radial way.
You can optionally pass in a TPA to check if the closest point is within distance.
*)
function TRSWalkerV2.InRangeEx(me, coordinate: TPoint; distance: Int32 = 4): Boolean;
begin
  Result := me.InRange(coordinate, distance);
end;

function TRSWalkerV2.AnyInRangeEx(me: TPoint; coordinates: TPointArray; distance: Int32 = 4): Boolean; overload;
begin
  Result := me.AnyInRange(coordinates, distance);
end;

function TRSWalkerV2.InRange(coordinate: TPoint; distance: Int32 = 4): Boolean;
begin
  Result := Self.InRangeEx(Self.Position(), coordinate, distance);
end;

function TRSWalkerV2.AnyInRange(coordinates: TPointArray; distance: Int32 = 4): Boolean; overload;
begin
  Result := Self.AnyInRangeEx(Self.Position(), coordinates, distance);
end;


(*
## Walker.CheckRunEnergy
```pascal
procedure TRSWalkerV2.CheckRunEnergy();
```
Internal method used to check and enable the player run.
You will probably never need to call this directly.

The values used are hardcoded and if you don't like them, it's recommended you override the method.
The following example shows how one could override the function to enable run at 50% energy everytime, keep in mind though, you shouldn't do this, you should add randomness to it!
```
*)
procedure TRSWalkerV2.CheckRunEnergy();
begin
  if Minimap.IsRunEnabled() or (Minimap.GetRunEnergy() < Self.MinEnergy) then
    Exit;

  Self.MinEnergy := SRL.SkewedRand(40, 10, 100);
  Minimap.EnableRun();
end;

(*
## Walker.AdaptiveWalkCheck
```pascal
procedure TRSWalkerV2.AdaptiveWalkCheck(Position: TPoint);
```
Internal method used to check if adaptive walk should toggle and toggle TRSWalkerV2.ScreenWalk.
You will probably never need to call this directly.
*)
procedure TRSWalkerV2.AdaptiveWalkCheck(Position: TPoint);
var
  wasEnabled: Boolean;
begin
  wasEnabled := Self.ScreenWalk;
  Self.ScreenWalk := False;
  if ((Position.DistanceTo(Self.Path[0]) < Self.AdaptiveToggleDistances.X) or
      (Position.DistanceTo(Self.Path[High(Self.Path)]) < Self.AdaptiveToggleDistances.Y)) and
     (Random() > 0.05) then
    Self.ScreenWalk := True

  else if Random() < 0.02 then
    Self.ScreenWalk := True;

  if (not wasEnabled) and (Self.ScreenWalk) and (Self.FancyMouse) and (Random() < 0.75) and (Minimap.IsPointOn(Mouse.Position)) then
    Self.DoMouseAhead(Position, True);
end;

(*
## Walker.DoMouseAhead
```pascal
procedure TRSWalkerV2.DoMouseAhead(Position: TPoint; Forced: Boolean = False);
```
Internal method used to pre-hover the next walking step.
You will probably never need to call this directly.
*)
procedure TRSWalkerV2.DoMouseAhead(Position: TPoint; Forced: Boolean = False);
var
  flag: TPoint;
  dist: Int32;

  procedure MouseToNextPoint(myPos: TPoint);
  var
    mmPos: TPoint;
    idx: Int32;
    angle: Double;
    SlowMouse: TMouse;
  begin
    angle := Minimap.GetCompassAngle(False);
    idx := Self.PathIndex;
    while (idx < High(Self.Path)) and Self.IsWalkable(Self.Path[idx+1], myPos, angle) do
      Inc(idx);

    if (Idx = High(Self.Path)) and (Random(10) > 2) then Exit();

    mmPos := Self.Path[idx] - myPos + minimap.Center;
    mmPos := mmPos.Rotate(angle, Minimap.Center);

    if Self.ScreenWalk then
      mmPos := Minimap.PointToMSRect(mmPos).Mean();

    SlowMouse := Mouse;
    SlowMouse.Speed := Random(6,10);
    if not Self.ScreenWalk then
      SlowMouse.Move(Box(mmPos, Random(5,16), Random(5,16)))
    else
      SlowMouse.Move(Box(mmPos, Random(15,36), Random(15,36)));
  end;
begin
  if (not Forced) then
    if (GetTimeRunning() < Self.MouseAheadTimer) or (not Minimap.FindFlag(Flag)) then
      Exit();

  dist := Trunc(flag.DistanceTo(Minimap.Center()));
  if System.InRange(dist, Random(5,10), Random(60,70)) then
    MouseToNextPoint(Position);

  Self.MouseAheadTimer := GetTimeRunning() + SRL.SkewedRand(0,50,500);
  if Self.ScreenWalk then
    Self.MouseAheadTimer += SRL.SkewedRand(0,50,500);
end;

(*
## Walker.WaitMoving
```pascal
procedure TRSWalkerV2.WaitMoving(Destination: TPoint; WaitUntilDistance: Int32);
```
Internal method used to wait while we are moving using walker.
You will probably never need to call this directly.

This is where TRSWalkerV2.OnWalkingEvent are called.
*)
procedure TRSWalkerV2.WaitMoving(Destination: TPoint; WaitUntilDistance: Int32);
var
  Timeout, Countdown: TCountDown;
  Position: record
    Current, Previous: TPoint;
  end;
  awct: Int64;
begin
  Timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  Countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));

  // initial timeout needs to be longer, as we might not have started walking yet.
  Countdown.Timeout := GetTickCount() + Round(SRL.TruncatedGauss(2500, 3500));

  Position.Previous := Self.Position();
  Position.Current := Position.Previous;

  // Break from the loop if:
  // - Haven't moved in 500ms
  // - Been walking for over 20 seconds
  // - Within `WaitUntilDistance` to the destination
  repeat
    Self.CheckRunEnergy();

    Position.Previous := Position.Current;
    Position.Current := Self.Position();
    if Position.Current <> Position.Previous then
      Countdown.Restart();

    if (@Self.OnWalkingEvent <> nil) then
      Self.OnWalkingEvent(@Self, Position.Current, Destination);

    if (Self.AdaptiveWalk) and (GetTickCount() > awct) then
    begin
      Self.AdaptiveWalkCheck(Position.Current);
      awct := GetTickCount() + 1000;
    end;

    if Self.FancyMouse then
      Self.DoMouseAhead(Position.Current);

    if not Self.Walking then
      Break;

    Wait(100);
  until Timeout.IsFinished() or Countdown.IsFinished() or (Position.Current.DistanceTo(Destination) <= WaitUntilDistance);
end;

(*
## Walker.Click
```pascal
function TRSWalkerV2.Click(minimapPoint: TPoint; Randomness: Int32): Boolean;
```
Internal method used by walker to handle clicking while walking.
You will probably never need to call this directly.

If you wish to modify certain walker behaviors, it can be a good approach to override this function.
*)
function TRSWalkerV2.Click(minimapPoint: TPoint; Randomness: Int32): Boolean;
var
  p: TPoint;
  i: Int32;
  upText: String;
begin
  Result := True;
  Self.CheckRunEnergy();

  if Self.ScreenWalk then
  begin
    p := Minimap.RandomPointOnZoomRectangle(minimapPoint, randomness);
    Mouse.Move(Minimap.PointToMSRect(p).Mean());
    upText := MainScreen.GetUpText();

    if not upText.ContainsAny(Self.WalkUpText) then
      Exit(ChooseOption.Select('Walk here'));
  end
  else
    Mouse.Move(Minimap.RandomPointOn(minimapPoint, randomness));

  Mouse.Click(MOUSE_LEFT);

  // 15% chance of spam clicking
  if (Randomness > 0) and (Random() < 0.15) then
    for i := 0 to Random(3) do
    begin
      Mouse.Click(Mouse.Position(), MOUSE_LEFT);
      Wait(0, 150, wdLeft);
    end;
end;

(*
## Walker.WalkStepHelper()
```pascal
function TRSWalkerV2.WalkStepHelper(playerPoint, walkerPoint: TPoint; out minimapPoint: TPoint): Boolean;
```
Internal method used by walker to help walking steps.
You will probably never need to call this directly.
*)
function TRSWalkerV2.WalkStepHelper(playerPoint, walkerPoint: TPoint; out minimapPoint: TPoint): Boolean;
var
  event_time: UInt64;
begin
  event_time := GetTickCount();

  // run events
  if (@Self.OnWalkEvent <> nil) then
    Self.OnWalkEvent(@Self, playerPoint, walkerPoint);

  // in case the events used a bit of time, while our character was moving towards a point, we have to update the current position.
  if GetTickCount() - event_time > 100 then
    playerPoint := Self.Position();

  if not Self.Walking then
    Exit;

  minimapPoint := Self.PointToMM(playerPoint, walkerPoint, Minimap.GetCompassAngle(False));

  if Self.ScreenWalk then
    Result := Minimap.PointOnZoomRectangle(minimapPoint)
  else
    Result := Minimap.IsPointOn(minimapPoint);
end;

(*
## Walker.WalkFinalStep
```pascal
function TRSWalkerV2.WalkFinalStep(playerPoint, walkerPoint: TPoint; WaitUntilDistance: Int32): Boolean;
```
Internal method used by walker when finishing walking a path.
You will probably never need to call this directly but it can be used to take a single step.
*)
function TRSWalkerV2.WalkFinalStep(playerPoint, walkerPoint: TPoint; waitUntilDistance: Int32): Boolean;
var
  minimapPoint: TPoint;
begin
  if not Self.WalkStepHelper(playerPoint, walkerPoint, minimapPoint) then
    Exit(not Self.Walking);

  if (Minimap.Center().DistanceTo(minimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(minimapPoint, 0);
  if Result then
    Self.WaitMoving(walkerPoint, waitUntilDistance);
end;

(*
## Walker.WalkStep
```pascal
function TRSWalkerV2.WalkStep(playerPoint, walkerPoint: TPoint): Boolean;
```
Internal method used by walker while walking a path.
You will probably never need to call this directly.
*)
function TRSWalkerV2.WalkStep(playerPoint, walkerPoint: TPoint): Boolean;
var
  minimapPoint: TPoint;
  waitUntilDistance: Int32;
begin
  if not Self.WalkStepHelper(playerPoint, walkerPoint, minimapPoint) then
    Exit(not Self.Walking);

  if (Minimap.Center().DistanceTo(minimapPoint) < 5) then
    Exit(True);

  Result := Self.Click(minimapPoint, Self.ClickRandomness);
  if Result then
  begin
    if (Random() < 0.15) then // 15% chance of randomness else mean
      waitUntilDistance := Random(Distance(Minimap.Center(), minimapPoint))
    else
      waitUntilDistance := SRL.NormalRange(0, Distance(Minimap.Center(), minimapPoint) + 10);

    Self.WaitMoving(walkerPoint, waitUntilDistance);
  end;
end;

(*
## Walker.IsWalkable
```pascal
function TRSWalkerV2.IsWalkable(walkerPoint: TPoint; playerPoint: TPoint; Angle: Double): Boolean;
```
Internal method used by walker to decide if the destination point is within 1 click reach.
You will probably never need to call this directly.
*)
function TRSWalkerV2.IsWalkable(walkerPoint: TPoint; playerPoint: TPoint; angle: Double): Boolean;
var
  mmPoint: TPoint;
  b: TBox;
begin
  mmPoint := Self.PointToMM(playerPoint, walkerPoint, angle);
  if not Self.ScreenWalk then
    Exit(Minimap.IsPointOn(mmPoint, -1));

  b := Minimap.PointToMSRect(mmPoint, 1, 1, Angle).Bounds();
  if MainScreen.IsVisible(b.Middle) then
    Result := CountColor($0, b.Expand(4, MainScreen.Bounds())) = 0; //Client doesn't always render everything when zoomed out
end;


procedure TRSWalkerV2.DrawPath(bitmap: TMufasaBitmap; index: Int32; playerPoint: TPoint);
var
  i: Int32;
  path: TPointArray;
begin
  path := Self.Path.FilterCircle([playerPoint.X, playerPoint.Y, 90]);
  path := Self.PointsToMM(playerPoint, path, Minimap.GetCompassAngle(False));
  path := Minimap.Filter(path);

  for i := 0 to High(path) do
  begin
    if (i < High(path)) and bitmap.Bounds().Contains(path[i+1]) then
      bitmap.LineTo(path[i], path[i+1], $FFFFFF);

    if index = i then
      bitmap.DrawBox(path[i], 2, $FF1010)
    else
      bitmap.DrawBox(path[i], 2, $10FF10);
  end;
end;

procedure TRSWalkerV2.DebugPath(index: Int32; playerPoint: TPoint);
var
  bitmap: TMufasaBitmap;
begin
  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if RSClient.DebugOnClient then
  begin
    RSClient.Image().Clear();
    Self.DrawPath(RSClient.Image(), index, playerPoint);
    Exit;
  end;
  {$ENDIF}
  bitmap.FromClient();
  Self.DrawPath(bitmap, index, playerPoint);
  bitmap.Debug();
  bitmap.Free();
end;


(*
## TRSWalkerV2.WalkPath
```pascal
function TRSWalkerV2.WalkPath(Path: TPointArray; WaitUntilDistance: Int32 = 0): Boolean;
```
Walks a path of points taken from the loaded map. We advice that WaitUntilDistance is not 0.

Parameters:
- Path
	Array of points taken from the loaded map to walk. Must be ordered from start to finish.
- WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example:
```pascal
Walker.WalkPath([[100,100],[120,120],[140,140],[160,160],[180,180]]);
```
*)
function TRSWalkerV2.WalkPath(path: TPointArray; WaitUntilDistance: Int32 = 0; debug: Boolean = False): Boolean;

  function BuildPath(tpa: TPointArray): TPointArray;
  var
    i, j: Int32;
    line: TPointArray;
  begin
    for i := 1 to High(tpa) do
    begin
      line := TPAFromLine(tpa[i-1], tpa[i]);

      j := 0;
      while j < High(line) do
      begin
        Result += line[j];

        if (Self.ScreenWalk or Self.AdaptiveWalk) and ((MM2MS.ZoomLevel >= 70) and (MM2MS.ZoomLevel <= 100)) then
          Inc(j, Random(1, 4))
        else
          Inc(j, Random(3, 12));
      end;
    end;

    Result += tpa[High(tpa)];
  end;

  function AdvancePath(var index: Int32; playerPoint: TPoint): Boolean;
  var
    Angle: Double := Minimap.GetCompassAngle(False);
    Previous: Int32 := index;
    Nearest, Furthest: Int32;
  begin
    Nearest := Self.Path.Find(Self.Path.Sorted(playerPoint)[0]);
    Self.Pathindex := Nearest;

    while (Nearest < High(Self.Path)) and (not Self.IsWalkable(Self.Path[Nearest+1], playerPoint, Angle)) do
      Inc(Nearest);

    Furthest := Nearest;
    while (Furthest < High(Self.Path)) and Self.IsWalkable(Self.Path[Furthest+1], playerPoint, Angle) do
      Inc(Furthest);

    index := Furthest;

    // do the result check before randomness to avoid false error
    Result := (index > Previous);

    // 15% chance of randomness else furthest
    if Random() < 0.15 then
      index := Random(Nearest, Furthest);
  end;

var
  playerPoint: TPoint;
  index, fails: Int32;
begin
  Self.Walking := True;
  playerPoint := Self.Position();
  Self.Path := BuildPath([playerPoint] + path);

  if Self.AdaptiveWalk then
  begin
    Self.AdaptiveToggleDistances.X := RSW_ADAPTIVE_SCREEN_TOGGLE_DISTANCES.X + Random(-6,6);
    Self.AdaptiveToggleDistances.Y := RSW_ADAPTIVE_SCREEN_TOGGLE_DISTANCES.Y + Random(-16,16);
    Self.AdaptiveWalkCheck(playerPoint);
  end;

  while Self.Walking and (fails < 10) do
  begin
    playerPoint := Self.Position();

    if debug then
      Self.DebugPath(index, playerPoint);

    if AdvancePath(index, playerPoint) then
      fails := 0
    else
    begin
      //Likely haven't moved far enough to advance to next poin
      if Inc(fails) < 5 then
      begin
        Wait(300);
        Continue;
      end;

      //Screen walking struggles, so disable it
      if Self.AdaptiveWalk then
        Self.ScreenWalk := False
      else if (fails = 5) then
        case SRL.Dice(50) of
          True:  Minimap.SetCompassAngle(Minimap.GetCompassAngle() - SRL.TruncatedGauss(30, 360, 3));
          False: Minimap.SetCompassAngle(Minimap.GetCompassAngle() + SRL.TruncatedGauss(30, 360, 3));
        end;

      if (fails mod 2 = 0) then
        Minimap.WaitFlag();
    end;

    if index = High(Self.Path) then
    begin
      if Self.WalkFinalStep(playerPoint, Self.Path[index], WaitUntilDistance) then
        Exit(True);
      Continue;
    end;

    Self.WalkStep(playerPoint, Self.Path[index]);
  end;

  if fails = 10 then
    Self.DebugLn('Failed to advance path');
end;

(*
## TRSWalkerV2.WalkBlind
```pascal
function TRSWalkerV2.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;
```
"Blindly" walks to a point taken from the loaded map.
A straight line is generated between the player's position and destination which is then walked.

Parameters:
- Destination
  Destination point taken from the loaded map.
- WaitUntilDistance
	Determines when the method returns once the final point has been clicked. Default value: 0.
	| *WaitUntilDistance=0* waits until the player has reached the final point.
	| *WaitUntilDistance=20* waits until the player is within 20 pixels of the final point.

Example:
```pascal
Walker.WalkBlind([300, 300]);
```
*)
function TRSWalkerV2.WalkBlind(Destination: TPoint; WaitUntilDistance: Int32 = 0): Boolean;
begin
  Result := Self.WalkPath([Destination], WaitUntilDistance);
end;


(*
## TRSWalkerV2.GetClosestPoint
```pascal
function TRSWalkerV2.GetClosestPointEx(me: TPoint; destinations: TPointArray): TPoint;
function TRSWalkerV2.GetClosestPoint(destinations: TPointArray): TPoint;
```
Method used to get the closest Point to the Player out of a TPA.
*)
function TRSWalkerV2.GetClosestPointEx(me: TPoint; destinations: TPointArray): TPoint;
var
  shortPaths: T2DPointArray;
  path: TPointArray;
  shortest, dist: Int32;
  destination: TPoint;
begin
  me := Self.Position();
  shortest := $FFFFFF;

  for destination in destinations do
  begin
    try
      path := Self.WebGraph^.PathBetween(me, destination, 0);
    except
      Continue;
    end;

    if path = [] then
      Continue;

    dist := Floor(path.TotalDistance());
    if dist < shortest then
    begin
      shortPaths := [path];
      shortest := dist;
    end
    else if dist = shortest then
      shortPaths += path;

    path := [];
  end;

  if shortPaths = [] then
    Exit(destinations.NearestPoint(me));

  Result := shortPaths.RandomValue().Last();
end;

function TRSWalkerV2.GetClosestPoint(destinations: TPointArray): TPoint;
begin
  Result := Self.GetClosestPointEx(Self.Position(), destinations);
end;


(*
## TRSWalkerV2.WebWalk
```pascal
function TRSWalkerV2.WebWalkEx(me: TPoint; destination: TPoint; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0): Boolean;
function TRSWalkerV2.WebWalk(destination: TPoint; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0): Boolean;
function TRSWalkerV2.WebWalk(destinations: TPointArray; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0): Boolean; overload;
```
Web walks to the destination point on the loaded map. Does **not** handle any obstacles.
*)
function TRSWalkerV2.WebWalkEx(me: TPoint; destination: TPoint; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0; debug: Boolean = False): Boolean;
var
  path: TPointArray;
  bmp: TMufasaBitmap;
  tmp: TWebGraph;
begin
  if not System.InRange(pathRandomness, 0, 1) then
    Self.Fatal('TRSWalkerV2.WebWalk `PathRandomness` must be within 0..1');

  try
    path := Self.WebGraph^.PathBetween(me, destination, pathRandomness);
  except
    if Assigned(Self.MapImage) then
    begin
      bmp := Self.MapImage.Copy();
      tmp := Self.WebGraph^;

      if (@Self.GetLocal <> nil) then
      begin
        tmp.Nodes := Self.GetLocal(tmp.Nodes);
        me := Self.GetLocal([me])[0];
        destination := Self.GetLocal([destination])[0];
      end;

      tmp.Draw(bmp);

      if bmp.Bounds().Contains(me) then
      begin
        bmp.DrawCross(me, 4, $00FF00);
        bmp.DrawCross(me.Offset(1,0), 4, $00FF00);
        bmp.DrawCross(me.Offset(0,1), 4, $00FF00);
        bmp.DrawCross(me.Offset(1,1), 4, $00FF00);
      end;

      if bmp.Bounds().Contains(destination) then
      begin
        bmp.DrawCross(destination, 4, $00FF00);
        bmp.DrawCross(destination.Offset(1,0), 4, $00FF00);
        bmp.DrawCross(destination.Offset(0,1), 4, $00FF00);
        bmp.DrawCross(destination.Offset(1,1), 4, $00FF00);
      end;

      bmp.Debug();
      bmp.Free();
    end;
    TerminateScript(GetExceptionMessage());
  end;
  Result := Self.WalkPath(path, waitUntilDistance, debug);
end;

function TRSWalkerV2.WebWalk(destination: TPoint; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0; debug: Boolean = False): Boolean;
begin
  Result := Self.WebWalkEx(Self.Position(), destination, waitUntilDistance, pathRandomness, debug);
end;

function TRSWalkerV2.WebWalk(destinations: TPointArray; waitUntilDistance: Int32 = 0; pathRandomness: Double = 0; debug: Boolean = False): Boolean; overload;
var
  me, destination: TPoint;
begin
  me := Self.Position();
  destination := Self.GetClosestPointEx(me, destinations);
  Result := Self.WebWalkEx(me, destination, waitUntilDistance, pathRandomness, debug);
end;


(*
## TRSWalkerV2.MakePointVisible
```pascal
function TRSWalkerV2.MakePointVisible(p: TPoint): Boolean;
function TRSWalkerV2.MakePointVisible(tpa: TPointArray): Boolean; overload;
```
Wrapper function used to attempt to make a Point visible on the MainScreen.
*)
function TRSWalkerV2.MakePointVisible(p: TPoint): Boolean;
begin
  Result := Minimap.MakePointVisible(Self.PointToMM(Self.Position(), p, Minimap.GetCompassAngle(False)));
end;

function TRSWalkerV2.MakePointVisible(tpa: TPointArray): Boolean; overload;
var
  me, p: TPoint;
begin
  me := Self.Position();
  p := Self.GetClosestPointEx(me, tpa);
  Result := Minimap.MakePointVisible(Self.PointToMM(me, p, Minimap.GetCompassAngle(False)));
end;

