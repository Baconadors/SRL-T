(*
GrandExchange
=============
Methods to interact with the grand exchange.
*)
{$DEFINE SRL_GRANDEXCHANGE_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  ERSGEOverviewButton = (
    CHANGE_TAB,
    COLLECT
  );
  
  ERSGESetupOfferButton = (
    HISTORY,
    ITEM,
    QUANTITY,
    PRICE,
    QUANTITY_1,
    QUANTITY_10,
    QUANTITY_100,
    QUANTITY_ALL,
    QUANTITY_ENTER,
    PRICE_DECREASE,
    PRICE_GUIDE,
    PRICE_ENTER,
    PRICE_INCREASE,
    TOTAL,
    CONFIRM
  );
  
  ERSGEOfferStatusButton = (
    HISTORY,
    ITEM,
    QUANTITY, 
    PRICE,
    TOTAL,
    PROGRESS
  );
  
  ERSGEInterface = (
    UNKNOWN,
    OVERVIEW,
    HISTORY,
    OFFER_STATUS,
    OFFER_SETUP
  );

  ERSGEOfferCreateButton = (
    BUY,
    SELL
  );

  TRSGrandExchange = record(TRSTitledInteface)
    FINDER_BANKER: TRSObjectFinder;
    FINDER_CLERK: TRSObjectFinder;
  end;

function TRSGrandExchange.GetSetupOfferButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[45,18], [35,25], [152,40],[160,18], [159,18], [210,18], [410,18], [40,36]]);
end;

function TRSGrandExchange.GetSetupOfferButton(Button: ERSGESetupOfferButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetSetupOfferButtons();
begin
  if Length(Buttons) = Length(ERSGESetupOfferButton) then
    Result := Buttons[Button];
end;

function TRSGrandExchange.GetOverviewButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[45,18], [55,18], [81,18]]);
end;

function TRSGrandExchange.GetOverviewButton(Button: ERSGEOverviewButton): TRSButton;
var
  I: Int32;
  Buttons: TRSButtonArray := Self.GetOverviewButtons();
begin
  case Button of
    ERSGEOverviewButton.COLLECT: // Can be hidden
      begin
        for I := 0 to High(Buttons) do
          if Buttons[I].FindText('Collect', RS_FONT_PLAIN_11, $FFFFFF) then
            Exit(Buttons[I]);
      end;
    else
      if Length(Buttons) >= Length(ERSGEOverviewButton) - 1 then
        Result := Buttons[Button];
  end;
end;

function TRSGrandExchange.GetOfferStatusButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[45,18], [36,32], [40,36],[292,15], [160,18], [159,18], [410,18], [210,18]]);
end;

function TRSGrandExchange.GetOfferStatusButton(Button: ERSGEOfferStatusButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetOfferStatusButtons();
begin
  if Length(Buttons) = Length(ERSGEOfferStatusButton) then
    Result := Buttons[Button];
end;

// Finds the BUY and SELL buttons to create an offer within a given slot
function TRSGrandExchange.GetOfferCreateButtons(slotNumber : Int32) : TRSButtonArray;
begin
  result := self.FindButtons([[46,45]], self.GetOfferSlots()[slotNumber]);
end;

function TRSGrandExchange.GetOfferCreateButton(Button : ERSGEOfferCreateButton; slotNumber : Int32) : TRSButton;
var
  Buttons: TRSButtonArray := Self.GetOfferCreateButtons(slotNumber);
begin
  if Length(Buttons) = Length(ERSGEOfferCreateButton) then
    Result := Buttons[Button];
end;

function TRSGrandExchange.FindNPC(Finder: TRSObjectFinder): T2DPointArray;
var
  TPA: TPointArray;
  P: TPoint;
  B: TBox;
  I: Int32;
  Weights: TIntegerArray;
  Size: Int32;
begin
  // Find center G.E using yellow dots
  TPA := Minimap.GetDots(ERSMinimapDot.NPC);
  TPA.Offset([2, 2]);
  TPA := TPA.Cluster(15).Biggest();
  with TPA.MeanEx() do
    P := Minimap.VecToMS([X, Y]);

  // Size of GE center at fixed client & default(50) zoom.
  Size := MainScreen.NormalizeDistance(110);
  
  // Center G.E on the mainscreen
  B := [P.X, P.Y, P.X, P.Y];
  B := B.Expand(Size);

  Result := MainScreen.FindObject(Finder, B);

  if (Length(Result) > 0) then
  begin
    // Weigh from center AND towards the player
    SetLength(Weights, Length(Result));
    for I := 0 to High(Result) do
      if Length(Result[I]) > 0 then
        Weights[I] := Distance(Result[I].Mean, P) + Min(Distance(Result[I].Mean, MainScreen.Center), Size);

    QuickATPASort(Weights, Result, 0, High(Result), True);
  end;
end;

function TRSGrandExchange.OpenBank: Boolean;
var
  ATPA: T2DPointArray;
  TPA: TPointArray;
  P: TPoint;
begin
  if Bank.IsOpen() or Bank.Open(Mouse.Position()) then
    Exit(True);

  ATPA := Self.FindNPC(Self.FINDER_BANKER);
  if Length(ATPA) > 3 then
    SetLength(ATPA, 3);
  
  for TPA in ATPA do
  begin
    P := TPA[Random(Length(TPA))];
    P.X += Random(-2, 2);
    P.Y += Random(-2, 2);
    
    if Bank.Open(P) then
      Exit(True);
  end;
end;

function TRSGrandExchange.GetCurrentInterface: ERSGEInterface;
var
  tabText : String;
begin
  if Self.GetSetupOfferButton(ERSGESetupOfferButton.HISTORY).Visible() then
    Result := ERSGEInterface.OFFER_SETUP
  else 
  if Self.GetOfferStatusButton(ERSGEOfferStatusButton.HISTORY).Visible() then
    Result := ERSGEInterface.OFFER_STATUS
  else
  if Self.GetOverviewButton(ERSGEOverviewButton.CHANGE_TAB).Visible() then
  begin
    tabText := OCR.Recognize(Self.GetOverviewButton(ERSGEOverviewButton.CHANGE_TAB).Bounds, TOCRColorRule.Create([2070783, $FFFFFF]), RS_FONT_PLAIN_11);
    if lowercase(tabText) = 'history' then
      Result := ERSGEInterface.OVERVIEW
    else if lowercase(tabText) = 'exchange' then
      Result := ERSGEInterface.HISTORY;
  end;
end;

function TRSGrandExchange.IsOpen: Boolean;
begin
  Result := Self.GetCurrentInterface() <> ERSGEInterface.UNKNOWN;
end;

function TRSGrandExchange.Close(PressEscape: Boolean = False): Boolean; 
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSGrandExchange.GetItemName: String;
var
  Button: TRSButton;
  B: TBox;
begin
  B.X1 := Self.X1 + 175;
  B.Y1 := Self.Y1 + 45;
  B.X2 := Self.X2 - 25;
  B.Y2 := Self.Y1 + 65;

  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Result := OCR.Recognize(B, TOCRColorRule.Create([2070783]), RS_FONT_BOLD_12);
    ERSGEInterface.OFFER_STATUS: Result := OCR.Recognize(B, TOCRColorRule.Create([2070783]), RS_FONT_BOLD_12);
  end;
end;

function TRSGrandExchange.GetItemQuantity: Int32;
var
  Button: TRSButton;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Button := Self.GetSetupOfferButton(ERSGESetupOfferButton.QUANTITY);  
    ERSGEInterface.OFFER_STATUS: Button := Self.GetOfferStatusButton(ERSGEOfferStatusButton.QUANTITY);
  end;
  
  if Button.Visible() then
    Result := OCR.RecognizeNumber(Button.Bounds, TOCRColorRule.Create([4176127]), RS_FONT_PLAIN_11);
end;

function TRSGrandExchange.GetItemPrice: Int32;
var
  Button: TRSButton;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Button := Self.GetSetupOfferButton(ERSGESetupOfferButton.PRICE);  
    ERSGEInterface.OFFER_STATUS: Button := Self.GetOfferStatusButton(ERSGEOfferStatusButton.PRICE);
  end;
  
  if Button.Visible() then
    Result := OCR.RecognizeNumber(Button.Bounds,  TOCRColorRule.Create([4176127]), RS_FONT_PLAIN_11);
end;

function TRSGrandExchange.GetItemTotalPrice: Int32;
var
  Button: TRSButton;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Button := Self.GetSetupOfferButton(ERSGESetupOfferButton.TOTAL);  
    ERSGEInterface.OFFER_STATUS: Button := Self.GetOfferStatusButton(ERSGEOfferStatusButton.TOTAL);
  end;
  
  if Button.Visible() then
    Result := OCR.RecognizeNumber(Button.Bounds,  TOCRColorRule.Create([$FFFFFF]), RS_FONT_PLAIN_12);
end;

function TRSGrandExchange.GetItemGuidePrice: Int32;
var
  Button: TRSButton;
  B: TBox;
begin
  case Self.GetCurrentInterface() of
    ERSGEInterface.OFFER_SETUP:  Button := Self.GetSetupOfferButton(ERSGESetupOfferButton.ITEM);  
    ERSGEInterface.OFFER_STATUS: Button := Self.GetOfferStatusButton(ERSGEOfferStatusButton.ITEM);
  end;
  
  if Button.Visible() then
  begin
    B := Button.Bounds;
    B.Y1 += 40;
    B.Y2 += 20;
    B.X2 += 40;
    
    Result := OCR.RecognizeNumber(B,  TOCRColorRule.Create([4176127]), RS_FONT_PLAIN_11); 
  end;  
end;

function TRSGrandExchange.IsSearchOpen: Boolean;
begin
  Result := OCR.LocateText(Chat.Bounds, 'What would you like to buy', RS_FONT_BOLD_12, TOCRColorRule.Create([$000000]), 1);
end;

function TRSGrandExchange.OpenSearch: Boolean;
begin
  if Self.IsSearchOpen() then
    Exit(True);
    
  if Self.GetSetupOfferButton(ERSGESetupOfferButton.item).Click() then
    Result := WaitUntil(Self.IsSearchOpen(), 500, 2500);
end;

function TRSGrandExchange.GetCurrentSearch: String;
begin
  Result := OCR.Recognize(Chat.Bounds,  TOCRColorRule.Create([8388608]), RS_FONT_BOLD_12).StripR('*');
end;

function TRSGrandExchange.GetPreviousSearch: String;
var
  B : tBox;
begin
  // Offset from chat to find the result box
  B := [chat.x1 + 254, chat.y1 + 28, chat.x2 - 138, chat.y2 - 80];
  result := OCR.RecognizeMulti(B, TOCRColorRule.Create([$000000]), RS_FONT_PLAIN_12).Merge(' ');
end;

function TRSGrandExchange.ClearSearch: Boolean;
begin
  while (Self.GetCurrentSearch() <> '') do
    Keyboard.PressKey(VK_BACK);
    
  Result := Self.IsOpen() and (Self.GetCurrentSearch() = '');
end;

function TRSGrandExchange.FindSearch(Item: String; out B: TBox): Boolean;
var
  searchGrid : tBoxArray := grid(3,3, 160, 32, point(0,0), point(Chat.X1 + 7, Chat.Y1 + 29));
begin
  if (Item <> '') then
    Item[1] := UpCase(Item[1]);

  for b in searchGrid do
    if OCR.RecognizeMulti(b, TOCRColorRule.Create([$000000]), RS_FONT_PLAIN_12).Merge(' ') = Item then Exit(True);
end;

function TRSGrandExchange.ClickSearch(Item: String): Boolean;
var
  B: TBox;
begin
  Result := Self.IsSearchOpen() and (OCR.LocateText(Chat.Bounds, Item, RS_FONT_PLAIN_12,  TOCRColorRule.Create([$000000]), B) = 1);
  if Result then
    Mouse.Click(B, MOUSE_LEFT);
end;

function TRSGrandExchange.Search(Item: String; Click: Boolean): Boolean;
var
  B: TBox;
begin
  if OCR.LocateText(Chat.Bounds, Item, RS_FONT_BOLD_12, TOCRColorRule.Create([8388608]), 1) then
    Exit(True);
  
  if Self.OpenSearch() and Self.ClearSearch() then
  begin
    if self.GetPreviousSearch = Item then
    begin
      B := [chat.x1 + 124, chat.y1 + 28, chat.x2 - 138, chat.y2 - 80];

      result := True;
    end else
    begin
      Keyboard.Send(Item);

      Result := WaitUntil(Self.FindSearch(Item, B), 500, 2500);
    end;

    if Result and Click then
      Mouse.Click(B, MOUSE_LEFT);
  end;
end;

type
  ERSGEOfferType = (EMPTY, BUY, SELL, UNKNOWN);

  TRSGEOfferStatus = record
    OfferType: ERSGEOfferType;
    Item: String;
    Quantity: Int32;
    PricePerItem: Int32;
    TotalPrice: Int32;
    Progress: Int32;
  end;
  
function TRSGrandExchange.GetOfferSlots: TBoxArray;
begin
  Result := Grid(4, 2, 114, 109, [3, 11], [Self.X1 + 9, Self.Y1 + 64]);
end;
  
function TRSGrandExchange.GetProgress(B: TBox; BarSize: Int32): Int32;
var
  TPA: TPointArray;
begin
  if SRL.FindColors(TPA, [1664168, 18944], B) then
    Result := Round(TPA.Bounds.Width() / BarSize * 100)
  else
  if SRL.CountColor(111, B) > BarSize then
    Result := -1;
end;

function TRSGrandExchange.GetOfferStatus(Slot: Int32): TRSGEOfferStatus;
var
  Slots: TBoxArray;
begin
  Slots := Self.GetOfferSlots();
  
  case OCR.Recognize(Slots[Slot], TOCRColorRule.Create([2070783]), RS_FONT_BOLD_12) of
    'Empty': Result.OfferType := ERSGEOfferType.EMPTY;
    'Buy':   Result.OfferType := ERSGEOfferType.BUY; 
    'Sell':  Result.OfferType := ERSGEOfferType.SELL;
    else     Result.OfferType := ERSGEOfferType.UNKNOWN;
  end;
  
  if (Result.OfferType <> ERSGEOfferType.EMPTY) then
  begin
    Result.Item := OCR.RecognizeMulti(Slots[Slot], TOCRColorRule.Create([4176127]), RS_FONT_PLAIN_11).Merge(' ');
    Result.PricePerItem := OCR.RecognizeNumber(Slots[Slot], TOCRColorRule.Create([2070783]), RS_FONT_PLAIN_11);
    Result.Quantity := SRL.GetItemAmount(Slots[Slot]);
    Result.TotalPrice := Result.Quantity * Result.PricePerItem;
    Result.Progress := Self.GetProgress(Slots[Slot], 105);
  end;
end;

type
  TRSGEHistoryItem = record
    OfferType: String;
    Item: String;
    Quantity: Int32;
    PricePerItem: Int32;
    TotalPrice: Int32;
    PreTax: Int32;
    Bounds: TBox;
  end;
  TRSGEHistory = array of TRSGEHistoryItem;

function TRSGrandExchange.GetHistory: TRSGEHistory;
const
  BG_DARK := CTS1(3621708, 5);
  BG_LIGHT := CTS1(4016466, 5); 
var
  RowDark, RowLight: TPointArray;
  Row: TBox;
  Rows, Columns: TBoxArray;
  Item: TRSGEHistoryItem;
  tempOfferType : String;
begin
  SRL.FindColors(RowDark, BG_DARK, Self.Bounds);
  SRL.FindColors(RowLight, BG_LIGHT, Self.Bounds);
  
  Rows := RowDark.Cluster(1).ToTBA() + RowLight.Cluster(1).ToTBA();
  Rows.SortByY();

  for Row in Rows do
  begin
    if (Row.Width < 10) or (Row.Height < 10) then
      Continue;
 
    Columns := Row.Partition(1, 4);

    Item := [];
    Item.Bounds := Row;

    Item.Item := OCR.Recognize(Columns[1].Expand(25, 0), TOCRColorRule.Create([4176127, $FFFFFF]), RS_FONT_PLAIN_12);
    if (Item.Item = '') then
      Continue;

    tempOfferType := replace(OCR.Recognize(Columns[0], TOCRColorRule.Create([2070783]), RS_FONT_PLAIN_11), ':', '', [rfReplaceAll]);

    if stringMatch(trim(lowercase(tempOfferType)), 'sold') >= 0.75 then
      Item.OfferType := 'Sell'
    else if StringMatch(trim(lowercase(tempOfferType)), 'bought') > 0.75 then
      Item.OfferType := 'Buy'
    else
      Item.OfferType := '';

    Item.Quantity := SRL.GetItemAmount(Columns[2]);
    if (Item.Quantity = 0) Then
      Item.Quantity := 1;
      
    Item.TotalPrice := OCR.RecognizeNumber(Columns[3], TOCRColorRule.Create([4176127]), RS_FONT_PLAIN_11);
    Item.PreTax     := StrToInt(ExtractFromStr('0' + OCR.Recognize(Columns[3], TOCRColorRule.Create([10461087]), RS_FONT_PLAIN_11).Before(' - '), Numbers));
    Item.PricePerItem := Item.TotalPrice div Item.Quantity;

    Result := Result + Item;
  end;
end;

procedure TRSGrandExchange.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  Bitmap.DrawButtons(Self.GetSetupOfferButtons);
    
  inherited;
end;

procedure TRSGrandExchange.Setup; override;
begin
  inherited;

  Self.Name := 'Grand Exchange';
  Self.ButtonColors += [CTS1(2240055, 0), CTS1(2897729, 2), CTS1(2240055, 0), CTS1(2642530, 20), CTS1(3951189, 10), CTS1(2306104, 0)];

  Self.FINDER_BANKER.ColorClusters += [CTS2(6710894, 12, 0.19, 0.07), CTS2(2110788, 11, 0.29, 0.84), 10]; // grey, brown
  Self.FINDER_BANKER.ClusterDistance := 3;
  Self.FINDER_BANKER.Grow := 3;
  Self.FINDER_BANKER.Erode := 3;
  Self.FINDER_BANKER.MinLongSide := 10;

  Self.FINDER_CLERK.Colors += [CTS2(6176331, 11, 0.07, 0.51)]; // purple
  Self.FINDER_CLERK.ClusterDistance := 3;
  Self.FINDER_CLERK.Grow := 1;
  Self.FINDER_CLERK.Erode := 1;
  Self.FINDER_CLERK.MinLongSide := 10;
end;

procedure TRSGrandExchange.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 484;
        Self.Alignment.Center.MaxHeight := 304;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 484;
        Self.Alignment.Center.MaxHeight := 304;
      end;
  end;
end;

var
  GrandExchange: TRSGrandExchange;

(*
Bank.Open
~~~~~~~~~
.. pascal:: function TRSBank.Open(Location: ERSBankLocation): Boolean; override;

Overrides **Bank.Open** to support opening the grand exchange.
*)
function TRSBank.Open(Location: ERSBankLocation): Boolean; override;
begin
  if (Location = ERSBankLocation.GRAND_EXCHANGE) then
    Result := GrandExchange.OpenBank()
  else
    Result := inherited();
end;
  
procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  GrandExchange.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  GrandExchange.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  GrandExchange.Draw(Bitmap);
end;
