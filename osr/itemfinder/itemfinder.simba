(*
Item Finder
===========
*)

{$DEFINE SRL_ITEMFINDER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

const
  ITEM_FINDER_IMAGES_VERSION = '7'; // Inc if images have changed
  ITEM_FINDER_IMAGES_ZIP     = {$macro CURRENT_DIRECTORY} + '/item-images.zip';
  ITEM_FINDER_IMAGES_PATH    = {$macro CURRENT_DIRECTORY} + '/images/' + ITEM_FINDER_IMAGES_VERSION + '/';
  ITEM_FINDER_ITEM_NAMES_FILE  = {$macro CURRENT_DIRECTORY} + '/item-names';

type
  TRSItem = Variant;
  TRSItemArray = array of TRSItem;

  TRSItemFinderCustomFilter = procedure(constref image, templ: TMufasaBitmap) of object;

  TRSItemFinder = record(TSRLBaseRecord)
    ItemNames: TStringList;
    ItemFilters: array of record
      Name: String;
      Filter: TRSItemFinderCustomFilter;
    end;

    ItemImages: array of record
      Name: String;
      Images: array of TMufasaBitmap;
    end;

    Similarity: Single;
  end;

procedure TRSItemFinder.Free();
var
  i, j: Int32;
begin
  Self.ItemNames.Free();

  for i := 0 to High(Self.ItemImages) do
    for j := 0 to High(Self.ItemImages[i].Images) do
      Self.ItemImages[i].Images[j].Free();
end;

procedure TRSItemFinder.Setup();
begin
  ForceDirectories(ITEM_FINDER_IMAGES_PATH);

  Self.Name := 'Item Finder';
  Self.Similarity := 0.999;

  Self.ItemNames.Init();
  Self.ItemNames.LoadFromFile(ITEM_FINDER_ITEM_NAMES_FILE);
  Self.ItemNames.SetSorted(True);

  AddOnTerminate(@Self.Free);
end;

procedure TRSItemFinder.AddItemName(constref item, id: String);
begin
  Self.ItemNames.Add(item + '=' + id);
end;

procedure TRSItemFinder.AddItemFilter(item: String; filter: TRSItemFinderCustomFilter);
begin
  Self.ItemFilters += [item, @filter];
end;


function TRSItemFinder.GetItemIDs(item: String): TIntegerArray;
type
  TStringList = TStringList;

  function TStringList.NameFromIndex(index: Int32): String;
  begin
    if InRange(index, 0, Self.GetCount() - 1) then
      Result := Self.GetStrings(index).Before('=');
  end;

  function TStringList.ValueFromIndex(index: Int32): String;
  begin
    if InRange(index, 0, Self.GetCount() - 1) then
      Result := Self.GetStrings(index).After('=');
  end;

var
  itemID: Int32;
begin
  if item.IsDigit() then
    Exit(Result + item.ExtractNumber());

  itemID := Self.ItemNames.IndexOfName(item);
  while SameText(item, Self.ItemNames.NameFromIndex(itemID)) do
  begin
    Result := Result + StrToInt(Self.ItemNames.ValueFromIndex(itemID));

    Inc(itemID);
  end;
end;


function TRSItemFinder.GetItemImages(item: String): array of TMufasaBitmap;
type
  TMufasaBitmap = TMufasaBitmap;

  function TMufasaBitmap.Equals(Other: TMufasaBitmap): Boolean;
  begin
    Result := (Self.GetWidth()  = Other.GetWidth()) and
              (Self.GetHeight() = Other.GetHeight()) and
              (CompareMem(Self.GetData()^, Other.GetData()^, Self.GetWidth() * Self.GetHeight() * SizeOf(TRGB32)));
  end;

var
  fileName: String;
  image: TMufasaBitmap;
  itemID: Int32;
  i: Int32;
begin
  for i := 0 to High(Self.ItemImages) do
    if (Self.ItemImages[i].Name = item) then
      Exit(Self.ItemImages[i].Images);

  for itemID in Self.GetItemIDs(item) do
  begin
    fileName := ExpandFileName(ITEM_FINDER_IMAGES_PATH + ToStr(itemID) + '.png');

    if not FileExists(fileName) and not UnZipOneFile(ITEM_FINDER_IMAGES_ZIP, ExtractFileName(fileName), ITEM_FINDER_IMAGES_PATH) then
      Self.Fatal('Unknown item: ' + ToStr(itemID));

    image.Init(Client.GetMBitmaps());
    image.LoadFromFile(fileName);
    image.SetName(item);
    image.ReplaceColor(RS_ITEM_SHADOW, 0);

    for i := 0 to High(Result) do
      if image.Equals(Result[i]) then
      begin
        image.Free();
        image := nil;

        Break;
      end;

    if (image <> nil) then
      Result += image;
  end;

  if (Length(Result) = 0) then
    Self.Fatal('Unknown item: ' + item);

  Self.ItemImages += [item, Result];
end;

procedure TRSItemFinder.ClearSparkles(constref Image, Templ: TMufasaBitmap);
var
  I: Int32;
  ImagePtr, TemplPtr: PRGB32;
begin
  ImagePtr := Image.GetData();
  TemplPtr := Templ.GetData();
  
  for I := 0 to (Image.GetWidth() * Image.GetHeight())-1 do
  begin
    // grey/brightness calculation. Works for magic logs
    if ((ImagePtr^.R + ImagePtr^.G + ImagePtr^.B) div 3 > 130) or    
       ((TemplPtr^.R + TemplPtr^.G + TemplPtr^.B) div 3 > 130) then
      ImagePtr^ := TemplPtr^ := Default(TRGB32);
    
    Inc(ImagePtr);
    Inc(TemplPtr);
  end;
end;


function TRSItemFinder.CompareItems(constref Image, Template: TMufasaBitmap; constref CustomFilter: TRSItemFinderCustomFilter): Single;
var
  ImageBorder, TemplateBorder: TPointArray;
  TPA, ClearTPA: TPointArray;
  AlignedTemplate, AlignedImage: TMufasaBitmap;
  Align: TPoint;
  ClearColor: Int32;
  P: TPoint;
begin
  if Image.FindColors(ImageBorder, RS_ITEM_BORDER) and Template.FindColors(TemplateBorder, RS_ITEM_BORDER) then
  begin
    with TemplateBorder.Bounds() do
    begin
      Template.Crop(X1, Y1, X2, Y2);
      TemplateBorder := TemplateBorder.Offset(-X1,-Y1);
    end;
    
    // Use highest Y point of both images for alignment
    // TPA is already sorted like this with how FindColors operates.
    Align.X := Max(0, ImageBorder[High(ImageBorder)].X - TemplateBorder[High(TemplateBorder)].X);
    Align.Y := Max(0, ImageBorder[High(ImageBorder)].Y - TemplateBorder[High(TemplateBorder)].Y);
  
    // Compare borders. Sparkles can modify boundaries.
    if (@CustomFilter = nil) then
      for P in TemplateBorder.Offset(Align) do
      begin
        if (P.Y <= 8) then // Possible stack number... Don't compare.
          Continue;
        if (not PointInTPA(P, ImageBorder)) then // Borders don't match. No point going further.
          Exit;
      end;
    
    AlignedImage := Image.Copy();
  
    AlignedTemplate.Init(Client.GetMBitmaps());
    AlignedTemplate.SetSize(Image.GetWidth(), Image.GetHeight());
    
    Template.DrawTransparent(Align.X, Align.Y, AlignedTemplate);  
    
    if (@CustomFilter <> nil) then
      Self.ClearSparkles(AlignedImage, AlignedTemplate);

    // Clear these template colors on both images
    for ClearColor in [RS_ITEM_YELLOW_STACK, RS_ITEM_WHITE_STACK, RS_ITEM_GREEN_STACK, RS_ITEM_BORDER] do
      if AlignedTemplate.FindColors(TPA, ClearColor) then 
        ClearTPA += TPA;  
   
    // Clear image background on template
    if AlignedImage.FindColors(TPA, 0) then 
      ClearTPA += TPA;  
    if AlignedTemplate.FindColors(TPA, 0) then
      ClearTPA += TPA;

    AlignedTemplate.DrawTPA(ClearTPA, 0);
    AlignedImage.DrawTPA(ClearTPA, 0);

    Result := AlignedImage.MatchTemplate(AlignedTemplate, TM_CCORR_NORMED)[0][0]; // IDK why I used CCORR. But it works!
  
    AlignedImage.Free();
    AlignedTemplate.Free(); 
  end;
end;

type
  TRSItemFinderMatch = record
    Item: TRSItem;
    Box: TBox;
    Index: Integer;
  end;
  TRSItemFinderMatchArray = array of TRSItemFinderMatch;


function ItemFinderMatchSort(constref L, R: TRSItemFinderMatch): Int32;
begin
  if L.Index < R.Index then
    Result := -1
  else if L.Index > R.Index then
    Result := 1;
end;

function TRSItemFinderMatchArray.Find(const Value: TRSItemFinderMatch): Int32; constref;
begin
  for Result := 0 to High(Self) do
    if Self[result] = Value then
      Exit;

  Result := -1;
end;

//Can probably be optimized but needed something that worked.
function TRSItemFinderMatchArray.Difference(other: TRSItemFinderMatchArray): TRSItemFinderMatchArray;
var
  arr: TRSItemFinderMatchArray;
  element: TRSItemFinderMatch;
  value: Int32;
begin
  for element in Self do
  begin
    value := other.Find(element);
    if value = -1 then
    begin
      Result += element;
      Continue;
    end;

    Delete(other, value, 1); //make the other array smaller with values we already checked.
  end;

  arr := Copy(Self);

  for element in other do
  begin
    value := arr.Find(element);
    if value = -1 then
    begin
      Result += element;
      Continue;
    end;

    Delete(arr, value, 1);
  end;

  Sort(Result, @ItemFinderMatchSort);
end;

function TRSItemFinder.FindAll(items: TRSItemArray; boxes: TBoxArray; maxToFind: Integer = 0): TRSItemFinderMatchArray;
var
  i, j: Integer;
  images: TMufasaBitmapArray;
  template: TMufasaBitmap;
  filter: TRSItemFinderCustomFilter;
  itemsToSearchFor: array of record
    Image: TMufasaBitmap;
    Name: TRSItem;
    Filter: TRSItemFinderCustomFilter;
  end;
begin
  for i := 0 to High(items) do
  begin
    filter := nil;
    for j := 0 to High(Self.ItemFilters) do
      if SameText(Self.ItemFilters[j].Name, items[i]) then
        filter := @Self.ItemFilters[j].Filter;

    images := Self.GetItemImages(items[i]);
    for j := 0 to High(images) do
      itemsToSearchFor += [images[j], items[i], @filter];
  end;

  SetLength(images, Length(boxes));
  for i := 0 to High(images) do
  begin
    images[i].Init();
    if boxes[i].Width() <> 35 then
      boxes[i].X2 := boxes[i].X1 + 35;
    images[i].FromClient(boxes[i]);
  end;

  try
    for i := 0 to High(images) do
      for j := 0 to High(itemsToSearchFor) do
      begin
        template := images[i].Copy();

        try
          // Search for item image *ON* the screen image since screen image is never larger than 36x36 item image.
          if Self.CompareItems(itemsToSearchFor[j].Image, template, @itemsToSearchFor[j].Filter) >= Self.Similarity then
          begin
            Result += [itemsToSearchFor[j].Name, boxes[i], i];
            if Length(Result) = maxToFind then
              Exit;
            Break;
          end;
        finally
          template.Free();
        end;
      end;
  finally
    for i := 0 to High(images) do
      images[i].Free();
  end;
end;

function TRSItemFinder.Find(Items: TRSItemArray; Boxes: TBoxArray; out Match: TRSItemFinderMatch): Boolean;
var
  Matches: TRSItemFinderMatchArray;
begin
  Matches := Self.FindAll(Items, Boxes, 1);

  Result := Length(Matches) = 1;
  if Result then
    Match := Matches[0];
end;

var
  ItemFinder: TRSItemFinder;

begin
  ItemFinder.Setup();

  // We can map some useful things here
  //ItemFinder.AddItemName('Arrow shaft', '300');
end;
