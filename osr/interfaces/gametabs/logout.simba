{$DEFINE SRL_LOGOUT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSLogoutButton = (
    WORLD_SWITCHER,
    CLICK_HERE
  );
  
  ERSLogoutWorldSwitcherButton = (
    CLOSE
  );

  TRSLogout = type TRSInterface;

procedure TRSLogout.Setup(); override;
begin
  inherited;
  
  Self.Name := 'Logout';
end;

procedure TRSLogout.SetupAlignment(Mode: ERSClientMode); override;
begin 
  inherited;
  
  Self.Alignment.Left := [@GameTab.X1, -3];
  Self.Alignment.Right := [@GameTab.X2, 3];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

function TRSLogout.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.LOGOUT);
end;

function TRSLogout.Open: Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.LOGOUT);
end;

function TRSLogout.GetButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[138, 30], [21, 21]]);
end;

function TRSLogout.GetButton(Button: ERSLogoutButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if Length(Buttons) = Length(ERSLogoutButton) then
    Result := Buttons[Button];
end;

function TRSLogout.GetWorldSwitcherButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[21, 21]]);
end;

function TRSLogout.GetWorldSwitcherButton(Button: ERSLogoutWorldSwitcherButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetWorldSwitcherButtons();
begin
  if Length(Buttons) = Length(ERSLogoutWorldSwitcherButton) then
    Result := Buttons[Button];
end;

function TRSLogout.IsWorldSwitcherOpen: Boolean;
begin
  Result := Self.IsOpen() and Self.GetWorldSwitcherButton(ERSLogoutWorldSwitcherButton.CLOSE).Visible();
end;

function TRSLogout.CloseWorldSwitcher: Boolean;
begin
  if Self.IsOpen() and (not Self.IsWorldSwitcherOpen()) then
    Exit(True);
  
  Result := Self.GetWorldSwitcherButton(ERSLogoutWorldSwitcherButton.CLOSE).Click() and WaitUntil(not Self.IsWorldSwitcherOpen(), 500, 5000);
end;

function TRSLogout.ClickLogout(attempts: Int32 = 5; time: Int32 = 20000): Boolean;
var
  i: Int32;
  interval: UInt64;
begin
  if (not Self.Open()) or (not Self.CloseWorldSwitcher()) then
    Exit;

  interval := time div attempts;

  for i := 1 to attempts do
    if Self.GetButton(ERSLogoutButton.CLICK_HERE).Click() and WaitUntil(not RSClient.IsLoggedIn(), 500, Interval + SRL.NormalRange(-2000, 2000)) then 
      Exit(True);
end;

var
  Logout: TRSLogout;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Logout.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Logout.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Logout.Draw(Bitmap);
end;
