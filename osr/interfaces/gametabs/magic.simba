(*
Magic
=====
Methods to interact with the magic tab.
*)

{$DEFINE SRL_MAGIC_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSSpellBook = (STANDARD, ANCIENT, LUNAR, ARCEUUS);
  TRSSpellSet = set of ERSSpell;

const
  RS_STANDARD_SPELL_FIRST = ERSSpell.LUMBRIDGE_HOME_TELEPORT;
  RS_STANDARD_SPELL_LAST  = ERSSpell.FIRE_SURGE;

  RS_ANCIENT_SPELL_FIRST  = ERSSpell.EDGEVILLE_HOME_TELEPORT;
  RS_ANCIENT_SPELL_LAST   = ERSSpell.GHORROCK_TELEPORT;

  RS_LUNAR_SPELL_FIRST    = ERSSpell.LUNAR_HOME_TELEPORT;
  RS_LUNAR_SPELL_LAST     = ERSSpell.SPELLBOOK_SWAP;

  RS_ARCEUUS_SPELL_FIRST  = ERSSpell.ARCEUUS_HOME_TELEPORT;
  RS_ARCEUUS_SPELL_LAST   = ERSSpell.SINISTER_OFFERING;

  RS_STANDARD_SPELLS = [RS_STANDARD_SPELL_FIRST..RS_STANDARD_SPELL_LAST];
  RS_ANCIENT_SPELLS  = [RS_ANCIENT_SPELL_FIRST..RS_ANCIENT_SPELL_LAST];
  RS_LUNAR_SPELLS    = [RS_LUNAR_SPELL_FIRST..RS_LUNAR_SPELL_LAST];
  RS_ARCEUUS_SPELLS  = [RS_ARCEUUS_SPELL_FIRST..RS_ARCEUUS_SPELL_LAST];

  RS_INSTANT_THROW_SPELLS = TRSSpellSet([
    ERSSpell.TELEPORT_TO_HOUSE,
    ERSSpell.TELEPORT_TO_KOUREND,
    ERSSpell.TELEPORT_TO_APE_ATOLL,
    ERSSpell.BOUNTY_TELEPORT,
    ERSSpell.LASSAR_TELEPORT,
    ERSSpell.OURANIA_TELEPORT,
    ERSSpell.RESPAWN_TELEPORT,
    ERSSpell.VARROCK_TELEPORT,
    ERSSpell.CAMELOT_TELEPORT,
    ERSSpell.KHAZARD_TELEPORT,
    ERSSpell.FALADOR_TELEPORT,
    ERSSpell.BARROWS_TELEPORT,
    ERSSpell.MOONCLAN_TELEPORT,
    ERSSpell.CEMETERY_TELEPORT,
    ERSSpell.GHORROCK_TELEPORT,
    ERSSpell.ARDOUGNE_TELEPORT,
    ERSSpell.PADDEWWA_TELEPORT,
    ERSSpell.KHARYRLL_TELEPORT,
    ERSSpell.ANNAKARL_TELEPORT,
    ERSSpell.CATHERBY_TELEPORT,
    ERSSpell.APE_ATOLL_TELEPORT,
    ERSSpell.LUMBRIDGE_TELEPORT,
    ERSSpell.BARBARIAN_TELEPORT,
    ERSSpell.TROLLHEIM_TELEPORT,
    ERSSpell.MIND_ALTAR_TELEPORT,
    ERSSpell.WATCHTOWER_TELEPORT,
    ERSSpell.ICE_PLATEU_TELEPORT,
    ERSSpell.LUNAR_HOME_TELEPORT,
    ERSSpell.FENKENSTRAINS_CASTLE_TELEPORT,
    ERSSpell.SALVE_GRAVEYARD_TELEPORT,
    ERSSpell.ARCEUUS_LIBRARY_TELEPORT,
    ERSSpell.STANDARD_TARGET_TELEPORT,
    ERSSpell.HARMONY_ISLAND_TELEPORT,
    ERSSpell.EDGEVILLE_HOME_TELEPORT,
    ERSSpell.ANCIENT_TARGET_TELEPORT,
    ERSSpell.DRAYNOR_MANOR_TELEPORT,
    ERSSpell.FISHING_GUILD_TELEPORT,
    ERSSpell.LUMBRIDGE_HOME_TELEPORT,
    ERSSpell.WEST_ARDOUGNE_TELEPORT,
    ERSSpell.CARRALLANGAR_TELEPORT,
    ERSSpell.ARCEUUS_HOME_TELEPORT,
    ERSSpell.WATERBIRTH_TELEPORT,
    ERSSpell.SENNTISTEN_TELEPORT
  ]);

type
  TRSMagic = record(TRSInterface)
    SpellCache: array [ERSSpell] of
      record
        Box: TBox;
        UpText: String;
      end;
  end;

(*
Magic.Setup
~~~~~~~~~~~
.. pascal:: procedure TRSMagic.Setup; override;

Initializes **Magic** variables.

.. note:: This is automatically called on the **Magic** variable.
*)
procedure TRSMagic.Setup(); override;
begin
  inherited;

  Self.Name := 'Magic';
end;

(*
Magic.SetupAlignment
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSMagic.SetupAlignment(Mode: ERSClientMode); override;

Setups up the interface aligment for the current client mode.

.. note:: This is automatically called on the **TRSClient.ClientModeChanged** function.
*)
procedure TRSMagic.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

(*
Magic.IsOpen
~~~~~~~~~~~~
.. pascal:: function TRSMagic.IsOpen(): Boolean;

Returns true if the Magic tab is open.

Example
-------

  WriteLn Magic.IsOpen();
*)
function TRSMagic.IsOpen(): Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.MAGIC);
end;

(*
Magic.Open
~~~~~~~~~~
.. pascal:: function TRSMagic.Open(): Boolean;

Attempts to open the magic tab.

Example
-------

  Magic.Open();
*)
function TRSMagic.Open(): Boolean;
begin
  Result := Self.IsOpen() or GameTabs.Open(ERSGameTab.MAGIC);
end;

(*
Magic.GetSpellBook
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.GetSpellBook(): ERSSpellBook;

Returns the current spell book.

Example
-------

  WriteLn Magic.GetSpellBook();
*)
function TRSMagic.GetSpellBook(): ERSSpellBook;
const
  ARCEUUS_COLOR := CTS1(9801276, 78); // Colors of the book on the gametab
  ANCIENT_COLOR := CTS1(8077142, 28);
  LUNAR_COLOR   := CTS1(12761525, 27);
var
  box: TBox;
begin
  box := Gametabs.GetTabBox(ERSGameTab.MAGIC);
  if SRL.CountColor(ARCEUUS_COLOR, box) >= 85 then Exit(ERSSpellBook.ARCEUUS);
  if SRL.CountColor(ANCIENT_COLOR, box) >= 85 then Exit(ERSSpellBook.ANCIENT);
  if SRL.CountColor(LUNAR_COLOR,   box) >= 85 then Exit(ERSSpellBook.LUNAR);
end;

(*
Magic.IsSpellBook
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.IsSpellBook(book: ERSSpellBook): Boolean;

Returns true if we are using the specified spell book.

Example
-------

  WriteLn Magic.IsSpellBook(ERSSpellBook.LUNAR);
*)
function TRSMagic.IsSpellBook(book: ERSSpellBook): Boolean;
begin
  Result := book = Self.GetSpellBook();
end;

(*
Magic.InfoIsOpen
~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.InfoIsOpen(): Boolean;

Returns true if the info black box about a spell is open.

Example
-------

  WriteLn Magic.IsSpellBook(ERSSpellBook.LUNAR);
*)
function TRSMagic.InfoIsOpen(): Boolean;
begin
  Result := SRL.CountColor(1731247, GameTab.Bounds()) > 0;
end;

(*
Magic._CloseInfoMouseCallback
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSMagic._CloseInfoMouseCallback(sender: PMouse; var x, y: Double; var done: Boolean);

Mouse movement callback to stop mouse movement when the spell info box closes.
Do not touch this if you don't understand it.
*)
procedure TRSMagic._CloseInfoMouseCallback({$H-}sender: PMouse; var x, y: Double; {$H+}var done: Boolean);
begin
  done := not Self.InfoIsOpen() and SRL.Dice(30);
end;

(*
Magic.CloseInfo
~~~~~~~~~~~~~~~
.. pascal::
  function TRSMagic.CloseInfo(): Boolean;
  function TRSMagic.CloseInfo(spell: ERSSpell): Boolean; overload;

Returns true if the info black box about a spell is open.

Example
-------

  WriteLn Magic.CloseInfo();
*)
function TRSMagic.CloseInfo(): Boolean;
var
  p, destination: TPoint;
begin
  p := Mouse.Position();
  destination := GameTab.Bounds().Expand(10).NearestEdge(p);
  Mouse.OnMovingEx := @Self._CloseInfoMouseCallback;
  Mouse.Move(destination);
  Mouse.OnMovingEx := nil;

  Result := not Self.InfoIsOpen();
end;

function TRSMagic.CloseInfo(spell: ERSSpell): Boolean; overload;
var
  p: TPoint;
begin
  p := Mouse.Position();
  Mouse.OnMovingEx := @Self._CloseInfoMouseCallback;
  Mouse.Move(Self.SpellCache[spell].Box);
  Mouse.OnMovingEx := nil;
  Result := not Self.InfoIsOpen();
end;


(*
Magic.GetSpellBoxes
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.GetSpellBoxes(out book: ERSSpellBook): TBoxArray;

Internal function to get the bounds of the spells of the current spell book.
*)
function TRSMagic.GetSpellBoxes(out book: ERSSpellBook): TBoxArray; deprecated 'Use Magic.FindSpell() instead!';
begin
  book := Self.GetSpellBook();
  case book of
    ERSSpellBook.STANDARD: Result := Grid(7, 10, 23, 23, [3, 1],   [Self.X1 + 2, Self.Y1 + 1]);
    ERSSpellBook.ARCEUUS:  Result := Grid(5, 9,  23, 23, [17, 4],  [Self.X1, Self.Y1 + 1]);
    ERSSpellBook.LUNAR:    Result := Grid(5, 9,  23, 23, [17, 4],  [Self.X1, Self.Y1 + 1]);
    ERSSpellBook.ANCIENT:  Result := Grid(4, 7,  23, 23, [25, 13], [Self.X1 + 8, Self.Y1 + 1]);
  end;
end;


(*
Magic.FindSpell
~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.FindSpell(spell: ERSSpell; out box: TBox): Boolean;

Return true or false wether we found a spell or not and return it's bounds if found.
*)
function TRSMagic.FindSpell(spell: ERSSpell; out box: TBox; attempt: Int32 = 0): Boolean;
var
  match: TRSSpellFinderMatch;
begin
  if not Self.IsOpen() then
    Exit;

  Result := SpellFinder.Find([spell], GameTab.Bounds(), match);
  if Result then
  begin
    box := match.Box.Expand(-1);
    Self.SpellCache[spell].Box := box;
    Exit;
  end;

  if Self.InfoIsOpen() then
  begin
    case attempt of
      0: if Self.CloseInfo(spell) then
          Result := Self.FindSpell(spell, box, attempt+1);

      1: if Self.CloseInfo() then
          Result := Self.FindSpell(spell, box, attempt+1);
    end;
  end;
end;

(*
Magic.GetSpellBox
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.GetSpellBox(spell: ERSSpell; out box: TBox): Boolean;

Internal function to get the specified spell bounds.
*)
function TRSMagic.GetSpellBox(spell: ERSSpell; out box: TBox): Boolean; deprecated 'Use Magic.FindSpell() instead!';
var
  book: ERSSpellBook;
  boxes: TBoxArray;
begin
  boxes := {$H-}Self.GetSpellBoxes(book);{$H+}

  case book of
    ERSSpellBook.STANDARD:
      begin
        Result := (spell in RS_STANDARD_SPELLS);
        if Result then
          box := boxes[spell - Ord(RS_STANDARD_SPELL_FIRST)];
      end;

    ERSSpellBook.ARCEUUS:
      begin
        Result := (spell in RS_ARCEUUS_SPELLS);
        if Result then
          box := boxes[spell - Ord(RS_ARCEUUS_SPELL_FIRST)];
      end;

    ERSSpellBook.LUNAR:
      begin
        Result := (spell in RS_LUNAR_SPELLS);
        if Result then
          box := boxes[spell - Ord(RS_LUNAR_SPELL_FIRST)];
      end;

    ERSSpellBook.ANCIENT:
      begin
        Result := (spell in RS_ANCIENT_SPELLS);
        if Result then
          box := boxes[spell - Ord(RS_ANCIENT_SPELL_FIRST)];
      end;
  end;
end;


(*
Magic.ContainsSpell
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.ContainsSpell(spell: ERSSpell): Boolean;

Return true or false wether we found a spell or not.
*)
function TRSMagic.ContainsSpell(spell: ERSSpell): Boolean;
var
  match: TRSSpellFinderMatch;
begin
  if not Self.IsOpen() then
    Exit;

  if Self.InfoIsOpen() and not Self.CloseInfo() then
    Exit;

  Result := SpellFinder.Find([spell], GameTab.Bounds(), match);
end;


(*
Magic.MouseSpell
~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.MouseSpell(spell: ERSSpell): Boolean;

Used to move the mouse to the specified spell.

Example
-------

  Magic.MouseSpell(ERSSpell.HIGH_LEVEL_ALCHEMY);
*)
function TRSMagic.MouseSpell(spell: ERSSpell): Boolean;
var
  box: TBox;
  upText: String;
begin
  if (Self.SpellCache[spell].UpText <> '') and
     Self.SpellCache[spell].Box.Contains(Mouse.Position()) then
  begin
    upText := MainScreen.GetUpText().After('Cast').Before('/').Strip();
    if (upText = Self.SpellCache[spell].UpText) then
      Exit(True);
  end;

  Result := Self.Open() and Self.FindSpell(spell, box);

  if Result then
  begin
    Mouse.Move(box);

    if Self.SpellCache[spell].UpText = '' then
    begin
      upText := MainScreen.GetUpText().After('Cast').Before('/').Strip();
      Self.SpellCache[spell].UpText := upText;
    end;
  end;
end;

(*
Magic.ClickSpell
~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.ClickSpell(spell: ERSSpell; option: String = ''): Boolean;

Used to interact with the specified spell.

Example
-------

  Magic.ClickSpell(ERSSpell.HIGH_LEVEL_ALCHEMY);
*)
function TRSMagic.ClickSpell(spell: ERSSpell; option: String = ''): Boolean;
begin
  if not Self.MouseSpell(spell) then
    Exit;

  if option = '' then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;

  Result := ChooseOption.Select(option);
end;

(*
Magic.MouseSpell
~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.MouseSpell(spell: ERSSpell; button: Int32 = MOUSE_MOVE): Boolean;

Used to interact with the specified spell.

Example
-------

  Magic.MouseSpell(ERSSpell.HIGH_LEVEL_ALCHEMY, MOUSE_LEFT);
*)
function TRSMagic.MouseSpell(spell: ERSSpell; button: Int32): Boolean; overload; deprecated 'Use Magic.MouseSpell() and Magic.ClickSpell() instead!';
var
  box: TBox;
begin
  Result := Self.Open() and {$H-}Self.GetSpellBox(spell, box){$H+};

  if Result then
  begin
    Mouse.Move(box);
    if (button <> MOUSE_MOVE) then
      Mouse.Click(button);
  end;
end;


(*
Magic.FindSelected
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.FindSelected(out tpa: TPointArray): Boolean;

Returns the true if we have a selected spell and returns it's tpa.

Example
-------

  if Magic.FindSelected(tpa) then
    Debug(tpa);
*)
function TRSMagic.FindSelected(out tpa: TPointArray): Boolean;
begin
  if not Self.IsOpen() then
    Exit;

  Result := SRL.FindColors(tpa, $FFFFFF, GameTab.Bounds()) > 10;
end;

(*
Magic.ContainsSelected
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.ContainsSelected(): Boolean;

Returns the true if we have a selected spell.

Example
-------

  WriteLn Magic.ContainsSelected();
*)
function TRSMagic.ContainsSelected(openTab: Boolean = False): Boolean;
begin
  if not openTab and not Self.IsOpen() then
    Exit(MainScreen.IsUpText('Cast'));

  Result := SRL.CountColor($FFFFFF, GameTab.Bounds()) > 30;
end;

(*
Magic.GetSelectedSpell
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.GetSelectedspell: ERSSpell;

Returns the currently selected spell.

Example
-------

  WriteLn Magic.GetSelectedSpell;
*)
function TRSMagic.GetSelectedSpell(): ERSSpell; deprecated 'Use Magic.FindSelected() or Magic.ContainsSelected() instead!';
var
  i: Int32;
  book: ERSSpellBook;
  boxes: TBoxArray;
begin
  if not Self.IsOpen() then
    Exit;

  boxes := {$H-}Self.GetSpellBoxes(book);{$H+}

  for I := 0 to High(boxes) do
    if SRL.CountColor($FFFFFF, boxes[i]) > 30 then
    case book of
      ERSSpellBook.STANDARD: Exit(ERSSpell(RS_STANDARD_SPELL_FIRST + i));
      ERSSpellBook.ARCEUUS:  Exit(ERSSpell(RS_ARCEUUS_SPELL_FIRST + i));
      ERSSpellBook.LUNAR:    Exit(ERSSpell(RS_LUNAR_SPELL_FIRST + i));
      ERSSpellBook.ANCIENT:  Exit(ERSSpell(RS_ANCIENT_SPELL_FIRST + i));
    end;
end;


(*
Magic.IsSelected
~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMagic.IsSelected(spell: ERSSpell): Boolean;
  function TRSMagic.IsSelected(spell: ERSSpell; selected: TPointArray): Boolean; overload;

Returns true if the specified spell is currently active (with white outline).

Example
-------

  Magic.IsSpellSelected(ERSSpell.ICE_BARRAGE);
*)
function TRSMagic.IsSelected(spell: ERSSpell): Boolean;
var
  box: TBox;
begin
  if spell in RS_INSTANT_THROW_SPELLS then
    Exit;

  Result := Self.FindSpell(spell, box) and (SRL.CountColor($FFFFFF, box.Expand(2)) > 10);
end;

function TRSMagic.IsSelected(spell: ERSSpell; selected: TPointArray): Boolean; overload;
var
  box: TBox;
begin
  if spell in RS_INSTANT_THROW_SPELLS then
    Exit;

  if not Self.FindSpell(spell, box) then
    Exit;

  Result := box.Contains(selected.Mean());
end;


(*
Magic.CanActivate
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.CanActivate(spell: ERSSpell): Boolean;

Returns true if we can activate the spell (we have runes, level and the spell unlocked).

Example
-------

  Magic.CanActivate(ERSSpell.HIGH_LEVEL_ALCHEMY);
*)
function TRSMagic.CanActivate(spell: ERSSpell): Boolean;
begin
  Result := Self.ContainsSpell(spell);
end;


(*
Magic.SpellWasCast
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.SpellWasCast(spell: ERSSpell): Boolean;

Returns true if we are in a state that casting a spell would leave you.

Example
-------

  Magic.SpellWasCast(ERSSpell.ICE_BARRAGE);
*)
function TRSMagic.SpellWasCast(spell: ERSSpell): Boolean;
begin
  if spell in RS_INSTANT_THROW_SPELLS then
    Exit(True);

  //enchant and alch spells open inventory
  Result := Self.IsSelected(spell) or Inventory.IsOpen();
end;

(*
Magic.CastSpell
~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.CastSpell(spell: ERSSpell): Boolean;

Attempts to cast the specified spell.

Example
-------

  Magic.CastSpell(ERSSpell.LOW_LEVEL_ALCHEMY);
*)
function TRSMagic.CastSpell(spell: ERSSpell; option: String = ''): Boolean;
var
  selected: TPointArray;
begin
  if not Self.Open() then
    Exit;

  if Self.FindSelected(selected) then
  begin
    if Self.IsSelected(spell, selected) then
      Exit(True);
    Mouse.Click(selected.Bounds(), MOUSE_LEFT);
    if Self.FindSelected(selected) then
    begin
      Self.DebugLn('Failed to deactivate the currently active spell.');
      Exit;
    end;
  end;

  Result := Self.ClickSpell(spell, option) and
            WaitUntil(Self.SpellWasCast(spell), 300, SRL.TruncatedGauss(1000, 2000));
end;

procedure TRSMagic.Draw(bitmap: TMufasaBitmap); override;
var
  book: ERSSpellBook;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  book := Self.GetSpellBook();
  bitmap.DrawBox(GameTab.Bounds(), $00FFFF);
  case book of
    ERSSpellBook.STANDARD: bitmap.DrawText('Standard book', GameTab.Bounds(), True, $00FFFF);
    ERSSpellBook.ANCIENT: bitmap.DrawText('Ancient book', GameTab.Bounds(), True, $00FFFF);
    ERSSpellBook.LUNAR: bitmap.DrawText('Lunar book', GameTab.Bounds(), True, $00FFFF);
    ERSSpellBook.ARCEUUS: bitmap.DrawText('Arceuus book', GameTab.Bounds(), True, $00FFFF);
  end;
end;

(*
var Magic
~~~~~~~~~
  Global Magic variable.
*)
var
  Magic: TRSMagic;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  Magic.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  Magic.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;

  Magic.Draw(bitmap);
end;
