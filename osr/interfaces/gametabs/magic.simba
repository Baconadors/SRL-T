(*
Magic
=====
Methods to interact with the magic tab.
*)

{$DEFINE SRL_MAGIC_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSSpellBook = (STANDARD, ANCIENT, LUNAR, ARCEUUS);
  TRSSpellSet = set of ERSSpell;

const
  RS_STANDARD_SPELL_FIRST = ERSSpell.LUMBRIDGE_HOME_TELEPORT;
  RS_STANDARD_SPELL_LAST  = ERSSpell.FIRE_SURGE;

  RS_ANCIENT_SPELL_FIRST  = ERSSpell.EDGEVILLE_HOME_TELEPORT;
  RS_ANCIENT_SPELL_LAST   = ERSSpell.GHORROCK_TELEPORT;
  
  RS_LUNAR_SPELL_FIRST    = ERSSpell.LUNAR_HOME_TELEPORT;
  RS_LUNAR_SPELL_LAST     = ERSSpell.SPELLBOOK_SWAP;

  RS_ARCEUUS_SPELL_FIRST  = ERSSpell.ARCEUUS_HOME_TELEPORT;
  RS_ARCEUUS_SPELL_LAST   = ERSSpell.SINISTER_OFFERING;
  
  RS_STANDARD_SPELLS = [RS_STANDARD_SPELL_FIRST..RS_STANDARD_SPELL_LAST];
  RS_ANCIENT_SPELLS  = [RS_ANCIENT_SPELL_FIRST..RS_ANCIENT_SPELL_LAST];
  RS_LUNAR_SPELLS    = [RS_LUNAR_SPELL_FIRST..RS_LUNAR_SPELL_LAST];
  RS_ARCEUUS_SPELLS  = [RS_ARCEUUS_SPELL_FIRST..RS_ARCEUUS_SPELL_LAST];

  RS_INSTANT_THROW_SPELLS = TRSSpellSet([
    ERSSpell.TELEPORT_TO_HOUSE,
    ERSSpell.TELEPORT_TO_KOUREND,
    ERSSpell.TELEPORT_TO_APE_ATOLL,
    ERSSpell.BOUNTY_TELEPORT,
    ERSSpell.LASSAR_TELEPORT,
    ERSSpell.OURANIA_TELEPORT,
    ERSSpell.RESPAWN_TELEPORT,
    ERSSpell.VARROCK_TELEPORT,
    ERSSpell.CAMELOT_TELEPORT,
    ERSSpell.KHAZARD_TELEPORT,
    ERSSpell.FALADOR_TELEPORT,
    ERSSpell.BARROWS_TELEPORT,
    ERSSpell.MOONCLAN_TELEPORT,
    ERSSpell.CEMETERY_TELEPORT,
    ERSSpell.GHORROCK_TELEPORT,
    ERSSpell.ARDOUGNE_TELEPORT,
    ERSSpell.PADDEWWA_TELEPORT,
    ERSSpell.KHARYRLL_TELEPORT,
    ERSSpell.ANNAKARL_TELEPORT,
    ERSSpell.CATHERBY_TELEPORT,
    ERSSpell.APE_ATOLL_TELEPORT,
    ERSSpell.LUMBRIDGE_TELEPORT,
    ERSSpell.BARBARIAN_TELEPORT,
    ERSSpell.TROLLHEIM_TELEPORT,
    ERSSpell.MIND_ALTAR_TELEPORT,
    ERSSpell.WATCHTOWER_TELEPORT,
    ERSSpell.ICE_PLATEU_TELEPORT,
    ERSSpell.LUNAR_HOME_TELEPORT,
    ERSSpell.FENKENSTRAINS_CASTLE_TELEPORT,
    ERSSpell.SALVE_GRAVEYARD_TELEPORT,
    ERSSpell.ARCEUUS_LIBRARY_TELEPORT,
    ERSSpell.STANDARD_TARGET_TELEPORT,
    ERSSpell.HARMONY_ISLAND_TELEPORT,
    ERSSpell.EDGEVILLE_HOME_TELEPORT,
    ERSSpell.ANCIENT_TARGET_TELEPORT,
    ERSSpell.DRAYNOR_MANOR_TELEPORT,
    ERSSpell.FISHING_GUILD_TELEPORT,
    ERSSpell.LUMBRIDGE_HOME_TELEPORT,
    ERSSpell.WEST_ARDOUGNE_TELEPORT,
    ERSSpell.CARRALLANGAR_TELEPORT,
    ERSSpell.ARCEUUS_HOME_TELEPORT,
    ERSSpell.WATERBIRTH_TELEPORT,
    ERSSpell.SENNTISTEN_TELEPORT
  ]);
  
type
  TRSMagic = type TRSInterface;

(*
Magic.Setup
~~~~~~~~~~~
.. pascal:: procedure TRSMagic.Setup; override;

Initializes **Magic** variables.

.. note:: This is automatically called on the **Magic** variable.
*)
procedure TRSMagic.Setup(); override;
begin
  inherited;
  
  Self.Name := 'Magic';
end;

(*
Magic.SetupAlignment
~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSMagic.SetupAlignment(Mode: ERSClientMode); override;

Setups up the interface aligment for the current client mode.

.. note:: This is automatically called on the **TRSClient.ClientModeChanged** function.
*)
procedure TRSMagic.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  Self.Alignment.Left := [@GameTab.X1];
  Self.Alignment.Right := [@GameTab.X2];
  Self.Alignment.Top := [@GameTab.Y1];
  Self.Alignment.Bottom := [@GameTab.Y2];
end;

(*
Magic.IsOpen
~~~~~~~~~~~~
.. pascal:: function TRSMagic.IsOpen(): Boolean;

Returns true if the Magic tab is open.

Example
-------

  WriteLn Magic.IsOpen();
*)
function TRSMagic.IsOpen(): Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.MAGIC);
end;

(*
Magic.Open
~~~~~~~~~~
.. pascal:: function TRSMagic.Open(): Boolean;

Attempts to open the magic tab.

Example
-------

  Magic.Open();
*)
function TRSMagic.Open(): Boolean;
begin
  Result := Self.IsOpen() or GameTabs.Open(ERSGameTab.MAGIC);
end;

(*
Magic.GetSpellBook
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.GetSpellBook(): ERSSpellBook;

Returns the current spell book.

Example
-------

  WriteLn Magic.GetSpellBook();
*)
function TRSMagic.GetSpellBook(): ERSSpellBook;
const
  ARCEUUS_COLOR := CTS1(9801276, 78); // Colors of the book on the gametab
  ANCIENT_COLOR := CTS1(8077142, 28);
  LUNAR_COLOR   := CTS1(12761525, 27);
var
  Box: TBox := Gametabs.GetTabBox(ERSGameTab.MAGIC); 
begin
  if SRL.CountColor(ARCEUUS_COLOR, Box) >= 85 then Exit(ERSSpellBook.ARCEUUS);
  if SRL.CountColor(ANCIENT_COLOR, Box) >= 85 then Exit(ERSSpellBook.ANCIENT);
  if SRL.CountColor(LUNAR_COLOR,   Box) >= 85 then Exit(ERSSpellBook.LUNAR);
end;

(*
Magic.IsSpellBook
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.IsSpellBook(book: ERSSpellBook): Boolean;

Returns true if we are using the specified spell book.

Example
-------

  WriteLn Magic.IsSpellBook(ERSSpellBook.LUNAR);
*)
function TRSMagic.IsSpellBook(book: ERSSpellBook): Boolean;
begin
  Result := book = Self.GetSpellBook();
end;

(*
Magic.GetSpellBoxes
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.GetSpellBoxes(out book: ERSSpellBook): TBoxArray;

Internal function to get the bounds of the spells of the current spell book.
*)
function TRSMagic.GetSpellBoxes(out book: ERSSpellBook): TBoxArray;
begin 
  book := Self.GetSpellBook();
  case book of
    ERSSpellBook.STANDARD: Result := Grid(7, 10, 23, 23, [3, 1],   [Self.X1 + 2, Self.Y1 + 1]);
    ERSSpellBook.ARCEUUS:  Result := Grid(5, 9,  23, 23, [17, 4],  [Self.X1, Self.Y1 + 1]);
    ERSSpellBook.LUNAR:    Result := Grid(5, 9,  23, 23, [17, 4],  [Self.X1, Self.Y1 + 1]);
    ERSSpellBook.ANCIENT:  Result := Grid(4, 7,  23, 23, [25, 13], [Self.X1 + 8, Self.Y1 + 1]);
  end;
end;

(*
Magic.GetSpellBox
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.GetSpellBox(spell: ERSSpell; out box: TBox): Boolean;

Internal function to get the specified spell bounds.
*)
function TRSMagic.GetSpellBox(spell: ERSSpell; out box: TBox): Boolean;
var
  book: ERSSpellBook;
  boxes: TBoxArray;
begin
  boxes := Self.GetSpellBoxes(book);
  
  case book of
    ERSSpellBook.STANDARD: 
      begin
        Result := (spell in RS_STANDARD_SPELLS);
        if Result then 
          box := boxes[spell - Ord(RS_STANDARD_SPELL_FIRST)];
      end;
    
    ERSSpellBook.ARCEUUS: 
      begin
        Result := (spell in RS_ARCEUUS_SPELLS);
        if Result then 
          box := boxes[spell - Ord(RS_ARCEUUS_SPELL_FIRST)];
      end;
      
    ERSSpellBook.LUNAR: 
      begin
        Result := (spell in RS_LUNAR_SPELLS);
        if Result then 
          box := boxes[spell - Ord(RS_LUNAR_SPELL_FIRST)];
      end;
      
    ERSSpellBook.ANCIENT: 
      begin
        Result := (spell in RS_ANCIENT_SPELLS);
        if Result then 
          box := boxes[spell - Ord(RS_ANCIENT_SPELL_FIRST)];
      end;     
  end;
end;

(*
Magic.MouseSpell
~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.MouseSpell(spell: ERSSpell; button: Int32 = MOUSE_MOVE): Boolean;

Used to interact with the specified spell.

Example
-------

  Magic.MouseSpell(ERSSpell.HIGH_LEVEL_ALCHEMY, MOUSE_LEFT);
*)
function TRSMagic.MouseSpell(spell: ERSSpell; button: Int32 = MOUSE_MOVE): Boolean;
var
  box: TBox;
begin
  Result := Self.Open() and Self.GetSpellBox(spell, box);

  if Result then
  begin
    Mouse.Move(box);
    if (button <> MOUSE_MOVE) then
      Mouse.Click(button);
  end;
end;

(*
Magic.CanActivate
~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.CanActivate(spell: ERSSpell): Boolean;

Returns true if we can activate the spell (we have runes, level and the spell unlocked).

Example
-------

  Magic.CanActivate(ERSSpell.HIGH_LEVEL_ALCHEMY);
*)
function TRSMagic.CanActivate(spell: ERSSpell): Boolean;
var
  box: TBox;
begin
  Result := Self.GetSpellBox(spell, box) and Self.Open() and (SRL.PeakBrightness(box) > 35);
end;

(*
Magic.IsSpellSelected
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.IsSpellSelected(spell: ERSSpell): Boolean;

Returns true if the specified spell is currently active (with white outline).

Example
-------

  Magic.IsSpellSelected(ERSSpell.ICE_BARRAGE);
*)
function TRSMagic.IsSpellSelected(spell: ERSSpell): Boolean;
var
  box: TBox;
begin
  if spell in RS_INSTANT_THROW_SPELLS then
    Exit;
  Result := Self.GetSpellBox(spell, box) and Self.Open() and (SRL.CountColor($FFFFFF, box) > 10);
end;

(*
Magic.GetSelectedSpell
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.GetSelectedspell: ERSSpell;

Returns the currently selected spell.

Example
-------

  WriteLn Magic.GetSelectedSpell;
*)
function TRSMagic.GetSelectedSpell(): ERSSpell;
var
  i: Int32;
  book: ERSSpellBook;
  boxes: TBoxArray;
begin
  if not Self.IsOpen() then
    Exit;
    
  boxes := Self.GetSpellBoxes(book);
 
  for I := 0 to High(boxes) do
    if SRL.CountColor($FFFFFF, boxes[i]) > 30 then
    case book of
      ERSSpellBook.STANDARD: Exit(ERSSpell(RS_STANDARD_SPELL_FIRST + i));
      ERSSpellBook.ARCEUUS:  Exit(ERSSpell(RS_ARCEUUS_SPELL_FIRST + i));
      ERSSpellBook.LUNAR:    Exit(ERSSpell(RS_LUNAR_SPELL_FIRST + i));
      ERSSpellBook.ANCIENT:  Exit(ERSSpell(RS_ANCIENT_SPELL_FIRST + i));
    end;
end;

function TRSMagic.SpellWasCast(spell: ERSSpell): Boolean;
begin
  if spell in RS_INSTANT_THROW_SPELLS then
    Exit(True);

  if Self.IsOpen() and (Self.GetSelectedSpell() = spell) then
    Exit(True);

  Result := Inventory.IsOpen();
end;

(*
Magic.CastSpell
~~~~~~~~~~~~~~~
.. pascal:: function TRSMagic.CastSpell(spell: ERSSpell): Boolean;

Attempts to cast the specified spell.

Example
-------

  Magic.CastSpell(ERSSpell.LOW_LEVEL_ALCHEMY);
*)
function TRSMagic.CastSpell(spell: ERSSpell): Boolean;
var
  selected: ERSSpell;
begin
  if not Self.Open() then
    Exit(False); 

  selected := Self.GetSelectedSpell();
  if selected = spell then
    Exit(True);
    
  // Unselect
  if (selected <> ERSSpell.UNKNOWN) then
    Self.MouseSpell(selected, MOUSE_LEFT);

  Result := Self.MouseSpell(spell, MOUSE_LEFT) and
            WaitUntil(Self.SpellWasCast(spell), 300, SRL.TruncatedGauss(1000, 2000));
end;

procedure TRSMagic.Draw(bitmap: TMufasaBitmap); override;
var
  book: ERSSpellBook;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  bitmap.DrawBoxes(Self.GetSpellBoxes(book), $00FFFF);
end;

(*
var Magic
~~~~~~~~~
  Global Magic variable.
*)
var
  Magic: TRSMagic;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  Magic.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  Magic.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;

  Magic.Draw(bitmap);
end;
