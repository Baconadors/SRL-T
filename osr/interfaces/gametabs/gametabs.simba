(*
# GameTabs
Methods to interact with the gametabs.
*)
{$DEFINE SRL_GAMETABS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  TRSGameTabs = type TRSInterface;

  ERSGameTab = (
    COMBAT,
    STATS,
    QUESTS,
    INVENTORY,
    EQUIPMENT,
    PRAYER,
    MAGIC,
    CLAN,
    FRIENDS,
    ACCOUNT,
    LOGOUT,
    OPTIONS,
    EMOTES,
    MUSIC,
    UNKNOWN
  );

// Needed because depending on the client width the tabs stack into row(s)
function TRSGameTabs.Y1(): Int32; override;
begin
  Result := inherited;

  if (Self.Mode = ERSClientMode.RESIZABLE_MODERN) and (RootInterface.Width >= 948) then
    Result += 36;
end;

// Needed because depending on the client width the tabs stack into row(s)
function TRSGameTabs.Y2(): Int32; override;
begin
  Result := inherited;

  if (Self.Mode = ERSClientMode.RESIZABLE_MODERN) and (RootInterface.Width >= 948) then
    Result += 36;
end;

function TRSGameTabs.GetTabBoxes(): TBoxArray;
var
  i: Int32;
begin
  case Self.Mode of
    ERSClientMode.FIXED, ERSClientMode.RESIZABLE_CLASSIC:
      begin
        Result := Grid(7, 2, 30, 33, [3, 265], [Self.X1() + 6, Self.Y1() + 1]);
      end;

    ERSClientMode.RESIZABLE_MODERN:
      begin
        // One row
        if (RootInterface.Width >= 948) then
        begin
          Result := Grid(14, 1, 30, 33, [3, 0], [Self.X1() - 197, Self.Y2() - 70]);
          for I := Ord(ERSGameTab.MUSIC) downto Ord(ERSGameTab.FRIENDS) - 1 do
            Result[i] := Result[i-1];
        end else
        // Two rows
          Result := Grid(7, 2, 30, 33, [3, 3], [Self.X1(), Self.Y2() - 70]);

        // Logout button is moved to top right corner
        Result[7] := Result[10];
        Result[10] := [RootInterface.X2() - 19, RootInterface.Y1() + 9, RootInterface.X2() - 10, RootInterface.Y1() + 18];
      end;
  end;
end;

function TRSGameTabs.GetTabBox(tab: ERSGameTab): TBox;
var
  tabs: TBoxArray;
begin
  tabs := Self.GetTabBoxes();
  if (tabs = []) or (tab = ERSGameTab.UNKNOWN) then Exit;
  Result := tabs[tab];
end;

function TRSGameTabs.GetCurrentTab(): ERSGametab;
var
  tabs: TBoxArray;
  i: Int32;
begin
  tabs := Self.GetTabBoxes();
  
  if (Self.Mode = ERSClientMode.RESIZABLE_MODERN) and (SRL.CountColor(8639715, tabs[ERSGameTab.LOGOUT]) > 0) then
    Exit(ERSGameTab.LOGOUT);
  
  for i := 0 to High(tabs) do
    if (SRL.CountColor(CTS1(1778534, 22), tabs[i]) > 50) then
      Exit(ERSGameTab(i));
      
  Result := ERSGameTab.UNKNOWN;
end;

(*
## GameTabs.Open()
```pascal
function TRSGameTabs.Open(tab: ERSGameTab): Boolean;
```
Opens the specified `Tab`.

Example:
```pascal
WriteLn GameTabs.Open(ERSGameTab.INVENTORY);
```
*)
function TRSGameTabs.Open(tab: ERSGameTab): Boolean;
var
  i: Int32;
begin
  if Self.GetCurrentTab() = tab then Exit(True);

  for i := 1 to 3 do
  begin
    Mouse.Click(Self.GetTabBox(tab), MOUSE_LEFT, SRL.Dice(50));

    Result := WaitUntil(Self.GetCurrentTab() = tab, SRL.TruncatedGauss(50, 2000), SRL.TruncatedGauss(2000, 3000));
    if Result then Exit;
  end;
end;

procedure TRSGameTabs.Draw(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Bitmap.DrawBoxes(GetTabBoxes(), $00FFFF);
end;

procedure TRSGameTabs.Setup(); override;
begin
  inherited;
    
  Self.Name := 'GameTabs';
end;

procedure TRSGameTabs.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@RootInterface.X2, -242];
        Self.Alignment.Right := [@RootInterface.X2, -2];
        Self.Alignment.Top := [@RootInterface.Y2, -334];
        Self.Alignment.Bottom := [@RootInterface.Y2];
      end;

    ERSClientMode.RESIZABLE_CLASSIC:
      begin
        Self.Alignment.Left := [@RootInterface.X2, -240];
        Self.Alignment.Right := [@RootInterface.X2];
        Self.Alignment.Top := [@RootInterface.Y2, -334];
        Self.Alignment.Bottom := [@RootInterface.Y2];
      end;

    ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@RootInterface.X2, -230];
        Self.Alignment.Right := [@RootInterface.X2];
        Self.Alignment.Top := [@RootInterface.Y2, -346];
        Self.Alignment.Bottom := [@RootInterface.Y2];
      end;
  end;
end;

var
  GameTabs: TRSGameTabs;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  GameTabs.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  GameTabs.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  GameTabs.Draw(Bitmap);
end;

