(*
# DepositBox
Methods to interact with the deposit box interface.
*)

{$DEFINE SRL_DEPOSITBOX_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSDepositButton = (
    QUANTITY_1,
    QUANTITY_5,
    QUANTITY_10,
    QUANTITY_CUSTOM,
    QUANTITY_ALL,
    
    DEPOSIT_INVENTORY,
    DEPOSIT_WORN,
    DEPOSIT_LOOT
  );

  TRSDepositBox = type TRSTitledInterface;


function TRSDepositBox.GetSlotBoxes(): TBoxArray;
begin
  Result := Grid(7, 4, 31, 31, [25, 17], [Self.X1 + 38, Self.Y1 + 42]);
end;

procedure TRSDepositBox.Setup(); override;
begin
  inherited;

  Self.Name := 'Deposit Screen';
  Self.ItemInterface.Name := Self.Name + '.ItemInterface';
  Self.ItemInterface.GetSearchBoxesFunction := @Self.GetSlotBoxes;
end;

procedure TRSDepositBox.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 452;
        Self.Alignment.Center.MaxHeight := 276;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 452;
        Self.Alignment.Center.MaxHeight := 276;
      end;
  end;
end;

function TRSDepositBox.GetButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[34,34]]);
end;

function TRSDepositBox.GetButton(Button: ERSDepositButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if (Length(Buttons) = Length(ERSDepositButton)) then
    Result := Buttons[Button];
end;


function TRSDepositBox.IsOpen(): Boolean; overload;
begin
  Result := Self.GetButton(ERSDepositButton.QUANTITY_1).Visible();
end;

function TRSDepositBox.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSDepositBox.Close(PressEscape: Boolean = False): Boolean; 
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

procedure TRSDepositBox.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(GetSlotBoxes(), $00FFFF);
end;


function TRSDepositBox.FindItems(items: TRSItemArray): TIntegerArray;
begin
  Result := Self.ItemInterface.IndicesOf(items);
end;

function TRSDepositBox.FindItem(item: TRSItem): Int32;
begin
  Result := Self.ItemInterface.IndexOf([item]);
end;

function TRSDepositBox.FindItem(item: TRSItem; out box: TBox): Boolean; overload;
begin
  if not Self.IsOpen() then
    Exit;

  Result := Self.ItemInterface.Find([item], box);
end;

function TRSDepositBox.ContainsItem(item: TRSItem): Boolean;
begin
  if not Self.IsOpen() then
    Exit;
  Result := Self.ItemInterface.Contains(item);
end;

function TRSDepositBox.ContainsAny(items: TRSItemArray): Boolean;
begin
  if not Self.IsOpen() then
    Exit;
  Result := Self.ItemInterface.ContainsAny(items);
end;

function TRSDepositBox.ContainsAll(items: TRSItemArray): Boolean;
begin
  if not Self.IsOpen() then
    Exit;
  Result := Self.ItemInterface.ContainsAll(items);
end;

function TRSDepositBox.CountItem(item: TRSItem): Int32;
begin
  if not Self.IsOpen() then
    Exit;

  Result := Self.ItemInterface.Count(item);
end;

function TRSDepositBox.CountItemStack(item: TRSItem): Int32;
begin
  Result := Self.ItemInterface.CountStack(item);
end;

function TRSDepositBox.ClickItem(item: TRSItem; option: String = ''): Boolean;
begin
  Result := Self.ItemInterface.InteractItem(item, option);
end;



function TRSDepositBox.DepositHelper(b: TBox; amount: Int32; useQuantityButtons: Boolean): Boolean;
var
  Button: TRSButton;
begin
  if UseQuantityButtons then
  begin
    if Bank.IsCustomQuantity(Amount) then
    begin
      Button := Self.GetButton(ERSDepositButton.QUANTITY_CUSTOM);

      if Button.Enable then
      begin
        Mouse.Move(B);

        if MainScreen.IsUpText('Deposit-' + ToString(Amount)) then
        begin
          Mouse.Click(MOUSE_LEFT);

          Result := True;
        end else
          Result := ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
      end;
    end else
    begin
      case Amount of
        1:  Button := Self.GetButton(ERSDepositButton.QUANTITY_1);
        5:  Button := Self.GetButton(ERSDepositButton.QUANTITY_5);
        10: Button := Self.GetButton(ERSDepositButton.QUANTITY_10);
        else
            Button := Self.GetButton(ERSDepositButton.QUANTITY_ALL)
      end;

      if Button.Enable then
      begin
        Result := True;

        Mouse.Click(B, MOUSE_LEFT);
      end;
    end;
  end else
  begin
    Mouse.Move(B);

    case Amount of
      BANK_DEPOSIT_ALL:
        Result := ChooseOption.Select('Deposit-All');
      else
        Result := ChooseOption.Select('Deposit-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) or
                  ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
    end;
  end;
end;

function TRSDepositBox.DepositItem(item: TRSBankItem; useQuantityButtons: Boolean): Boolean;
var
  b: TBox;
begin
  if Self.ItemInterface.FindAny([item.Item], b) then
    Result := Self.DepositHelper(b, item.Quantity, useQuantityButtons);
end;

function TRSDepositBox.DepositItem(Item: TRSBankDepositItem; UseQuantityButtons: Boolean): Boolean; overload; deprecated 'Use the TRSBankItem version instead.';
var
  b: TBox;
begin
  if Self.ItemInterface.FindAny([item.Item], b) then
    Result := Self.DepositHelper(b, Item.Quantity, UseQuantityButtons);
end;

function TRSDepositBox.DepositItem(Item: TRSItem; useQuantityButtons: Boolean): Boolean; overload;
var
  tmp: TRSBankItem;
begin
  tmp.Setup(item);
  Result := Self.DepositItem(tmp, useQuantityButtons);
end;


function TRSDepositBox.DepositItemArray(items: array of TRSBankItem; useQuantityButtons: Boolean): Boolean;
var
  item: TRSBankItem;
begin
  Result := True;
  for item in items do
    if not Self.DepositItem(item, useQuantityButtons) then
      Result := False;
end;

function TRSDepositBox.DepositItemArray(items: TRSItemArray; useQuantityButtons: Boolean): Boolean; overload;
var
  item: TRSItem;
begin
  Result := True;
  for item in items do
    if not Self.DepositItem(item, useQuantityButtons) then
      Result := False;
end;

(*
## DepositBox.DepositAll
```pascal
function TRSDepositBox.DepositAll(): Boolean;
```

Depositis your inventory by clicking the deposit inventory button
*)
function TRSDepositBox.DepositAll(): Boolean;
begin
  Result := (Self.ItemInterface.Count() = 0) or Self.GetButton(ERSDepositButton.DEPOSIT_INVENTORY).Click();
end;



var
  DepositBox: TRSDepositBox;

(*
## GameTabs.GetCurrentTab
```pascal
function TRSGameTabs.GetCurrentTab(): ERSGametab; override;
```

Overrides **GameTabs.GetCurrentTab** to return the inventory tab if bank or depositbox is open.
*)
function TRSGameTabs.GetCurrentTab(): ERSGametab; override;
begin
  Result := inherited;

  if (Result = ERSGameTab.UNKNOWN) and (Bank.IsOpen() or DepositBox.IsOpen()) then
    Result := ERSGameTab.INVENTORY;
end;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  DepositBox.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  DepositBox.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  DepositBox.Draw(Bitmap);
end;
