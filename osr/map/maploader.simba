(*
# MapLoader
This file is responsible for loading maps for TRSMap.
It was made from scratch by Torwent but heavily inspired in the original
TRSWalker by Slacky and it's future iterations made by Olly.
*)

{$DEFINE SRL_MAPLOADER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

{$I files/maps/map.graph}

const
  RSMAP_PATH: String = {$MACRO CURRENT_DIRECTORY};
  TILE_SIZE:  UInt32 = 4;
  CHUNK_SIZE: UInt32 = 64;

type
  ERSMapType = (NORMAL, HEIGHT, COLLISION);
  ERSMapJSON = (OBJECTS, NPCS);

  TRSChunkLoader = record(TSRLBaseRecord)
    Cache: String;
  end;

procedure TRSChunkLoader.Setup(name, cache: String);
begin
  Self.Name := name;
  Self.Cache := cache;
end;

function TRSChunkLoader.GetChunk(p: TPoint): TPoint; static;
const
  PIXELS: UInt32 = TILE_SIZE * CHUNK_SIZE;
begin
  Result.X :=  16 + Floor(p.X / PIXELS); //X starts at 16
  Result.Y := 196 - Floor(p.Y / PIXELS); //Y starts at 196
end;

function TRSChunkLoader.GetGlobal(p: TPoint): TPoint; static;
const
  PIXELS: UInt32 = TILE_SIZE * CHUNK_SIZE;
begin
  Result := [(p.X-16) * PIXELS, (196-p.Y) * PIXELS];
end;

function TRSChunkLoader.ConvertString(str: String): TPoint;
begin
  Result := [StrToInt(str.Before('-')), StrToInt(str.After('-'))];
end;


function TRSChunkLoader.GetBitmap(chunk: String; level: UInt32; map: ERSMapType): TMufasaBitmap;
var
  cacheroot, cachename, zipFile, zipPath: String;
begin
  Result.Init();

  case map of
    ERSMapType.NORMAL:
    begin
      cacheroot := Self.Cache + 'map' + DirectorySeparator;
      cachename := cacheroot + ToStr(level) + DirectorySeparator + chunk;
      zipPath := RSMAP_PATH + 'files' + DirectorySeparator + 'map.zip';
      zipFile := ToStr(level) + '/' + chunk + '.png';
    end;

    ERSMapType.HEIGHT:
    begin
      cacheroot := Self.Cache + 'heightmap' + DirectorySeparator;
      cachename := cacheroot + chunk;
      zipPath := RSMAP_PATH + 'files' + DirectorySeparator + 'heightmap.zip';
      zipFile := chunk + '.png';
    end;

    ERSMapType.COLLISION:
    begin
      cacheroot := Self.Cache + 'collision' + DirectorySeparator;
      cachename := cacheroot + ToStr(level) + DirectorySeparator + chunk;
      zipPath := RSMAP_PATH + 'files' + DirectorySeparator + 'collision.zip';
      zipFile := ToStr(level) + '/' + chunk + '.png';
    end;
  end;

  if not FileExists(cachename + '.bmp') then
  begin
    Self.DebugLn('Caching ' + chunk + ' this can take ~10 seconds.');

    if not FileExists(cachename + '.png') then
    begin
      if not ForceDirectories(ExtractFilePath(cachename + '.png')) then
      begin
        Result.Free();
        Self.Fatal('Failed to create TRSMapLoader cache directories.');
      end;

      if not UnZipOneFile(zipPath, zipFile, cacheroot) then
      begin
        Result.Free();
        Self.Fatal('Failed to unzip ' + ToStr(map) + ': ' + zipFile);
      end;
    end;

    Result.LoadFromFile(cachename + '.png');
    Result.SaveToFile(cachename + '.bmp');
    DeleteFile(cachename + '.png');
    Exit;
  end;

  Result.LoadFromFile(cachename + '.bmp');
end;

function TRSChunkLoader.GetBitmap(chunk: TPoint; level: UInt32; map: ERSMapType): TMufasaBitmap; overload;
begin
  Result := Self.GetBitmap(ToStr(chunk.X) + '-' + ToStr(chunk.Y), level, map);
end;


function TRSChunkLoader.GetJSONFile(chunk: String; level: UInt32; jsonType: ERSMapJSON): TJSONArray;
var
  name, cacheroot, cachename, zipFile, zipPath: String;
begin
  case jsonType of
    ERSMapJSON.OBJECTS: name := 'objects';
    ERSMapJSON.NPCS: name := 'npcs';
  end;

  cacheroot := Self.Cache + name + DirectorySeparator;
  cachename := cacheroot + ToStr(level) + DirectorySeparator + chunk;
  zipPath := RSMAP_PATH + 'files' + DirectorySeparator + name + '.zip';
  zipFile := ToStr(level) + '/' + chunk + '.json';

  if not FileExists(cachename + '.json') then
  begin
    Self.DebugLn('Caching ' + chunk + ' this can take ~10 seconds.');

    if not ForceDirectories(ExtractFilePath(cachename + '.json')) then
      Self.Fatal('Failed to create TRSMapLoader objects cache directories.');

    if not UnZipOneFile(zipPath, zipFile, cacheroot) then
      Self.Fatal('Failed to unzip OBJECTS: ' + zipFile);
  end;

  Result.Init(ReadFileContents(cachename + '.json'));
end;

function TRSChunkLoader.GetJSONFile(chunk: TPoint; level: UInt32; jsonType: ERSMapJSON): TJSONArray; overload;
begin
  Result := Self.GetJSONFile(ToStr(chunk.X) + '-' + ToStr(chunk.Y), level, jsonType);
end;


function TRSChunkLoader.GetMap(chunks: TPointArray; level: UInt32; map: ERSMapType): TMufasaBitmap;
var
  i, x, y, n: Int32;
  lo, hi: TPoint;
  chunkMaps: array of record
    Point: TPoint;
    Image: TMufasaBitmap;
  end;
begin
  SetLength(chunkMaps, Length(chunks));

  lo := [$FFFFFF, $FFFFFF];

  for i := 0 to High(chunks) do
  begin
    chunkMaps[i].Image := Self.GetBitmap(chunks[i], level, map);

    x := chunks[i].X;
    y := 199 - chunks[i].Y;

    chunkMaps[i].Point := [x,y];
    lo := [Min(x, lo.X), Min(y, lo.Y)];
    hi := [Max(x, hi.X), Max(y, hi.Y)];
  end;

  Result.Init();
  n := CHUNK_SIZE;
  if map <> ERSMapType.HEIGHT then
    n := n * TILE_SIZE;

  Result.SetSize((hi.X-lo.X) * n + 1 + n, (hi.Y-lo.Y) * n + 1 + n);

  for i := 0 to High(chunkMaps) do
  begin
    x := (chunkMaps[i].Point.X - lo.X) * n;
    y := (chunkMaps[i].Point.Y - lo.Y) * n;

    Result.DrawBitmap(chunkMaps[i].Image, Point(x, y));
    chunkMaps[i].Image.Free();
  end;
end;

function TRSChunkLoader.GetMap(start, finish: TPoint; level: UInt32; map: ERSMapType): TMufasaBitmap; overload;
var
  x, y: Int32;
  chunks: TPointArray;
begin
  for x := Min(start.X, finish.X) to Max(start.X, finish.X) do
    for y := Min(start.Y, finish.Y) to Max(start.Y, finish.Y) do
      chunks += [x,y];

  Result := Self.GetMap(chunks, level, map);
end;


function TRSChunkLoader.BuildGraph(name: String; map: TMufasaBitmap): TWebGraph;
var
  i, j, n, len, connection: Int32;
  atpa: T2DPointArray;
  white, black, red, skeleton: TPointArray;
  p: TPoint;
  circle: TCircle;
  matrix: array of TBoolArray;
  crossings: array [0..12] of TBoolArray;
  skip: TIntegerArray;
  sorted: array of record
    Points: TPointArray;
    Setup: Boolean;
  end;
begin
  map.FindColors(white, $FFFFFF);
  map.FindColors(black, $0);
  map.FindColors(red, $FF);
  black += red;

  SetLength(matrix, map.GetHeight(), map.GetWidth());

  for p in black do matrix[p.Y, p.X] := True;

  Self.DebugLn('Generating webgraph for region: ' + name);

  atpa := white.ClusterEx(1);
  for i := High(atpa) downto 0 do
  begin
    if Length(atpa[i]) < 17 then
    begin
      for p in atpa[i] do matrix[p.Y, p.X] := True;
      Continue;
    end;

    if (red <> []) and (atpa[i].PointsInRangeOf(red,0,1) = []) then
    begin
      for p in atpa[i] do matrix[p.Y, p.X] := True;
      Continue;
    end;

    len := Length(Result.Nodes);

    circle := atpa[i].MinAreaCircle();
    if circle.Radius < 70 then
    begin
      SetLength(Result.Nodes, len+1);
      SetLength(Result.Paths, len+1);

      Result.Nodes[len] := atpa[i].Sorted(atpa[i].Mean())[0];

      for p in atpa[i] do matrix[p.Y, p.X] := True;
      Continue;
    end;

    skeleton := atpa[i].Erode(1).Skeleton(2, 7);

    RAaSTPA(skeleton, 6);

    for p in skeleton do
      if not matrix[p.Y, p.X] then
        Result.Nodes += p;

    SetLength(Result.Paths, Length(Result.Nodes));

    sorted := [];
    SetLength(sorted, Length(Result.Nodes));

    for connection := 0 to 10 do
    begin
      if connection mod 3 = 0 then
        Self.DebugLn('Creating webgraph connections ' + ToStr(connection) + '/12');

      crossings[connection] := [];
      SetLength(crossings[connection], Length(Result.Nodes));

      for j := len to High(Result.Nodes) do
      begin
        if InIntArray(skip, j) then Continue;

        if not sorted[j].Setup then
        begin
          sorted[j].Points := Result.Nodes.FilterDist(0, 80, Result.Nodes[j].X, Result.Nodes[j].Y);
          sorted[j].Points.Sort(Result.Nodes[j]);
          Delete(sorted[j].Points, 0, 1);
          sorted[j].Setup := True;
        end;

        if High(sorted[j].Points) < connection then
        begin
          skip += j;
          Continue;
        end;

        if crossings[connection, j] then Continue;

        for p in TPAFromLine(Result.Nodes[j], sorted[j].Points[connection]) do
          if matrix[p.Y,p.X] then
          begin

            if Length(sorted[j].Points) = 1 then
              skip += j
            else
            begin
              Delete(sorted[j].Points, connection, 1);
              j -= 1;
            end;

            Continue(2);
          end;

        crossings[connection, j] := True;
        n := Result.Nodes.Find(sorted[j].Points[connection]);
        if InIntArray(Result.Paths[j], n) or Result.ConnectNodes(j, n) then
          Continue;

        if Length(sorted[j].Points) = 1 then
          skip += j
        else
        begin
          Delete(sorted[j].Points, connection, 1);
          j -= 1;
        end;
      end;
    end;

    for j := High(Result.Paths) downto len do
      if Length(Result.Paths[j]) = 0 then
        Result.DeleteNode(j);
  end;

  SetLength(Result.Names, Length(Result.Nodes));
end;

function TRSChunkLoader.GetGraph(start, finish: TPoint; level: UInt32; map: TMufasaBitmap): TWebGraph; overload;
var
  cacheroot, cachename, name: String;
  json: TJSONObject;
begin
  name := ToStr(start.X) + '-' + ToStr(start.Y) + '_' +
          ToStr(finish.X) + '-' + ToStr(finish.Y);

  cacheroot := Self.Cache + 'graphs' + DirectorySeparator;
  cachename := cacheroot + ToStr(level) + DirectorySeparator + name;

  if not FileExists(cachename + '.json') then
  begin
    Self.DebugLn('Caching ' + name + ' webgraph, this will take a minute.');

    if not ForceDirectories(cacheroot + ToStr(level) + DirectorySeparator) then
      Self.Fatal('Failed to create path: ' + cacheroot + ToStr(level) + DirectorySeparator);

    Result := Self.BuildGraph(name, map);
    try
      json.Init();

      json.Put('nodes', Result.NodesToString());
      json.Put('paths', Result.PathsToString());
      json.Put('names', Result.NamesToString());

      if not WriteFileContents(cachename + '.json', json.ToString(2), False) then
        Self.Fatal('Failed to save ' + name + ' webgraph.');
    except
      Self.Fatal('Something went wrong saving ' + name + ' webraph: ' + GetExceptionMessage());
    finally
      json.Free();
    end;

    Exit;
  end;

  try
    json.Init(ReadFileContents(cachename + '.json'));

    Result.LoadNodesFromString(json.getString('nodes'));
    Result.LoadPathsFromString(json.getString('paths'));
    Result.LoadNamesFromString(json.getString('names'));
  except
    TerminateScript('Something went wrong loading the webraph: ' + GetExceptionMessage());
  finally
    json.Free();
  end;
end;


function TRSChunkLoader.GetJSON(chunks: TPointArray; level: UInt32; jsonType: ERSMapJSON): TJSONArray;
var
  i, j, n, l, x, y, id: Int32;
  lo, hi: TPoint;
  chunkJSONs: array of record
    Point: TPoint;
    JSON: TJSONArray;
  end;
  json, rJSON: TJSONObject;
  coords, rotations: TJSONArray;
begin
  SetLength(chunkJSONs, Length(chunks));

  lo := [$FFFFFF, $FFFFFF];

  for i := 0 to High(chunks) do
  begin
    chunkJSONs[i].JSON := Self.GetJSONFile(chunks[i], level, jsonType);

    x := chunks[i].X;
    y := 199 - chunks[i].Y;

    chunkJSONs[i].Point := [x,y];
    lo := [Min(x, lo.X), Min(y, lo.Y)];
    hi := [Max(x, hi.X), Max(y, hi.Y)];
  end;

  Result.Init();
  for i := 0 to High(chunkJSONs) do
    for j := 0 to chunkJSONs[i].JSON.High() do
    begin
      json := chunkJSONs[i].JSON.getJSONObject(j);
      id := json.GetInt('id');

      for n := 0 to Result.High() do
      begin
        rJSON := Result.getJSONObject(n);
        if id = rJSON.getInt('id') then
        begin
          coords    := json.getJSONArray('coordinates');
          rotations := json.getJSONArray('rotations');
          if coords.length() <> rotations.length() then
            Self.Fatal('Coordinates and rotations for object id: ' + ToStr(id) + ' are not the same length.');

          for l := 0 to coords.High() do
          begin
            rJSON.getJSONArray('coordinates').Put(coords.Get(l));
            rJSON.getJSONArray('rotations').Put(rotations.Get(l));
          end;

          Continue(2);
        end;
      end;

      Result.Put(json);
    end;
end;

function TRSChunkLoader.GetJSON(start, finish: TPoint; level: UInt32; json: ERSMapJSON): TMufasaBitmap; overload;
var
  x, y: Int32;
  chunks: TPointArray;
begin
  for x := Min(start.X, finish.X) to Max(start.X, finish.X) do
    for y := Min(start.Y, finish.Y) to Max(start.Y, finish.Y) do
      chunks += [x,y];

  Result := Self.GetJSON(chunks, level, json);
end;


type
  TRSLegacyMapLoader = record(TSRLBaseRecord)
    Cache: String;
  end;

procedure TRSLegacyMapLoader.Setup(name, cache: String);
begin
  Self.Name := name;
  Self.Cache := cache;
end;

function TRSLegacyMapLoader.FindFiles(filename: String): TStringArray;
var
  mask: String = '.png;.bmp;';
begin
  if FileExists(filename) then
    Exit([ExpandfileName(filename)]);
  mask := StringReplace(mask, '.', filename + '.', [rfReplaceAll]);
  Result := System.FindFile(RSMAP_PATH + 'files' + DirectorySeparator + 'maps' + DirectorySeparator, mask, True, False);
end;

function TRSLegacyMapLoader.GetMap(filename: String; crop: TBox = []): TMufasaBitmap;
var
  fileStr, cachename: String;
  files: TStringArray;
begin
  Result.Init();

  if ExtractFileExt(filename) <> '.bmp' then
  begin
    fileStr := ExtractFileName(filename);
    cachename := Self.Cache + fileStr.FileName() + '.bmp';

    if not FileExists(cachename) then
    begin
      Self.DebugLn('Caching ' + fileStr + ' this can take ~10 seconds.');

      files := Self.FindFiles(filename);

      case Length(files) of
        0:
        begin
          Result.Free();
          Self.Fatal('Couldn''f find map file: ' + filename);
        end;

        1: fileStr := files[0];

        else
        begin
          Result.Free();
          Self.Fatal('Multiple maps matching: ' + filename + ' were found.');
        end;
      end;

      Result.LoadFromFile(fileStr);
      Result.SaveToFile(cachename);
      if crop.area() > 1 then
        Result.Crop(crop);
    end;

    fileName := cachename;
  end;

  Result.LoadFromFile(filename);
  if crop.area() > 1 then
    Result.Crop(crop);
end;

type
  TRSMapRegion = record
    Name: String;
    Original: TBox;
    Region: TBox;
    Level: UInt32;
    Offset: TPoint;
  end;

  TRSMapLoader = record(TSRLBaseRecord)
    Cache: String;

    Map: TMufasaBitmap;
    Heightmap: TMufasaBitmap;
    Collision: TMufasaBitmap;

    DownscaledMap: TMufasaBitmap;
    MapBox: TBox;

    Graph: TWebGraph;

    Regions: array of TRSMapRegion;

    Padding: UInt32;
    Downscale: UInt32;

    Loader: TRSChunkLoader;
    LegacyLoader: TRSLegacyMapLoader;

    UsingChunks: Boolean;

    ObjectData: TJSONArray;
    NPCData: TJSONArray;
  end;

procedure TRSMapLoader.Free();
begin
  if Assigned(Self.Map) then
  begin
    Self.Map.Free();
    Self.Map := nil;
  end;

  if Assigned(Self.Heightmap) then
  begin
    Self.Heightmap.Free();
    Self.Heightmap := nil;
  end;

  if Assigned(Self.DownscaledMap) then
  begin
    Self.DownscaledMap.Free();
    Self.DownscaledMap := nil;
  end;

  if Assigned(Self.Collision) then
  begin
    Self.Collision.Free();
    Self.Collision := nil;
  end;

  if Assigned(Self.ObjectData) then
  begin
    Self.ObjectData.Free();
    Self.ObjectData := nil;
  end;

  if Assigned(Self.NPCData) then
  begin
    Self.NPCData.Free();
    Self.NPCData := nil;
  end;
end;

procedure TRSMapLoader.Init(downscale: UInt32);
var
  version: String;
begin
  Self.Name := 'RSMap';
  version := SHA1File(RSMAP_PATH + 'files' + DirectorySeparator + 'map.zip');
  version := version.SubString(6);
  Self.Cache := CACHE_DIR + 'map' + DirectorySeparator +
                version + DirectorySeparator;

  if not ForceDirectories(Self.Cache) then
    Self.Fatal('Failed to create TRSMapLoader cache directory for: ' + version);

  Self.Downscale := downscale;
  Self.Loader.Setup('RSMap.Loader', cache);
  Self.LegacyLoader.Setup('RSMap.LegacyLoader', cache);
end;

procedure TRSMapLoader.Pack();
type
  TBlock = record X,Y,W,H: Integer; Index: Integer; end;
  TBlockArray = array of TBlock;

  function Block(X,Y,W,H: Integer; Index: Integer = -1): TBlock;
  begin
    Result.X := X;
    Result.Y := Y;
    Result.W := W;
    Result.H := H;
    Result.Index := Index;
  end;
var
  weights: TIntegerArray;
  I, J: Integer;
  startWidth, area, maxWidth: Integer;
  width, height: Integer;
  blocks, spaces: TBlockArray;
  len: Integer;
begin
  Self.MapBox := [];

  len := length(Self.Regions);
  if len = 0 then
    Exit;

  for i := 0 to len - 1 do
  begin
    blocks += Block(0, 0, Self.Regions[i].Region.Width() - 1, Self.Regions[i].Region.Height() - 1, i);
    weights += blocks[i].H;

    area += blocks[i].W * blocks[i].H;
    maxWidth := Max(maxWidth, blocks[i].W);
  end;

  blocks := Sorted(blocks, weights, False);

  startWidth := Max(Ceil(Sqrt(area / 0.95)), maxWidth);
  spaces := [Block(0, 0, startWidth, $FFFFFF)];

  for i := 0 to len - 1 do
    for j := High(spaces) downto 0 do
    begin
      if (blocks[i].W > spaces[j].W) or (blocks[i].H > spaces[j].H) then
        Continue;

      blocks[i].X := spaces[j].X;
      blocks[i].Y := spaces[j].Y;

      width  := Max(width, blocks[i].X + blocks[i].W);
      height := Max(height, blocks[i].Y + blocks[i].H);

      if (blocks[i].W = spaces[j].W) and (blocks[i].H = spaces[j].H) then
        Delete(spaces, j, 1)
      else
      if (blocks[i].H = spaces[j].H) then
      begin
        spaces[j].X += blocks[i].W;
        spaces[j].W -= blocks[i].W;
      end else
      if (blocks[i].W = spaces[j].W) then
      begin
        spaces[j].Y += blocks[i].H;
        spaces[j].H -= blocks[i].H;
      end else
      begin
        spaces += [Block(
          spaces[j].X + blocks[i].W,
          spaces[j].Y,
          spaces[j].W - blocks[i].W,
          blocks[i].H
        )];
        spaces[j].Y += blocks[i].H;
        spaces[j].H -= blocks[i].H;
      end;

      Break;
    end;

  for i := 0 to len - 1 do
  begin
    Self.Regions[blocks[i].Index].Region := Box(blocks[i].X, blocks[i].Y, blocks[i].X + blocks[i].W, blocks[i].Y + blocks[i].H);
    Self.MapBox := Self.MapBox + Self.Regions[blocks[i].Index].Region;
  end;
end;


function TRSMapLoader.InternalLoad(bitmaps: TMufasaBitmapArray): TMufasaBitmap;
var
  i: Int32;
begin
  Result.Init();
  Result.SetSize(Self.MapBox.Width(), Self.MapBox.Height());

  for i := 0 to High(bitmaps) do
  begin
    Result.DrawBitmap(bitmaps[i], [Self.Regions[i].Region.X1, Self.Regions[i].Region.Y1]);
    bitmaps[i].Free();
  end;

  Self.DownscaledMap.Init();
  AddOnTerminate(@Self.Free);
  Result.Downsample(Self.Downscale, Self.DownscaledMap);
end;

function TRSMapLoader.InternalHeightLoad(bitmaps: TMufasaBitmapArray): TMufasaBitmap;
var
  i: Int32;
begin
  Result.Init();
  Result.SetSize(Self.MapBox.Width() div TILE_SIZE, Self.MapBox.Height() div TILE_SIZE);

  for i := 0 to High(bitmaps) do
  begin
    Result.DrawBitmap(bitmaps[i], Point(Self.Regions[i].Region.X1 div TILE_SIZE, Self.Regions[i].Region.Y1 div TILE_SIZE));
    bitmaps[i].Free();
  end;
end;

function TRSMapLoader.InternalCollisionLoad(bitmaps: TMufasaBitmapArray): TMufasaBitmap;
var
  i: Int32;
begin
  Result.Init();
  Result.SetSize(Self.MapBox.Width(), Self.MapBox.Height());

  for i := 0 to High(bitmaps) do
  begin
    Result.DrawBitmap(bitmaps[i], [Self.Regions[i].Region.X1, Self.Regions[i].Region.Y1]);
    bitmaps[i].Free();
  end;
end;

function TRSMapLoader.InternalGraphLoad(graphs: array of TWebGraph; padding: UInt32): TWebGraph;
var
  i: Int32;
begin
  for i := 0 to High(graphs) do
  begin
    graphs[i].Nodes:= graphs[i].Nodes.Offset([Self.Regions[i].Region.X1 + 40, Self.Regions[i].Region.Y1 + padding]);
    Result.Merge(graphs[i]);
  end;
end;

function TRSMapLoader.InternalObjectsLoad(objects: array of TJSONArray): TJSONArray;
var
  i, j, n, l, id: Int32;
  json, rJSON: TJSONObject;
  coords, rotations: TJSONArray;
begin
  Result.Init();
  for i := 0 to High(objects) do
    for j := 0 to objects[i].High() do
    begin
      json := objects[i].getJSONObject(j);
      id := json.GetInt('id');

      for n := 0 to Result.High() do
      begin
        rJSON := Result.getJSONObject(n);
        if id = rJSON.getInt('id') then
        begin
          coords    := json.getJSONArray('coordinates');
          rotations := json.getJSONArray('rotations');
          if coords.length() <> rotations.length() then
            Self.Fatal('Coordinates and rotations for object id: ' + ToStr(id) + ' are not the same length.');

          for l := 0 to coords.High() do
          begin
            rJSON.getJSONArray('coordinates').Put(coords.Get(l));
            rJSON.getJSONArray('rotations').Put(rotations.Get(l));
          end;

          Continue(2);
        end;
      end;

      Result.Put(json);
    end;
end;


procedure TRSMapLoader.Load(chunks: TBoxArray; levels: TIntegerArray = [0]; downscale: UInt32 = 8; padding: UInt32 = 40); overload;
var
  i, j, idx: Int32;
  bitmaps, hbitmaps, cbitmaps: TMufasaBitmapArray;
  s, f, tmp: TPoint;
  graphs: array of TWebGraph;
  json: TJSONArray;
  objects: array of TJSONArray;
begin
  Self.Init(downscale);
  SetLength(Self.Regions, Length(chunks) * Length(levels));
  Self.Padding := padding;

  for i := 0 to High(levels) do
    for j := 0 to High(chunks) do
    begin
      s := [chunks[j].X1, chunks[j].Y1];
      f := [chunks[j].X2, chunks[j].Y2];

      idx := i * (High(chunks) + 1) + j;

      Self.Regions[idx].Name :=  ToStr(levels[i]) + '_' + ToStr(s.X) + '-' + ToStr(s.Y) + '_' + ToStr(f.X) + '-' + ToStr(f.Y);
      Self.Regions[idx].Original := chunks[j];
      Self.Regions[idx].Level := levels[i];

      tmp := TRSChunkLoader.GetGlobal(s);
      Self.Regions[idx].Offset := [tmp.X-padding, tmp.Y - padding];

      bitmaps += Self.Loader.GetMap(s, f, levels[i], ERSMapType.NORMAL);
      bitmaps[idx].Pad(padding);

      if levels[i] = 0 then
      begin
        hbitmaps += Self.Loader.GetMap(s, f, 0, ERSMapType.HEIGHT);
        hbitmaps[High(hbitmaps)].Pad(padding div TILE_SIZE);
      end;

      cbitmaps += Self.Loader.GetMap(s, f, levels[i], ERSMapType.COLLISION);
      graphs += Self.Loader.GetGraph(s, f, levels[i], cbitmaps[idx]);
      cbitmaps[idx].Pad(padding);

      json := Self.Loader.GetJSON(s, f, levels[i], ERSMapJSON.OBJECTS);
      objects += json;

      Self.Regions[idx].Region := Box(0, 0, bitmaps[idx].GetWidth(), bitmaps[idx].GetHeight());
    end;

  Self.Pack();

  Self.Map := Self.InternalLoad(bitmaps);
  Self.Heightmap := Self.InternalHeightLoad(hbitmaps);
  Self.Collision := Self.InternalCollisionLoad(cbitmaps);
  Self.Graph := Self.InternalGraphLoad(graphs, padding);
  Self.ObjectData := Self.InternalObjectsLoad(objects);

  Self.Map.Downsample(downscale, Self.DownscaledMap);

  Self.UsingChunks := True;
end;

procedure TRSMapLoader.Add(chunks: TBoxArray; levels: TIntegerArray = [0]; downscale: UInt32 = 8; padding: UInt32 = 40); overload;
var
  i: Int32;
begin
  for i := 0 to High(Self.Regions) do
  begin
    if levels.Find(Self.Regions[i].Level) = -1 then
      levels += Self.Regions[i].Level;
    if chunks.Find(Self.Regions[i].Original) = -1 then
      chunks += Self.Regions[i].Original;
  end;

  Self.Free();
  Self.Regions := [];

  Self.Load(chunks, levels, downscale, padding);
end;


function TRSMapLoader.InternalLoadEx(bitmaps: TMufasaBitmapArray): TMufasaBitmap;
var
  i: Int32;
begin
  Result.Init();
  Result.SetSize(Self.MapBox.Width(), Self.MapBox.Height());

  for i := 0 to High(bitmaps) do
  begin
    Result.DrawBitmap(bitmaps[i], [Self.Regions[i].Region.X1, Self.Regions[i].Region.Y1]);
    bitmaps[i].Free();
  end;

  Self.DownscaledMap.Init();
  Result.Downsample(Self.Downscale, Self.DownscaledMap);
end;


procedure TRSMapLoader.LoadEx(filename: String; downscale: UInt32 = 8);
begin
  Self.Init(downscale);
  Self.DownscaledMap.Init();

  Self.Map := Self.LegacyLoader.GetMap(filename);
  Self.Heightmap := Self.LegacyLoader.GetMap('h' + filename);
  Self.Graph := WaspWeb;
  Self.Map.Downsample(downscale, Self.DownscaledMap);
  AddOnTerminate(@Self.Free);

  Self.Regions := [[filename, Self.Map.Bounds(), Self.Map.Bounds(), 0, Point(0,0)]];
end;

procedure TRSMapLoader.LoadEx(filename: String; boxes: TBoxArray; downscale: UInt32 = 8; padding: UInt32 = 40); overload;
var
  i: Int32;
  bitmaps, hbitmaps: TMufasaBitmapArray;
begin
  Self.Init(downscale);
  SetLength(Self.Regions, Length(boxes));
  Self.Padding := padding;

  for i := 0 to High(boxes) do
  begin
    Self.Regions[i].Name := filename;
    Self.Regions[i].Original := boxes[i];
    Self.Regions[i].Offset := [boxes[i].X1-padding, boxes[i].Y1-padding];

    bitmaps  += Self.LegacyLoader.GetMap(filename, boxes[i]);
    bitmaps[i].Pad(padding);
    hbitmaps += Self.LegacyLoader.GetMap('h' + filename, boxes[i]);
    hbitmaps[i].Pad(padding);

    Self.Regions[i].Region := Box(0, 0, bitmaps[i].GetWidth(), bitmaps[i].GetHeight());
  end;

  Self.Pack();

  Self.Map := Self.InternalLoadEx(bitmaps);
  Self.Heightmap := Self.InternalLoadEx(hbitmaps);

  Self.Map.Downsample(downscale, Self.DownscaledMap);
  AddOnTerminate(@Self.Free);
end;


procedure TRSMapLoader.AddEx(filename: String; downscale: UInt32 = 8);
var
  i: Int32;
  bmp, hbmp: TMufasaBitmap;
  bitmaps, hbitmaps: TMufasaBitmapArray;
begin
  for i := 0 to High(Self.Regions) do
  begin
    Self.Regions[i].Offset := [Self.Regions[i].Original.X1 - Self.Padding, Self.Regions[i].Original.Y1 - Self.Padding];

    bitmaps += Self.LegacyLoader.GetMap(filename, Self.Regions[i].Original);
    bitmaps[i].Pad(Self.Padding);
    hbitmaps += Self.LegacyLoader.GetMap('h' + filename, Self.Regions[i].Original);
    hbitmaps[i].Pad(Self.Padding);

    Self.Regions[i].Region := [0, 0, bitmaps[i].GetWidth(), bitmaps[i].GetHeight()];
  end;

  bmp := Self.LegacyLoader.GetMap(filename);
  Self.Regions += [filename, bmp.Bounds(), bmp.Bounds(), 0, [0,0]];
  bitmaps += bmp;

  hbmp := Self.LegacyLoader.GetMap('h' + filename);
  hbitmaps += hbmp;

  Self.Free();
  Self.Pack();

  Self.Map := Self.InternalLoadEx(bitmaps);
  Self.Heightmap := Self.InternalLoadEx(hbitmaps);
  Self.Map.Downsample(downscale, Self.DownscaledMap);
end;

procedure TRSMapLoader.AddEx(filename: String; boxes: TBoxArray; downscale: UInt32 = 8; padding: UInt32 = 40); overload;
var
  len, i: Int32;
  bitmaps, hbitmaps: TMufasaBitmapArray;
begin
  len := Length(Self.Regions);
  SetLength(Self.Regions, len + Length(boxes));
  Self.Padding := Max(Self.Padding, padding);

  for i := 0 to len-1 do
  begin
    if i >= len then
    begin
      Self.Regions[i].Name := filename;
      Self.Regions[i].Original := boxes[i-len];
    end;

    Self.Regions[i].Offset := Point(Self.Regions[i].Original.X1 - Self.Padding, Self.Regions[i].Original.Y1 - Self.Padding);

    bitmaps += Self.LegacyLoader.GetMap(filename, Self.Regions[i].Original);
    bitmaps[i].Pad(Self.Padding);
    hbitmaps += Self.LegacyLoader.GetMap('h' + filename, Self.Regions[i].Original);
    hbitmaps[i].Pad(Self.Padding);

    Self.Regions[i].Region := [0, 0, bitmaps[i].GetWidth(), bitmaps[i].GetHeight()];
  end;

  Self.Free();
  Self.Pack();

  Self.Map := Self.InternalLoadEx(bitmaps);
  Self.Heightmap := Self.InternalLoadEx(hbitmaps);
  Self.Map.Downsample(downscale, Self.DownscaledMap);
end;


function TRSMapLoader.GetRegion(p: TPoint): Int32;
begin
  for Result := 0 to High(Self.Regions) do
    if p.InBox(Self.Regions[Result].Region) then
      Exit;
  Result := -1;
end;

function TRSMapLoader.GetGlobal(p: TPoint): TPoint;
var
  i: Int32;
begin
  for i := 0 to High(Self.Regions) do
    with Self.Regions[i] do
      if p.InBox(Region) then
        Exit(p + Offset - [Region.X1, Region.Y1]);
  Result := p;
end;

function TRSMapLoader.GetGlobal(regionIndex: Int32; p: TPoint): TPoint; overload;
begin
  if regionIndex = -1 then
    Exit(p);

  with Self.Regions[regionIndex] do
    Result := p + Offset - [Region.X1, Region.Y1];
end;

function TRSMapLoader.GetLocal(regionIndex: Int32; p: TPoint): TPoint;
begin
  if regionIndex = -1 then
    Exit(p);

  with Self.Regions[regionIndex] do
    Result := p - Offset + Point(Region.X1, Region.Y1);
end;
