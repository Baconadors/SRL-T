(*
# Map
This file is responsible for the TRSMapLoader positioning system.
It was made from scratch by Torwent but heavily inspired in the original
TRSWalker by Slacky and it's future iterations made by Olly.
*)

{$DEFINE SRL_MAPLOADER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

{$I files/maps/map.graph}

const
  RSMAP_PATH: String = {$MACRO CURRENT_DIRECTORY};
  TILE_SIZE:  UInt32 = 4;
  CHUNK_SIZE: UInt32 = 64;

type
  ERSMapType = (NORMAL, HEIGHT, COLLISION);

  TRSChunkLoader = record(TSRLBaseRecord)
    Cache: String;
  end;

procedure TRSChunkLoader.Setup(name, cache: String);
begin
  Self.Name := name;
  Self.Cache := cache;
end;

function TRSChunkLoader.ConvertPoint(p: TPoint): TPoint;
const
  PIXELS: UInt32 = TILE_SIZE * CHUNK_SIZE;
begin
  Result.X :=  16 + Floor(p.X / PIXELS); //X starts at 16
  Result.Y := 196 - Floor(p.Y / PIXELS); //Y starts at 196
end;

function TRSChunkLoader.ConvertString(str: String): TPoint;
begin
  Result := [StrToInt(str.Before('-')), StrToInt(str.After('-'))];
end;


function TRSChunkLoader.GetBitmap(chunk: String; level: UInt32; map: ERSMapType): TMufasaBitmap;
var
  cacheroot, cachename, zipFile, zipPath: String;
begin
  Result.Init();

  case map of
    ERSMapType.NORMAL:
    begin
      cacheroot := Self.Cache + 'map' + DirectorySeparator;
      cachename := cacheroot + ToStr(level) + DirectorySeparator + chunk;
      zipPath := RSMAP_PATH + 'files' + DirectorySeparator + 'map.zip';
      zipFile := ToStr(level) + '/' + chunk + '.png';
    end;

    ERSMapType.HEIGHT:
    begin
      cacheroot := Self.Cache + 'heightmap' + DirectorySeparator;
      cachename := cacheroot + chunk;
      zipPath := RSMAP_PATH + 'files' + DirectorySeparator + 'heightmap.zip';
      zipFile := chunk + '.png';
    end;

    ERSMapType.COLLISION:
    begin
      cacheroot := Self.Cache + 'collision' + DirectorySeparator;
      cachename := cacheroot + ToStr(level) + DirectorySeparator + chunk;
      zipPath := RSMAP_PATH + 'files' + DirectorySeparator + 'collision.zip';
      zipFile := ToStr(level) + '/' + chunk + '.png';
    end;
  end;

  if not FileExists(cachename + '.bmp') then
  begin
    Self.DebugLn('Caching ' + chunk + ' this can take ~10 seconds.');

    if not FileExists(cachename + '.png') then
    begin
      if not ForceDirectories(ExtractFilePath(cachename + '.png')) then
      begin
        Result.Free();
        Self.Fatal('Failed to create TRSMapLoader cache directories.');
      end;

      if not UnZipOneFile(zipPath, zipFile, cacheroot) then
      begin
        Result.Free();
        Self.Fatal('Failed to unzip ' + ToStr(map) + ': ' + zipFile);
      end;
    end;

    Result.LoadFromFile(cachename + '.png');
    Result.SaveToFile(cachename + '.bmp');
    DeleteFile(cachename + '.png');
    Exit;
  end;

  Result.LoadFromFile(cachename + '.bmp');
end;

function TRSChunkLoader.GetBitmap(chunk: TPoint; level: UInt32; map: ERSMapType): TMufasaBitmap; overload;
begin
  Result := Self.GetBitmap(ToStr(chunk.X) + '-' + ToStr(chunk.Y), level, map);
end;

function TRSChunkLoader.GetObjects(chunk: String; level: UInt32): TJSONArray;
var
  cacheroot, cachename, zipFile, zipPath: String;
begin
  cacheroot := Self.Cache + 'objects' + DirectorySeparator;
  cachename := cacheroot + ToStr(level) + DirectorySeparator + chunk;
  zipPath := RSMAP_PATH + 'files' + DirectorySeparator + 'objects.zip';
  zipFile := ToStr(level) + '/' + chunk + '.json';

  if not FileExists(cachename + '.json') then
  begin
    Self.DebugLn('Caching ' + chunk + ' this can take ~10 seconds.');

    if not ForceDirectories(ExtractFilePath(cachename + '.json')) then
      Self.Fatal('Failed to create TRSMapLoader objects cache directories.');

    if not UnZipOneFile(zipPath, zipFile, cacheroot) then
      Self.Fatal('Failed to unzip OBJECTS: ' + zipFile);
  end;

  Result.Init(cachename + '.json');
end;


function TRSChunkLoader.GetMap(chunks: TPointArray; level: UInt32; map: ERSMapType): TMufasaBitmap;
var
  i, x, y, n: Int32;
  lo, hi: TPoint;
  chunkMaps: array of record
    Point: TPoint;
    Image: TMufasaBitmap;
  end;
begin
  SetLength(chunkMaps, Length(chunks));

  lo := [$FFFFFF, $FFFFFF];

  for i := 0 to High(chunks) do
  begin
    chunkMaps[i].Image := Self.GetBitmap(chunks[i], level, map);

    x := chunks[i].X;
    y := 199 - chunks[i].Y;

    chunkMaps[i].Point := [x,y];
    lo := [Min(x, lo.X), Min(y, lo.Y)];
    hi := [Max(x, hi.X), Max(y, hi.Y)];
  end;

  Result.Init();
  n := CHUNK_SIZE;
  if map <> ERSMapType.HEIGHT then
    n := n * TILE_SIZE;

  Result.SetSize((hi.X-lo.X) * n + 1 + n, (hi.Y-lo.Y) * n + 1 + n);

  for i := 0 to High(chunkMaps) do
  begin
    x := (chunkMaps[i].Point.X - lo.X) * n;
    y := (chunkMaps[i].Point.Y - lo.Y) * n;

    Result.DrawBitmap(chunkMaps[i].Image, Point(x, y));
    chunkMaps[i].Image.Free();
  end;
end;

function TRSChunkLoader.GetMap(start, finish: TPoint; level: UInt32; map: ERSMapType): TMufasaBitmap; overload;
var
  x, y: Int32;
  chunks: TPointArray;
begin
  for x := Min(start.X, finish.X) to Max(start.X, finish.X) do
    for y := Min(start.Y, finish.Y) to Max(start.Y, finish.Y) do
      chunks += [x,y];

  Result := Self.GetMap(chunks, level, map);
end;

function TRSChunkLoader.GetMap(start, finish: String; level: UInt32; map: ERSMapType): TMufasaBitmap; overload;
begin
  Result := Self.GetMap(Self.ConvertString(start), Self.ConvertString(finish), level, map);
end;

type
  TRSLegacyMapLoader = record(TSRLBaseRecord)
    Cache: String;
  end;

procedure TRSLegacyMapLoader.Setup(name, cache: String);
begin
  Self.Name := name;
  Self.Cache := cache;
end;

function TRSLegacyMapLoader.FindFiles(filename: String): TStringArray;
var
  mask: String = '.png;.bmp;';
begin
  if FileExists(filename) then
    Exit([ExpandfileName(filename)]);
  mask := StringReplace(mask, '.', filename + '.', [rfReplaceAll]);
  Result := System.FindFile(RSMAP_PATH + 'files' + DirectorySeparator + 'maps' + DirectorySeparator, mask, True, False);
end;

function TRSLegacyMapLoader.GetMap(filename: String; crop: TBox = []): TMufasaBitmap;
var
  fileStr, cachename: String;
  files: TStringArray;
begin
  Result.Init();

  if ExtractFileExt(filename) <> '.bmp' then
  begin
    fileStr := ExtractFileName(filename);
    cachename := Self.Cache + fileStr.FileName() + '.bmp';

    if not FileExists(cachename) then
    begin
      Self.DebugLn('Caching ' + fileStr + ' this can take ~10 seconds.');

      files := Self.FindFiles(filename);

      case Length(files) of
        0:
        begin
          Result.Free();
          Self.Fatal('Couldn''f find map file: ' + filename);
        end;

        1: fileStr := files[0];

        else
        begin
          Result.Free();
          Self.Fatal('Multiple maps matching: ' + filename + ' were found.');
        end;
      end;

      Result.LoadFromFile(fileStr);
      Result.SaveToFile(cachename);
      if crop.area() > 1 then
        Result.Crop(crop);
    end;

    fileName := cachename;
  end;

  Result.LoadFromFile(filename);
  if crop.area() > 1 then
    Result.Crop(crop);
end;

type
  TRSMapRegion = record
      Name: String;
      Original: TBox;
      Region: TBox;
      Level: UInt32;
      Offset: TPoint;
    end;

  TRSMapLoader = record(TSRLBaseRecord)
    Cache: String;

    Map: TMufasaBitmap;
    Heightmap: TMufasaBitmap;
    DownscaledMap: TMufasaBitmap;
    MapBox: TBox;

    Graph: TWebGraph;

    Regions: array of TRSMapRegion;

    Padding: UInt32;
    Downscale: UInt32;

    Loader: TRSChunkLoader;
    LegacyLoader: TRSLegacyMapLoader;

    CompactHeightmap: Boolean;
  end;

procedure TRSMapLoader.Free();
begin
  if Assigned(Self.Map) then
  begin
    Self.Map.Free();
    Self.Map := nil;
  end;

  if Assigned(Self.Heightmap) then
  begin
    Self.Heightmap.Free();
    Self.Heightmap := nil;
  end;

  if Assigned(Self.DownscaledMap) then
  begin
    Self.DownscaledMap.Free();
    Self.DownscaledMap := nil;
  end;
end;

procedure TRSMapLoader.Init(downscale: UInt32);
var
  version: String;
begin
  Self.Name := 'RSMap';
  version := SHA1File(RSMAP_PATH + 'files' + DirectorySeparator + 'map.zip');
  version := version.SubString(6);
  Self.Cache := CACHE_DIR + 'map' + DirectorySeparator +
                version + DirectorySeparator;

  if not ForceDirectories(Self.Cache) then
    Self.Fatal('Failed to create TRSMapLoader cache directory for: ' + version);

  Self.Downscale := downscale;
  Self.Loader.Setup('RSMap.Loader', cache);
  Self.LegacyLoader.Setup('RSMap.LegacyLoader', cache);
end;

procedure TRSMapLoader.Pack();
type
  TBlock = record X,Y,W,H: Integer; Index: Integer; end;
  TBlockArray = array of TBlock;

  function Block(X,Y,W,H: Integer; Index: Integer = -1): TBlock;
  begin
    Result.X := X;
    Result.Y := Y;
    Result.W := W;
    Result.H := H;
    Result.Index := Index;
  end;
var
  weights: TIntegerArray;
  I, J: Integer;
  startWidth, area, maxWidth: Integer;
  width, height: Integer;
  blocks, spaces: TBlockArray;
  len: Integer;
begin
  Self.MapBox := [];

  len := length(Self.Regions);
  if len = 0 then
    Exit;

  for i := 0 to len - 1 do
  begin
    blocks += Block(0, 0, Self.Regions[i].Region.Width() - 1, Self.Regions[i].Region.Height() - 1, i);
    weights += blocks[i].H;

    area += blocks[i].W * blocks[i].H;
    maxWidth := Max(maxWidth, blocks[i].W);
  end;

  blocks := Sorted(blocks, weights, False);

  startWidth := Max(Ceil(Sqrt(area / 0.95)), maxWidth);
  spaces := [Block(0, 0, startWidth, $FFFFFF)];

  for i := 0 to len - 1 do
    for j := High(spaces) downto 0 do
    begin
      if (blocks[i].W > spaces[j].W) or (blocks[i].H > spaces[j].H) then
        Continue;

      blocks[i].X := spaces[j].X;
      blocks[i].Y := spaces[j].Y;

      width  := Max(width, blocks[i].X + blocks[i].W);
      height := Max(height, blocks[i].Y + blocks[i].H);

      if (blocks[i].W = spaces[j].W) and (blocks[i].H = spaces[j].H) then
        Delete(spaces, j, 1)
      else
      if (blocks[i].H = spaces[j].H) then
      begin
        spaces[j].X += blocks[i].W;
        spaces[j].W -= blocks[i].W;
      end else
      if (blocks[i].W = spaces[j].W) then
      begin
        spaces[j].Y += blocks[i].H;
        spaces[j].H -= blocks[i].H;
      end else
      begin
        spaces += [Block(
          spaces[j].X + blocks[i].W,
          spaces[j].Y,
          spaces[j].W - blocks[i].W,
          blocks[i].H
        )];
        spaces[j].Y += blocks[i].H;
        spaces[j].H -= blocks[i].H;
      end;

      Break;
    end;

  for i := 0 to len - 1 do
  begin
    Self.Regions[blocks[i].Index].Region := Box(blocks[i].X, blocks[i].Y, blocks[i].X + blocks[i].W, blocks[i].Y + blocks[i].H);
    Self.MapBox := Self.MapBox + Self.Regions[blocks[i].Index].Region;
  end;
end;


function TRSMapLoader.InternalLoad(bitmaps: TMufasaBitmapArray): TMufasaBitmap;
var
  i: Int32;
begin
  Result.Init();
  Result.SetSize(Self.MapBox.Width(), Self.MapBox.Height());

  for i := 0 to High(bitmaps) do
  begin
    Result.DrawBitmap(bitmaps[i], Point(Self.Regions[i].Region.X1, Self.Regions[i].Region.Y1));
    bitmaps[i].Free();
  end;

  Self.DownscaledMap.Init();
  AddOnTerminate(@Self.Free);
  Result.Downsample(Self.Downscale, Self.DownscaledMap);
end;

function TRSMapLoader.InternalHeightLoad(bitmaps: TMufasaBitmapArray): TMufasaBitmap;
var
  i: Int32;
begin
  Result.Init();
  Result.SetSize(Self.MapBox.Width() div TILE_SIZE, Self.MapBox.Height() div TILE_SIZE);

  for i := 0 to High(bitmaps) do
  begin
    Result.DrawBitmap(bitmaps[i], Point(Self.Regions[i].Region.X1 div TILE_SIZE, Self.Regions[i].Region.Y1 div TILE_SIZE));
    bitmaps[i].Free();
  end;
end;


procedure TRSMapLoader.Load(chunks: TBoxArray; levels: TIntegerArray = [0]; downscale: UInt32 = 8; padding: UInt32 = 40); overload;
var
  i, j, idx: Int32;
  bitmaps, hbitmaps: TMufasaBitmapArray;
  s, f: TPoint;
begin
  Self.Init(downscale);
  SetLength(Self.Regions, Length(chunks) * Length(levels));
  Self.Padding := padding;

  for i := 0 to High(levels) do
    for j := 0 to High(chunks) do
    begin
      s := [chunks[j].X1, chunks[j].Y1];
      f := [chunks[j].X2, chunks[j].Y2];

      idx := i * (High(chunks) + 1) + j;

      Self.Regions[idx].Name :=  ToStr(levels[i]) + '_' + ToStr(s.X) + '-' + ToStr(s.Y) + '_' + ToStr(f.X) + '-' + ToStr(f.Y);
      Self.Regions[idx].Original := chunks[j];
      Self.Regions[idx].Level := levels[i];
      Self.Regions[idx].Offset := [s.X - padding, s.Y - padding];

      bitmaps += Self.Loader.GetMap(s, f, levels[i], ERSMapType.NORMAL);
      bitmaps[idx].Pad(padding);

      if levels[i] = 0 then
      begin
        hbitmaps += Self.Loader.GetMap(s, f, 0, ERSMapType.HEIGHT);
        hbitmaps[High(hbitmaps)].Pad(padding div TILE_SIZE);
      end;

      Self.Regions[idx].Region := Box(0, 0, bitmaps[idx].GetWidth(), bitmaps[idx].GetHeight());
    end;

  Self.Pack();

  Self.Map := Self.InternalLoad(bitmaps);
  Self.Heightmap := Self.InternalHeightLoad(hbitmaps);

  Self.Map.Downsample(downscale, Self.DownscaledMap);

  CompactHeightmap := True;
end;

procedure TRSMapLoader.Add(chunks: TBoxArray; levels: TIntegerArray = [0]; downscale: UInt32 = 8; padding: UInt32 = 40); overload;
var
  i: Int32;
begin
  for i := 0 to High(Self.Regions) do
  begin
    if levels.Find(Self.Regions[i].Level) = -1 then
      levels += Self.Regions[i].Level;
    if chunks.Find(Self.Regions[i].Original) = -1 then
      chunks += Self.Regions[i].Original;
  end;

  Self.Free();
  Self.Regions := [];

  Self.Load(chunks, levels, downscale, padding);
end;


function TRSMapLoader.InternalLoadEx(bitmaps: TMufasaBitmapArray; padding: UInt32): TMufasaBitmap;
var
  i: Int32;
begin
  for i := 0 to High(Self.Regions) do
  begin
    bitmaps += Self.LegacyLoader.GetMap(Self.Regions[i].Name, Self.Regions[i].Original);
    bitmaps[i].Pad(padding);
  end;

  Self.Pack();

  Result.Init();
  Result.SetSize(Self.MapBox.Width(), Self.MapBox.Height());

  for i := 0 to High(Self.Regions) do
  begin
    Result.DrawBitmap(bitmaps[i], Point(Self.Regions[i].Region.X1, Self.Regions[i].Region.Y1));
    bitmaps[i].Free();
  end;

  Self.DownscaledMap.Init();
  Result.Downsample(Self.Downscale, Self.DownscaledMap);
end;


procedure TRSMapLoader.LoadEx(filename: String; downscale: UInt32 = 8);
begin
  Self.Init(downscale);
  Self.DownscaledMap.Init();

  Self.Map := Self.LegacyLoader.GetMap(filename);
  Self.Heightmap := Self.LegacyLoader.GetMap('h' + filename);
  Self.Graph := WaspWeb;
  Self.Map.Downsample(downscale, Self.DownscaledMap);
  AddOnTerminate(@Self.Free);

  Self.Regions := [[filename, Self.Map.Bounds(), Self.Map.Bounds(), 0, Point(0,0)]];
end;

procedure TRSMapLoader.LoadEx(filename: String; boxes: TBoxArray; downscale: UInt32 = 8; padding: UInt32 = 40); overload;
var
  i: Int32;
  bitmaps, hbitmaps: TMufasaBitmapArray;
begin
  Self.Init(downscale);
  SetLength(Self.Regions, Length(boxes));
  Self.Padding := padding;

  for i := 0 to High(boxes) do
  begin
    Self.Regions[i].Name := filename;
    Self.Regions[i].Original := boxes[i];
    Self.Regions[i].Offset := Point(boxes[i].X1-padding, boxes[i].Y1-padding);

    bitmaps  += Self.LegacyLoader.GetMap(filename, boxes[i]);
    bitmaps[i].Pad(padding);

    hbitmaps += Self.LegacyLoader.GetMap('h' + filename, boxes[i]);
    hbitmaps[i].Pad(padding);

    Self.Regions[i].Region := Box(0, 0, bitmaps[i].GetWidth(), bitmaps[i].GetHeight());
  end;

  Self.Map := Self.InternalLoadEx(bitmaps, padding);
  Self.Heightmap := Self.InternalLoadEx(hbitmaps, padding);

  Self.Map.Downsample(downscale, Self.DownscaledMap);
  AddOnTerminate(@Self.Free);
end;


procedure TRSMapLoader.AddEx(filename: String; downscale: UInt32 = 8);
var
  bitmap, hbitmap: TMufasaBitmap;
begin
  bitmap  := Self.LegacyLoader.GetMap(filename);
  hbitmap := Self.LegacyLoader.GetMap('h' + filename);

  Self.Regions += [filename, bitmap.Bounds(), bitmap.Bounds(), 0, [0,0]];
  Self.Free();

  Self.Map := Self.InternalLoadEx([bitmap], Self.Padding);
  Self.Heightmap := Self.InternalLoadEx([hbitmap], Self.Padding);
  Self.Map.Downsample(downscale, Self.DownscaledMap);
end;

procedure TRSMapLoader.AddEx(filename: String; boxes: TBoxArray; downscale: UInt32 = 8; padding: UInt32 = 40); overload;
var
  len, i: Int32;
  bitmaps, hbitmaps: TMufasaBitmapArray;
begin
  len := Length(Self.Regions);
  SetLength(Self.Regions, len + Length(boxes));
  Self.Padding := Max(Self.Padding, padding);

  for i := len to High(Self.Regions) do
  begin
    Self.Regions[i].Name := filename;
    Self.Regions[i].Original := boxes[i-len];
    Self.Regions[i].Offset := Point(boxes[i-len].X1 - Self.Padding, boxes[i-len].Y1 - Self.Padding);

    bitmaps  += Self.LegacyLoader.GetMap(filename, boxes[i-len]);
    bitmaps[i-len].Pad(Self.Padding);
    hbitmaps += Self.LegacyLoader.GetMap('h' + filename, boxes[i-len]);
    hbitmaps[i-len].Pad(Self.Padding);

    Self.Regions[i].Region := Box(0, 0, bitmaps[i-len].GetWidth(), bitmaps[i-len].GetHeight());
  end;

  Self.Free();
  Self.Map := Self.InternalLoadEx(bitmaps, Self.Padding);
  Self.Heightmap := Self.InternalLoadEx(hbitmaps, Self.Padding);
  Self.Map.Downsample(downscale, Self.DownscaledMap);
end;


function TRSMapLoader.Point2Region(p: TPoint): Int32;
var
  i: Int32;
begin
  Result := -1;
  for i := 0 to High(Self.Regions) do
    if p.InBox(Self.Regions[i].Region) then
      Exit(i);
end;

function TRSMapLoader.Region2Global(p: TPoint): TPoint;
var
  i: Int32;
begin
  Result := p;
  for i := 0 to High(Self.Regions) do
    if p.InBox(Self.Regions[i].Region) then
    begin
      Result += Self.Regions[i].Offset - [Self.Regions[i].Region.X1, Self.Regions[i].Region.Y1];
      Exit(Result);
    end;
end;

function TRSMapLoader.Global2Region(regionIndex: Int32; p: TPoint): TPoint;
begin
  Result := p;
  if (regionIndex > -1) then
    Result := Result - Self.Regions[regionIndex].Offset +
              [Self.Regions[regionIndex].Region.X1, Self.Regions[regionIndex].Region.Y1];
end;

