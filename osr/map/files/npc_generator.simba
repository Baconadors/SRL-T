{$I SRL-T/osr.simba}

const
  PATH         = {$macro CURRENT_DIRECTORY};
  JSONS_PATH   = PATH + 'npcs' + DirectorySeparator;
  DATA_URL     = 'https://raw.githubusercontent.com/mejrs/data_osrs/master/NPCList_OSRS.json';
  HELPER_CACHE = PATH + 'cache' + DirectorySeparator;

function LoadHelper(id: Int32): TJSONObject;
var
  jsonFile, str: String;
begin
  jsonFile := ToStr(id) + '.json'
  if not FileExists(HELPER_CACHE + jsonFile) then
    Exit;

  str := ReadFileContents(HELPER_CACHE + jsonFile);
  if str <> '' then
    Result.Init(str);
end;

var
  current, npc, final, helper: TJSONObject;
  data, coordinates, coords, chunkArr: TJSONArray;
  i, j, hi, id: Int32;
  chunk: TPoint;
  chunkStr, plane, name: String;

begin
  ClearDebug();
  DeleteDirectory(JSONS_PATH, False);
  DeleteDirectory(HELPER_CACHE, False);

  for i := 0 to RSTranslator.Planes do
    ForceDirectories(JSONS_PATH + ToStr(i));

  ForceDirectories(HELPER_CACHE);


  data.Init(GetPage(DATA_URL));
  AddOnTerminate(@data.Free);
  final.Init();

  WriteLn('Finished setting up. Unzipping files now.');
  UnZipFile(PATH + 'npcs_helper.zip', HELPER_CACHE);
  WriteLn('Finished unzipping files. Parsing data now.');

  for i := 0 to hi := data.High() do
  begin
    if (i mod 1000 = 0) then
      WriteLn(i, '/', hi);

    current := data.GetJSONObject(i);
    id := current.getInt('id');

    helper := LoadHelper(id);
    if helper = nil then
      Continue;

    name := helper.GetString('name');
    if name = '' then
      Continue;

    coords := nil;
    coords.Init();

    coords.Put(current.GetInt('x'));
    coords.Put(current.GetInt('y'));

    chunk := [current.GetInt('x'), current.GetInt('y')];
    chunk := RSTranslator.RSCoordinate2Chunk(chunk);

    chunkStr := ToStr(current.GetInt('p')) + '-' +
                ToStr(chunk.X) + '-' + ToStr(chunk.Y);

    if not final.Has(chunkStr) then
    begin
      chunkArr.Init();
      final.Put(chunkStr, chunkArr);
    end
    else
      chunkArr := final.getJSONArray(chunkStr);

    npc := nil;
    for j := 0 to chunkArr.High() do
    begin
      if chunkArr.getJSONObject(j).getInt('id') = id then
      begin
        npc := chunkArr.getJSONObject(j);
        Break;
      end;
    end;

    if npc <> nil then
    begin
      npc.getJSONArray('coordinates').Put(coords);
      Continue;
    end;

    npc.Init();
    npc.Put('id', id);
    npc.Put('name', name);
    npc.Put('level', helper.getString('level'));
    npc.Put('category', helper.GetInt('category'));
    npc.Put('minimapdot', helper.getBoolean('minimapdot'));
    npc.Put('actions', helper.getJSONArray('actions'));
    npc.Put('size', helper.getJSONArray('size'));

    coordinates := nil;
    coordinates.Init();
    coordinates.Put(coords);
    npc.Put('coordinates', coordinates);
    npc.Put('colors', helper.getJSONArray('colors'));
    chunkArr.Put(npc);
  end;

  DeleteDirectory(HELPER_CACHE, False);

  WriteLn('Finished parsing data. Saving it to files now.');

  hi := final.Keys().getCount() - 1;

  for i := 0 to hi do
  begin
    if (i mod 200 = 0) then
      WriteLn(i, '/', hi);
    chunkStr := final.Keys().GetStrings(i);

    chunkArr := final.getJSONArray(chunkStr);

    plane := chunkStr.Before('-');
    chunkStr := JSONS_PATH + plane + DirectorySeparator + chunkStr.After('-') + '.json';

    WriteFileContents(
      chunkStr,
      chunkArr.ToString()
        .Replace('\u0020', ' ')
        .Replace('},{', '},' + LineEnding + '  {')
        .Replace('[{', '[' + LineEnding + '  {')
        .Replace('}]', '}' + LineEnding + ']'),
      False
    );
  end;

  WriteLn('Finished saving files.');
end.
