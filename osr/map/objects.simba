(*
# Map Objects
This file is responsible for interacting with map objects.
*)

{$DEFINE SRL_MAPOBJECTS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  TRSMapObject = record
    ID: Int32;
    Name: String;
    ObjType:  Int32;
    Category: Int32;
    Actions: TStringArray;
    Coordinates: TPointArray;
    Size: Vector3;
    Rotations: TSingleArray;
    Finder: TRSObjectFinder;
    Offset: TPoint;

    Walker: PRSWalkerV2;
    Index: Int32;

    Filter: record
      Walker:  Boolean;
      Minimap: Boolean;
      Finder:  Boolean;
      UpText:  Boolean;
    end;

  class var
    CurrentUpText: TStringArray;
    CurrentActionUpText: TStringArray;
    RedClicked: Boolean;
    TrackTarget: Boolean;
  end;

function TRSMapObject.Merge(json: TJSONObject): TRSMapObject;
var
  i, c, t: Int32;
  h, s: Extended;
  colors: TIntegerArray;
begin
  Result := Self;

  if Result.Size.X <> Result.Size.Y then
  begin
    for i := 0 to json.getJSONArray('coordinates').High() do
    begin
      with json.getJSONArray('coordinates').getJSONArray(i) do
        Result.Coordinates += [getInt(0), getInt(1)];
      Result.Rotations += (90*json.getJSONArray('rotations').getInt(i) * PI)/180;
    end;
  end
  else
  begin
    for i := 0 to json.getJSONArray('coordinates').High() do
      with json.getJSONArray('coordinates').getJSONArray(i) do
        Result.Coordinates += [getInt(0), getInt(1)];
    SetLength(Result.Rotations, Length(Result.Coordinates));
  end;

  with json.getJSONArray('colors') do
    for i := 0 to High() do
      colors += getInt(i);

  ACA(colors, 2, c, t, h, s);

  for i := 0 to High(Result.Finder.Colors) do
    if Result.Finder.Colors[i] = CTS2(c, t, h, s) then
      Exit;

  Result.Finder.Colors := [CTS2(c, t, h, s)];
end;

function TRSMapObject.Setup(pwalker: PRSWalkerV2; json: TJSONObject): TRSMapObject; static;
var
  i: Int32;
  x, y: Single;
begin
  Result.Walker := pwalker;
  Result.Filter := [True, True, True, True];

  Result.ID := json.getInt('id');
  Result.Name := json.getString('name');
  Result.ObjType := json.getInt('type');
  Result.Category := json.getInt('category');
  Result.Offset := [0,0];

  with json.getJSONArray('actions') do
    for i := 0 to High() do
      if getString(i) <> 'null' then
        Result.Actions += getString(i);

  with json.getJSONArray('size') do
  begin
    x := getInt(0) * 0.8;
    y := getInt(1) * 0.8;
    Result.Size := [x, y, getInt(2) / 40]; //TODO: build this into the JSONs
  end;

  Result := Result.Merge(json);
  Result.Finder.ColorClusters := [];
end;

function TRSMapObject.SameObject(json: TJSONObject): Boolean;
var
  i: Int32;
  x, y: Single;
begin
  if Self.Name <> json.getString('name') then
    Exit;
  if Self.ObjType <> json.getInt('type') then
    Exit;
  if Self.Category <> json.getInt('category') then
    Exit;

  with json.getJSONArray('actions') do
    for i := 0 to High() do
      if getString(i) <> 'null' then
        if not Self.Actions.Contains(getString(i)) then
          Exit;

  with json.getJSONArray('size') do
  begin
    x := getInt(0) * 0.8;
    y := getInt(1) * 0.8;
    Result := Self.Size <> [x, y, getInt(2) / 40];
  end;
end;


function TRSMapObject.MapToMM(me: TPoint = [0,0]; angle: Single = $FFFF): TPointArray; constref;
var
  coordinates: TPointArray;
begin
  if me = [0,0] then
    me := Self.Walker^.Position();

  coordinates := Self.Coordinates.FilterCircle([me.X, me.Y, 85]);
  coordinates := coordinates.Sorted(me);

  if angle = $FFFF then
    angle := Minimap.GetCompassAngle(False);

  Result := Self.Walker^.PointsToMM(me, coordinates, angle);
end;

function TRSMapObject.MapToMS(me: TPoint = [0,0]; angle: Single = $FFFF): TPointArray; constref;
var
  coordinates: TPointArray;
begin
  if me = [0,0] then
    me := Self.Walker^.Position();

  coordinates := Self.Coordinates.FilterCircle([me.X, me.Y, 85]);
  coordinates := coordinates.Sorted(me);

  if angle = $FFFF then
    angle := Minimap.GetCompassAngle(False);

  coordinates := Self.Walker^.PointsToMM(me, coordinates, angle);

  Result := Minimap.PointsToMS(coordinates, angle);
end;

function TRSMapObject.GetCuboidArray(me: TPoint = [0,0]; angle: Single = $FFFF): TCuboidExArray; constref;
var
  coordinates, mmPoints: TPointArray;
  p: TPoint;
  offset: Vector3;
  h: Single;
begin
  if me = [0,0] then
    me := Self.Walker^.Position();
  if angle = $FFFF then
    angle := Minimap.GetCompassAngle(False);

  h := Self.Walker^.Height(me);

  coordinates := Self.Coordinates.FilterCircle([me.X, me.Y, 85]);

  for p in coordinates.Sorted(me) do
  begin
    offset := Vec3(Self.Offset.X, Self.Offset.Y, -h-Self.Walker^.Height(p));
    p := Self.Walker^.PointToMM(me, p, angle);
    Result += Minimap.GetCuboidMS(p, Self.Size, offset, angle);
  end;
end;


(*
## TRSMapObject.Find
```pascal
function TRSMapObject.Find(cuboidArray: TCuboidArray): T2DPointArray;
```
Internal TRSMapObject method responsible for filtering a TCuboidArray by what's visible in the mainscren.
This is meant to filter TRSMapObject.GetCuboidArray() so targets that are outside of the mainscreen are filtered out.
You will probably never need to use this directly.
*)
function TRSMapObject.FindOnMainScreen(cuboidArray: TCuboidExArray): T2DPointArray;
var
  i: Int32;
  tpa: TPointArray;
begin
  cuboidArray := MainScreen.Filter(cuboidArray);

  for i := 0 to High(cuboidArray) do
  begin
    if Self.Filter.Finder then
    begin
      tpa := MainScreen.FindObject(Self.Finder, cuboidArray[i].Bounds()).Merge();
      if tpa = [] then
        Continue;

      tpa := cuboidArray[i].Filter(tpa);
      if tpa <> [] then
        Result += tpa;

      Continue;
    end;

    tpa := cuboidArray[i].ShapeFill();
    if tpa <> [] then
      Result += tpa;
  end;
end;

(*
## TRSMapObject.Visible
```pascal
function TRSMapObject.Visible(cuboidArray: TCuboidArray): Boolean;
```
Internal TRSMapObject method that returns true or false if we have TCuboids visible on the mainscreen.
You probably don't need to use this directly.
*)
function TRSMapObject.OnMainScreen(cuboidArray: TCuboidExArray): Boolean;
var
  i: Int32;
begin
  cuboidArray := MainScreen.Filter(cuboidArray);

  if not Self.Filter.Finder then
    Exit(cuboidArray <> []);

  for i := 0 to High(cuboidArray) do
    if MainScreen.FindObject(Self.Finder, cuboidArray[i].Bounds()) <> [] then
      Exit(True);
end;


(*
## TRSMapObject._UpTextCheck
```pascal
function TRSMapObject._UpTextCheck(out shouldExit: Boolean): Boolean;
```
Internal TRSMapObject helper method that is used by all hovering methods.
You probably don't need to use this directly.
*)
function TRSMapObject._UpTextCheck(out shouldExit: Boolean): Boolean;
var
  strArray: TStringArray;
  upText: String;
begin
  shouldExit := True;

  if Self.Filter.UpText then
  begin
    strArray += Self.Name;

    if TRSMapObject.CurrentUpText <> strArray then
      TRSMapObject.CurrentUpText := strArray;
  end;

  upText := MainScreen.GetUpText();

  if ('>' in upText) and not TRSMapObject.CurrentUpText.Contains('Use') then
  begin
    ChooseOption.Select('Cancel');
    Exit;
  end;

  if Self.Filter.UpText and (Self.Name in upText) then
    Exit(True);

  shouldExit := False;
end;

(*
## TRSMapObject._WalkUpTextCheck
```pascal
function TRSMapObject._WalkUpTextCheck(out shouldExit: Boolean): Boolean;
```
Internal TRSMapObject helper method that is used by all walking hover methods.
You probably don't need to use this directly.
*)
function TRSMapObject._WalkUpTextCheck(out shouldExit: Boolean): Boolean;
var
  upText: String;
  strArray: TStringArray;
begin
  shouldExit := True;

  if Self.Filter.UpText then
  begin
    strArray += Self.Name;

    if TRSMapObject.CurrentUpText <> strArray then
      TRSMapObject.CurrentUpText := strArray;
  end;

  upText := MainScreen.GetUpText();

  if ('>' in upText) and not TRSMapObject.CurrentUpText.Contains('Use') then
  begin
    ChooseOption.Select('Cancel');
    Exit;
  end;

  if TRSMapObject.RedClicked or (Self.Filter.UpText and (Self.Name in upText)) then
    Exit(True);

  shouldExit := False;
end;

(*
## TRSMapObject._ClickHelper
```pascal
function TRSMapObject._ClickHelper(leftClick: Boolean): Boolean;
```
Internal TRSMapObject helper method that is used by other clicking methods.
You probably don't need to use this directly.

This is what's responsible for deciding if we click a target we are hovering or not.
*)
function TRSMapObject._ClickHelper(leftClick: Boolean): Boolean;
begin
  TRSMapObject.CurrentUpText := [];
  TRSMapObject.CurrentActionUpText := [];

  if TRSMapObject.RedClicked then
  begin
    TRSMapObject.RedClicked := False;
    Exit(True);
  end;

  if ChooseOption.IsOpen() then
  begin
    if Self.Filter.UpText and ChooseOption.Select(Self.Name) then
      Exit(True);
    ChooseOption.Close();
    Exit;
  end;

  if leftClick then
    Mouse.Click(MOUSE_LEFT);

  if MainScreen.DidRedClick() then
    Exit(True);

  Result := not leftClick and Self.Filter.UpText and ChooseOption.Select(Self.Name);
end;

(*
## TRSMapObject._SelectHelper
```pascal
function TRSMapObject._SelectHelper(action: TStringArray): Boolean;
```
Internal TRSMapObject helper method that is used by other select methods.
You probably don't need to use this directly.

This is what is responsible for deciding if we just left click a target we are hovering or right click it and choose an option.
*)
function TRSMapObject._SelectHelper(action: TStringArray): Boolean;
begin
  TRSMapObject.CurrentUpText := [];
  TRSMapObject.CurrentActionUpText := [];

  if TRSMapObject.RedClicked then
  begin
    TRSMapObject.RedClicked := False;
    Exit(True);
  end;

  if ChooseOption.IsOpen() and ChooseOption.Select(action) then
    Exit(True);

  if MainScreen.IsUpText(action) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(MainScreen.DidRedClick());
  end;

  Result := ChooseOption.Select(action);
end;


(*
## TRSMapObject.Find
```pascal
function TRSMapObject.FindEx(out cuboids: TCuboidArray; out atpa: T2DPointArray): Boolean;
function TRSMapObject.Find(out atpa: T2DPointArray): Boolean;
```
TRSMapObject method used to find a {ref}`TRSMapObject`. If found returns true, if not returns false.
The "extended" method in particular is mostly meant for debugging and is the one used when you call `Debug(TRSMapObject)`.

Example:
```pascal
WriteLn RSObjects.GEBank.Find(atpa); //Be in ge and with a walker setup there.
Debug(atpa);
```
*)
function TRSMapObject.FindEx(out cuboids: TCuboidExArray; out atpa: T2DPointArray): Boolean;
begin
  if Self.Filter.Walker then
  begin
    cuboids := Self.GetCuboidArray();
    if cuboids = [] then
      Exit;

    atpa := Self.FindOnMainScreen(cuboids);
  end
  else if Self.Filter.Finder then
    atpa := MainScreen.FindObject(Self.Finder).SortFrom(MainScreen.GetPlayerBox().Center());

  Result := atpa <> [];
end;

function TRSMapObject.Find(out atpa: T2DPointArray): Boolean;
var
  cuboids: TCuboidExArray;
begin
  Result := Self.FindEx(cuboids, atpa);
end;

(*
## TRSMapObject.IsVisible
```pascal
function TRSMapObject.IsVisible(): Boolean;
```
TRSMapObject method used to find a {ref}`TRSMapObject`. If found returns true, if not returns false.

Example:
```pascal
WriteLn RSObjects.GEBank.IsVisible(); //Be in ge and with a walker setup there.
```
*)
function TRSMapObject.IsVisible(): Boolean;
var
  cuboids: TCuboidExArray;
begin
  if Self.Filter.Walker then
  begin
    cuboids := Self.GetCuboidArray();

    if cuboids = [] then
      Exit;

    Exit(Self.OnMainScreen(cuboids));
  end;

  if Self.Filter.Finder then
    Result := MainScreen.FindObject(Self.Finder) <> [];
end;

(*
## TRSMapObject.FindFromPosition
```pascal
function TRSMapObject.FindFromPosition(me: TPoint; out atpa: T2DPointArray): Boolean;
```
Look for a {ref}`TRSMapObject` as if you were on a different position. Great for things like pre-hovering.
*)
function TRSMapObject.FindFromPosition(me: TPoint; out atpa: T2DPointArray): Boolean;
var
  cuboidArray: TCuboidExArray;
begin
  if not Self.Filter.Walker then
    Exit;

  cuboidArray := Self.GetCuboidArray(me);
  if cuboidArray = [] then
    Exit;

  atpa := Self.FindOnMainScreen(cuboidArray);
  Result := atpa <> [];
end;


(*
## TRSMapObject.Draw
```pascal
procedure TRSMapObject.Draw(out bitmap: TMufasaBitmap);
```
Helper method to debug TRSMapObjects used in `Debug(TRSMapObject)`.
*)
procedure TRSMapObject.Draw(out bitmap: TMufasaBitmap);
var
  me, p, q: TPoint;
  rect: TRectangle;
  angle: Single;
  mmPoints: TPointArray;
  cuboids: TCuboidExArray;
  atpa: T2DPointArray;
  offset: Vector3;
  h: Single;
begin
  me := Self.Walker^.Position();
  angle := Minimap.GetCompassAngle(False);
  h := Self.Walker^.Height(me);

  mmPoints := Self.MapToMM(me, angle);

  for p in mmPoints do
  begin
    q := [Round(Self.Size.X * 4 / 2), Round(Self.Size.Y * 4 / 2)];
    rect.Top := p.Offset(-q.X, -q.Y);
    rect.Right := p.Offset(q.X, -q.Y);
    rect.Btm := p.Offset(q.X, q.Y);
    rect.Left := p.Offset(-q.X, q.Y);
    bitmap.DrawRect(rect, $FF);

    offset := Vec3(Self.Offset.X, Self.Offset.Y, -h-Self.Walker^.Height(p));
    cuboids += Minimap.GetCuboidMS(p, Self.Size, offset, angle);
  end;

  Self.FindEx(cuboids, atpa);

  bitmap.DrawATPA(atpa);
  if atpa <> [] then
    bitmap.DrawTPA(atpa[0], $0);

  bitmap.DrawCuboidArray(cuboids, $00FFFF);
end;

(*
## Debug
```pascal
procedure Debug(obj: TRSMapObject); overload;
```
Debugs a TRSMapObject used with the help of `TRSMapObject.Draw()`.

Example:
```pascal
{$I SRL-T/osr.simba}
begin
  Map.SetupChunkEx([49,52,49,52]);
  Debug(Objects.Get('clay rocks')); //be in varrock west mine.
end.
```
*)
procedure Debug(obj: TRSMapObject); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  obj.Draw(bitmap);
  bitmap.Debug();
  bitmap.Free();
end;


(*
## TRSMapObject._UpdateTarget
```pascal
procedure TRSMapObject._UpdateTarget(sender: PMouse; var x, y: Double; var done: Boolean);
```
Internal helper method of TMouseMovingEventEx type used to update the target position while the mouse is moving.
You should probably not touch this if you don't understand it.
*)
procedure TRSMapObject._UpdateTarget(sender: PMouse; var x, y: Double; var done: Boolean);
var
  i: Int32;
  atpa: T2DPointArray;
  p, destination: TPoint;
begin
  destination := [Round(x), Round(y)];
  p := sender^.Position();
  if p.DistanceTo(destination) > 5 then
    Exit;
  sender^.OnMovingEx := nil;

  if Self._UpTextCheck(done) then
    Exit;

  done := not Self.Find(atpa);
  if done then
    Exit;

  for i := 0 to High(atpa) do
  begin
    if atpa[i].Contains(destination) then
      Exit;
  end;

  p := atpa[0].RandomValue();
  x := p.X;
  y := p.Y;
end;

(*
## TRSMapObject._HoverHelper
```pascal
function TRSMapObject._HoverHelper(attempts: Int32; trackTarget: Boolean): Boolean;
```
Internal helper method used to hover a TRSMapObject target.
You should not use this directly.
*)
function TRSMapObject._HoverHelper(attempts: Int32; trackTarget: Boolean): Boolean;
var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
begin
  Result := Self._UpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0] // 0 for the closest one.
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa[Random(0, High(atpa))];

      if trackTarget then
        Mouse.OnMovingEx := @Self._UpdateTarget;
      Mouse.Move(tpa[Random(0, High(tpa))]);

      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.Name) then
      Exit(True);

    //will rotate the screen for the last attempt if hasn't hovered properly yet
    if attempt = (attempts - 1) then
    begin
      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;

(*
## TRSMapObject._WalkHoverHelper
```pascal
function TRSMapObject._WalkHoverHelper(attempts: Int32; trackTarget: Boolean): Boolean;
```
Internal helper method used to walk and hover a TRSMapObject target.
You should not use this directly.

This is responsible for deciding wether we should walk to a TRSMapObject target or not before attempting to hover it.
*)
function TRSMapObject._WalkHoverHelper(attempts: Int32; trackTarget: Boolean): Boolean;
var
  shouldExit: Boolean;
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
  angle: Double;
  me, closest: TPoint;
begin
  if not Self.Filter.Walker then
    Exit(Self._HoverHelper(attempts, trackTarget));

  Result := Self._WalkUpTextCheck(shouldExit);
  if shouldExit then
    Exit;

  for attempt := 0 to attempts do
  begin
    if Self.Find(atpa) then
    begin
      if attempt < 2 then
        tpa := atpa[0]
      else if Length(atpa) > (attempt - 2) then
        tpa := atpa[attempt - 2]
      else
        tpa := atpa.RandomValue();

      if trackTarget then
        Mouse.OnMovingEx := @Self._UpdateTarget;
      Mouse.Move(tpa.RandomValue());

      if not Self.Filter.UpText then
        Exit(True);
    end;

    if MainScreen.IsUpText(Self.Name) then
      Exit(True);

    me := Self.Walker^.Position();
    closest := Self.Walker^.GetClosestPointEx(me, Self.Coordinates);
    if not Self.Walker^.InRangeEx(me, closest, 50) then
    begin
      Self.Walker^.WebWalkEx(me, closest, 30, 0.15);
      Continue;
    end;

    if attempt = (attempts - 1) then
    begin
      if not Self.Walker^.InRangeEx(me, closest, 25) then
      begin
        Self.Walker^.WebWalkEx(me, closest, 25, 0.15);
        Continue;
      end;

      angle := Minimap.GetCompassAngle() + Random(-50, 50);
      Minimap.SetCompassAngle(angle, 10);
    end;
  end;
end;


(*
## TRSMapObject.PreHoverHelper
```pascal
function TRSMapObject.PreHoverHelper(attempts: Int32): Boolean;
```
Internal helper method used to pre-hover a TRSMapObject target.
You should not use this directly.
*)
function TRSMapObject.PreHoverHelper(me: TPoint; attempts: Int32 = 2): Boolean;
var
  attempt: Int32;
  atpa: T2DPointArray;
  tpa: TPointArray;
begin
  for attempt := 0 to attempts do
  begin
    if Self.FindFromPosition(me, atpa) then
    begin
      tpa := atpa[Random(0, High(atpa))];
      ASyncMouse.Move(tpa[Random(0, High(tpa))]);
      Exit(True);
    end;
  end;
end;

(*
## TRSMapObject.Hover
```pascal
function TRSMapObject.Hover(attempts: Int32 = 2; trackTarget: Boolean = TRSMapObject.TrackTarget): Boolean;
```
Method used to hover a TRSMapObject target if it's found on the mainscreen.
It can update the target position while the mouse moves with **trackTarget**.

Example:
```pascal
RSW.WebWalk(WaspWeb.LOCATION_VARROCK);
RSObjects.GEBank.Hover(); //Be in GE with a walker setup there.
```
*)
function TRSMapObject.Hover(attempts: Int32 = 2; trackTarget: Boolean = TRSMapObject.TrackTarget): Boolean;
begin
  if ChooseOption.IsOpen() then
  begin
    if Self.Filter.UpText and ChooseOption.HasOption(Self.Name) then
      Exit(True);
    ChooseOption.Close();
  end;

  if Self.Filter.Walker and not Self.Walker^.MakePointVisible(Self.Coordinates) then
    Exit;

  Result := Self._HoverHelper(attempts, trackTarget);
end;

(*
## TRSMapObject.WalkHover
```pascal
function TRSMapObject.WalkHover(attempts: Int32 = 2; trackTarget: Boolean = TRSMapObject.TrackTarget): Boolean;
```
Method used to walk and hover a TRSMapObject target if it's found on the mainscreen after walking.
It can update the target position while the mouse moves with **trackTarget**.

Example:
```pascal
//Be in varrock with a varrock map loaded.
RSW.WebWalk(WaspWeb.LOCATION_VARROCK);
RSObjects.GEBank.WalkHover();
```
*)
function TRSMapObject.WalkHover(attempts: Int32 = 2; trackTarget: Boolean = TRSMapObject.TrackTarget): Boolean;
var
  p: TPoint;
begin
  if ChooseOption.IsOpen() then
  begin
    if Self.Filter.UpText and ChooseOption.HasOption(Self.Name) then
      Exit(True);
    ChooseOption.Close();
  end;

  if not Self.Filter.Walker then
    Exit;

  if Self.Filter.UpText then
    TRSMapObject.CurrentUpText += Self.Name;

  p := Self.Walker^.GetClosestPoint(Self.Coordinates);
  if not Self.Walker^.MakePointVisible(p) and
     not Self.Walker^.WebWalk(p, 30, 0.15) then
      Exit;

  Result := Self._WalkHoverHelper(attempts, trackTarget);
end;


(*
## TRSMapObject.Click
```pascal
function TRSMapObject.Click(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;
```
Method used to click a TRSMapObject target if it's found on the mainscreen.

Example:
```pascal
//Be in ge with a ge map loaded.
WriteLn RSObjects.GEBank.Click();
```
*)
function TRSMapObject.Click(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;
begin
  Result := Self.Hover(attempts) and Self._ClickHelper(leftClick);
end;


(*
## TRSMapObject.SelectOption
```pascal
function TRSMapObject.SelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;
```
Method used to select an option on a TRSMapObject target if it's found on the mainscreen.

Example:
```pascal
//Be in ge with a ge map loaded.
WriteLn RSObjects.GEBank.SelectOption(['Collect']);
```
*)
function TRSMapObject.SelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;
begin
  Self.CurrentActionUpText := action;
  Result := Self.Hover(attempts) and Self._SelectHelper(action);
  Self.CurrentActionUpText := [];
end;


(*
## TRSMapObject.WalkClick
```pascal
function TRSMapObject.WalkClick(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;
```
Method used to walk and click a TRSMapObject target if it's found on the mainscreen.

Example:
```pascal
//Be in ge with a ge map loaded, preferably far away so it has to walk.
WriteLn RSObjects.GEBank.WalkClick();
```
*)
function TRSMapObject.WalkClick(leftClick: Boolean = True; attempts: Int32 = 2): Boolean;
begin
  Result := Self.WalkHover(attempts) and Self._ClickHelper(leftClick);
end;

(*
## TRSMapObject.WalkSelectOption
```pascal
function TRSMapObject.WalkSelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;
```
Method used to walk and select an option on a TRSMapObject target if it's found on the mainscreen.

Example:
```pascal
//Be in ge with a ge map loaded, preferably far away so it has to walk.
WriteLn RSObjects.GEBank.WalkSelectOption(['Collect']);
```
*)
function TRSMapObject.WalkSelectOption(action: TStringArray; attempts: Int32 = 2): Boolean;
begin
  Self.CurrentActionUpText := action;
  Result := Self.WalkHover(attempts) and Self._SelectHelper(action);
  Self.CurrentActionUpText := [];
end;



type
  TRSMapObjectArray = array of TRSMapObject;

function TRSMapObjectArray.FindAnyID(id: Int32): Int32;
begin
  for Result := 0 to High(Self) do
    if Self[Result].ID = id then
      Exit;
  Result := -1;
end;

function TRSMapObjectArray.FindAnyName(name: String): Int32;
begin
  name := LowerCase(name);
  for Result := 0 to High(Self) do
    if LowerCase(Self[Result].Name) = name then
      Exit;
  Result := -1;
end;

function TRSMapObjectArray.FindAnyType(objType: Int32): Int32;
begin
  for Result := 0 to High(Self) do
    if Self[Result].ObjType = objType then
      Exit;
  Result := -1;
end;

function TRSMapObjectArray.FindAnyCategory(category: Int32): Int32;
begin
  for Result := 0 to High(Self) do
    if Self[Result].Category = category then
      Exit;
  Result := -1;
end;


function TRSMapObjectArray.FindAny(obj: Variant): Int32;
var
  str: String;
begin
  str := obj;
  if VarIsNumeric(obj) or str.IsDigit() then
    Exit(Self.FindAnyID(obj));
  Result := Self.FindAnyName(str);
end;

function TRSMapObjectArray.FindAllName(name: String): TIntegerArray;
var
  i: Int32;
begin
  name := LowerCase(name);
  for i := 0 to High(Self) do
    if Self[i].Name = name then
      Result += i;
end;

function TRSMapObjectArray.FindAllType(objType: Int32): TIntegerArray;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i].ObjType = objType then
      Result += i;
end;

function TRSMapObjectArray.FindAllCategory(category: Int32): TIntegerArray;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i].Category = category then
      Result += i;
end;

type
  TRSMapObjects = record
    Data: TJSONArray;
    Walker: PRSWalkerV2;
    Cache: TRSMapObjectArray;
  end;

function TRSMapObjects.Get(obj: Variant): TRSMapObject;
var
  i: Int32;
  str: String;
  found: Boolean;
begin
  i := Self.Cache.FindAny(obj);
  if i > -1 then
    Exit(Self.Cache[i]);

  if VarIsNumeric(obj) then
  begin
    for i := 0 to  Self.Data.High() do
      if Self.Data.getJSONObject(i).getInt('id') = obj then
      begin
        Result := TRSMapObject.Setup(Self.Walker, Self.Data.getJSONObject(i));
        Result.Index := Length(Self.Cache);
        Self.Cache += Result;
        Exit;
      end;

    TerminateScript('Object with ID ' + ToStr(obj) + ' doesn''t exist on the loaded maps.');
  end;

  str := LowerCase(obj);

  if str.IsDigit() then
  begin
    for i := 0 to  Self.Data.High() do
      if Self.Data.getJSONObject(i).getInt('id') = obj then
      begin
        Result := TRSMapObject.Setup(Self.Walker, Self.Data.getJSONObject(i));
        Result.Index := Length(Self.Cache);
        Self.Cache += Result;
        Exit;
      end;

    TerminateScript('Object with ID ' + ToStr(obj) + ' doesn''t exist on the loaded maps.');
  end;

  for i := 0 to Self.Data.High() do
  begin
    if LowerCase(Self.Data.getJSONObject(i).getString('name')) = str then
    begin
      if found then
      begin
        if Result.SameObject(Self.Data.getJSONObject(i)) then
          Result := Result.Merge(Self.Data.getJSONObject(i));
        Continue;
      end;

      Result := TRSMapObject.Setup(Self.Walker, Self.Data.getJSONObject(i));
      Result.Index := Length(Self.Cache);
      Self.Cache += Result;
      found := True;
    end;
  end;

  if not found then
    TerminateScript('Object ' + ToStr(obj) + ' doesn''t exist on the loaded maps.');
end;

function TRSMapObjects.Add(obj: TRSMapObject): TRSMapObject;
begin
  Result := obj;
  Result.Index := Length(Self.Cache);
  Self.Cache += Result;
end;

function TRSMapObjects.SetFinder(obj: Variant; finder: TRSObjectFinder): TRSMapObject;
begin
  Result := Self.Get(obj);
  Result.Finder := finder;

  Self.Cache[Result.Index].Finder := finder;
end;

procedure TRSMapObjects.Debug();
var
  i, j: Int32;
  actions: TStringArray;
  colors: TIntegerArray;
begin
  for i := 0 to  Self.Data.High() do with Self.Data.getJSONObject(i) do
  begin
    for j := 0 to getJSONArray('actions').High() do
      actions += getJSONArray('actions').getString(j);

    for j := 0 to getJSONArray('colors').High() do
      colors += getJSONArray('colors').getInt(j);

    WriteLn(
      'ID: ', getInt('id'), ', Name: ', getString('name'),
      ', Type: ', getInt('type'), ', Category: ', getInt('category'),
      ', Actions: ', actions, ', Colors: ', colors
    );
    actions := [];
    colors := [];
  end;
end;

var
  Objects: TRSMapObjects;
