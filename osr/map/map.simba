(*
# Map
This file is responsible for the TRSMap positioning system.
It was made from scratch by Torwent but heavily inspired in the original
TRSWalker by Slacky and it's future iterations made by Olly.
Without them, this wouldn't be possible.
*)

{$DEFINE SRL_MAP_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
(*
(TRSPosition)=
## type TRSPosition
```pascal
TRSPosition = record(TPoint)
  Z: Int32;
  Plane: Int32;
end;
```
Record holding a player's full position:
- X, Y coordinate
- Z which is the player height on the current heightmap
- Plane which is the player's current plane if several planes are being used.
*)
  TRSPosition = record(TPoint)
    Z: Single;
    Plane: Int32;
  end;

(*
(TRSMap)=
## type TRSMap
```pascal
TRSMap = record
  Walker: TRSWalkerV2;
  Objects: TRSMapObjects;

  RegionIndex: Int32;
  Region: TRSMapRegion;
  Similarity: Double;
  Cache: TMatchTemplateRGBCache;
  Loader: TRSMapLoader;

  IsSetup: Boolean;
end;
```
Record responsible for positioning.
*)
  TRSMap = record
    Walker: TRSWalkerV2;

    RegionIndex: Int32;
    Region: TRSMapRegion;
    Similarity: Double;
    Cache: TMatchTemplateRGBCache;
    Loader: TRSMapLoader;

    IsSetup, DisableHeightmap: Boolean;
  end;

function TRSMap.Position(): TPoint; forward;

function TRSMap.Height(p: TPoint = [-1,-1]): Single; forward;

(*
## Map.InternalSetup
```pascal
procedure TRSMap.InternalSetup();
```
Internal TRSMap setup method.
This is caleld automatically for you and you shouldn't need to call it.
*)
procedure TRSMap.InternalSetup();
var
  minimapImage, minimapSample: TMufasaBitmap;
begin
  minimapImage := TRSMap.GetCleanMinimap();
  minimapSample := Self.ScaleMinimap(minimapImage, Self.Loader.Downscale);

  Self.Cache := TMatchTemplateRGBCache.Create(Self.Loader.DownscaledMap.ToMatrix(), MinimapSample.ToMatrix());

  if not Self.IsSetup then
  begin
    Self.Walker.Setup(
      @Self.Position, @Self.Height, @Self.Loader.GetLocal,
      @Self.Loader.Graph, Self.Loader.Map
    );

    AddOnTerminate(@Self.Loader.Free);
    Self.IsSetup := True;
  end;
end;

(*
## Map.Setup
```pascal
procedure TRSMap.Setup(filename: String; downscale: Int32 = 8);
procedure TRSMap.SetupRegions(filename: String; regions: TBoxArray; downscale: Int32 = 8);
procedure TRSMap.SetupRegion(filename: String; region: TBox; downscale: Int32 = 8);
procedure TRSMap.SetupFromURL(url: String; filename: String = ''; downscale: Int32 = 8; force: Boolean = False);
procedure TRSMap.SetupChunksEx(chunks: TBoxArray; levels: TIntegerArray = [0]; downscale: UInt32 = 8);
procedure TRSMap.SetupChunkEx(chunk: TBox; levels: TIntegerArray = [0]; downscale: UInt32 = 8);
procedure TRSMap.SetupChunks(chunks: array of TRSMapChunk; downscale: UInt32 = 8);
procedure TRSMap.SetupChunk(chunk: TRSMapChunk; downscale: UInt32 = 8);
procedure TRSMap.SetupEChunks(chunks: array of ERSChunk; downscale: UInt32 = 8);
procedure TRSMap.SetupEChunk(chunk: ERSChunk; downscale: UInt32 = 8);
```
Setup a TRSMap.
If for some reason you can't setup all your maps at once, you can later use the `Add` methods.
This however is not recommended if you can avoid it, read more about it there.

Methods with the "Chunk" keyword are the recommended ones to use.
If for some reason you need a custom map, use any of the other methods.

With the "Chunk" methods you are able to setup multiple levels from 0 to 3.
*)
procedure TRSMap.Setup(filename: String; downscale: Int32 = 8);
begin
  Self.Loader.LoadEx(filename, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.SetupRegions(filename: String; regions: TBoxArray; downscale: Int32 = 8);
begin
  Self.Loader.LoadEx(filename, regions, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.SetupRegion(filename: String; region: TBox; downscale: Int32 = 8);
begin
  Self.SetupRegions(filename, [region], downscale);
  Self.InternalSetup();
end;

procedure TRSMap.SetupFromURL(url: String; filename: String = ''; downscale: Int32 = 8; force: Boolean = False);
var
  client: Int32;
  filepath, path: String;
  tmp: TStringArray;
begin
  if filename = '' then
  begin
    tmp := url.Explode('/');
    filename := tmp[High(tmp)];
  end;

  filePath := WALKER_MAPS + filename;

  if FileExists(filePath) then
  begin
    if not force then
    begin
      Self.Setup(filename, downscale);
      Exit;
    end;

    if not DeleteFile(filePath) then
      RaiseException('Failed to delete: ' + filePath);
  end;

  WriteLn 'Downloading file: ' + url + '  >  ' + filePath;
  path := ExtractFileDir(filePath);
  if not ForceDirectories(path) then
    TerminateScript('Failed to create path: ' + path);

  try
    client := InitializeHTTPClient(False);
    GetHTTPPageEx(client, url, filePath);
  finally
    FreeHTTPClient(client);
  end;

  Self.Setup(filename, downscale);
end;

procedure TRSMap.SetupChunksEx(chunks: TBoxArray; planes: TIntegerArray = [0]; downscale: UInt32 = 8);
begin
  Self.Loader.Load(chunks, planes, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.SetupChunkEx(chunk: TBox; planes: TIntegerArray = [0]; downscale: UInt32 = 8);
begin
  Self.SetupChunksEx([chunk], planes, downscale);
end;

procedure TRSMap.SetupChunks(chunks: array of TRSMapChunk; downscale: UInt32 = 8);
var
  chunk: TRSMapChunk;
  p: Int32;
  boxes: TBoxArray;
  planes: TIntegerArray;
begin
  for chunk in chunks do
  begin
    boxes += chunk.Chunk;
    for p in chunk.Planes do
      if InRange(p, 0, 3) and (planes.Find(p) = -1) then
        planes += p;
  end;

  Self.SetupChunksEx(boxes, planes, downscale);
end;

procedure TRSMap.SetupChunk(chunk: TRSMapChunk; downscale: UInt32 = 8);
begin
  Self.SetupChunksEx([chunk.Chunk], chunk.Planes, downscale);
end;

procedure TRSMap.SetupEChunks(chunks: array of ERSChunk; downscale: UInt32 = 8);
var
  chunk: TRSMapChunk;
  echunk: ERSChunk;
  p: Int32;
  boxes: TBoxArray;
  planes: TIntegerArray;
begin
  for echunk in chunks do
  begin
    chunk := echunk.Get();
    boxes += chunk.Chunk;
    for p in chunk.Planes do
      if InRange(p, 0, 3) and (planes.Find(p) = -1) then
        planes += p;
  end;

  Self.SetupChunksEx(boxes, planes, downscale);
end;

procedure TRSMap.SetupEChunk(chunk: ERSChunk; downscale: UInt32 = 8);
var
  mapChunk: TRSMapChunk;
begin
  mapChunk := chunk.Get();
  Self.SetupChunk(mapChunk, downscale);
end;


(*
## Map.Add
```pascal
procedure TRSMap.Add(filename: String; downscale: Int32 = 8);
procedure TRSMap.AddRegions(filename: String; regions: TBoxArray; downscale: Int32 = 8);
procedure TRSMap.AddRegion(filename: String; region: TBox; downscale: Int32 = 8);
procedure TRSMap.AddFromURL(url: String; filename: String = ''; downscale: Int32 = 8; force: Boolean = False);
procedure TRSMap.AddChunksEx(chunks: TBoxArray; levels: TIntegerArray = [0]; downscale: UInt32 = 8);
procedure TRSMap.AddChunkEx(chunk: TBox; levels: TIntegerArray = [0]; downscale: UInt32 = 8);
procedure TRSMap.AddChunks(chunks: array of TRSMapChunk; downscale: UInt32 = 8);
procedure TRSMap.AddChunk(chunk: TRSMapChunk; downscale: UInt32 = 8);
procedure TRSMap.AddEChunks(chunks: array of ERSChunk; downscale: UInt32 = 8);
procedure TRSMap.AddEChunk(chunk: ERSChunk; downscale: UInt32 = 8);
```
TRSMap to add maps to an already setup TRSMap.
If it's possible to add all your maps during setup, avoid using this,
because this has to repeat several slow step the setup methods already take.

Methods with the "Chunk" keyword are the recommended ones to use.
If for some reason you need a custom map, use any of the other methods.

With the "Chunk" methods you are able to setup multiple levels from 0 to 3.
*)
procedure TRSMap.Add(filename: String; downscale: Int32 = 8);
begin
  Self.Loader.LoadEx(filename, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.AddRegions(filename: String; regions: TBoxArray; downscale: Int32 = 8);
begin
  Self.Loader.AddEx(filename, regions, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.AddRegion(filename: String; region: TBox; downscale: Int32 = 8);
begin
  Self.AddRegions(filename, [region], downscale);
end;

procedure TRSMap.AddFromURL(url: String; filename: String = ''; downscale: Int32 = 8; force: Boolean = False);
var
  client: Int32;
  filepath, path: String;
  tmp: TStringArray;
begin
  if filename = '' then
  begin
    tmp := url.Explode('/');
    filename := tmp[High(tmp)];
  end;

  filepath := WALKER_MAPS + filename;

  if FileExists(filepath) then
  begin
    if not force then
      Exit;

    if not DeleteFile(filepath) then
      RaiseException('Failed to delete: ' + filepath);
  end;

  WriteLn 'Downloading file: ' + url + ' > ' + filepath;
  path := ExtractFileDir(filepath);
  if not ForceDirectories(path) then
    TerminateScript('Failed to create path: ' + path);

  client := InitializeHTTPClient(False);
  try
    GetHTTPPageEx(client, url, filepath);
  finally
    FreeHTTPClient(client);
  end;

  Self.Add(filename, downscale);
end;

procedure TRSMap.AddChunksEx(chunks: TBoxArray; planes: TIntegerArray = [0]; downscale: UInt32 = 8);
begin
  Self.Loader.Add(chunks, planes, downscale);
  Self.InternalSetup();
end;

procedure TRSMap.AddChunkEx(chunk: TBox; planes: TIntegerArray = [0]; downscale: UInt32 = 8);
begin
  Self.AddChunksEx([chunk], planes, downscale);
end;

procedure TRSMap.AddChunks(chunks: array of TRSMapChunk; downscale: UInt32 = 8);
var
  chunk: TRSMapChunk;
  p: Int32;
  boxes: TBoxArray;
  planes: TIntegerArray;
begin
  for chunk in chunks do
  begin
    boxes += chunk.Chunk;
    for p in chunk.Planes do
      if InRange(p, 0, 3) and (planes.Find(p) = -1) then
        planes += p;
  end;

  Self.AddChunksEx(boxes, planes, downscale);
end;

procedure TRSMap.AddChunk(chunk: TRSMapChunk; downscale: UInt32 = 8);
begin
  Self.AddChunksEx([chunk.Chunk], chunk.Planes, downscale);
end;

procedure TRSMap.AddEChunks(chunks: array of ERSChunk; downscale: UInt32 = 8);
var
  chunk: TRSMapChunk;
  echunk: ERSChunk;
  p: Int32;
  boxes: TBoxArray;
  planes: TIntegerArray;
begin
  for echunk in chunks do
  begin
    chunk := echunk.Get();
    boxes += chunk.Chunk;
    for p in chunk.Planes do
      if InRange(p, 0, 3) and (planes.Find(p) = -1) then
        planes += p;
  end;

  Self.AddChunksEx(boxes, planes, downscale);
end;

procedure TRSMap.AddEChunk(chunk: ERSChunk; downscale: UInt32 = 8);
var
  mapChunk: TRSMapChunk;
begin
  mapChunk := chunk.Get();
  Self.AddChunksEx([mapChunk.Chunk], mapChunk.Planes, downscale);
end;


function TRSMap.Objects(): TJSONArray;
begin
  Result := Self.Loader.ObjectData;
end;

function TRSMap.NPCs(): TJSONArray;
begin
  Result := Self.Loader.NPCData;
end;


(*
## Map.CleanMinimap
```pascal
procedure TRSMap.CleanMinimap(bitmap: TMufasaBitmap); static;
```
Internal TRSMap method used to clear minimap dots from the minimap.
You probably don't need to use this.
*)
procedure TRSMap.CleanMinimap(bitmap: TMufasaBitmap); static;

  procedure _Find(P: TPoint);
  var
    Area: TBox;
    Pixel: Int32;
    X, Y: Int32;
  begin
    Area := [P.X - 5, P.Y - 5, P.X + 5, P.Y + 5];

    for Y := Area.Y1 to Area.Y2 do
      for X := Area.X1 to Area.X2 do
        if bitmap.PointInBitmap(X, Y) then
        begin
          Pixel := bitmap.GetPixel(X, Y);

          SetToleranceSpeed2Modifiers(0.001, 0.001);
          if SimilarColors($FFFFFF, Pixel, 30) then
            bitmap.SetPixel(X, Y, 0);

          SetToleranceSpeed2Modifiers(0.05, 1);
          if SimilarColors($00FFFF, Pixel, 30) then
            bitmap.SetPixel(X, Y, 0);

          SetToleranceSpeed2Modifiers(0.05, 1);
          if SimilarColors($0000FF, Pixel, 30) then
            bitmap.SetPixel(X, Y, 0);

          SetToleranceSpeed2Modifiers(50, 100);
          if SimilarColors($000000, Pixel, 1) then
            bitmap.SetPixel(X, Y, 0);
        end;
  end;

var
  Dots: TPointArray;
  Dot: TPoint;
  TPA: TPointArray;
begin
  Dots := Minimap.GetDotsBitmap(bitmap, [ERSMinimapDot.NPC, ERSMinimapDot.ITEM, ERSMinimapDot.PLAYER]);

  SetColorToleranceSpeed(2);

  for Dot in Dots do
    _Find(Dot);
  _Find([bitmap.GetWidth() div 2, bitmap.GetHeight() div 2]); // our own player

  SetColorToleranceSpeed(1);
  SetToleranceSpeed2Modifiers(0.2, 0.2);

  // TODO: account for tolerance
  bitmap.ReplaceColor(255,0);
  bitmap.ReplaceColor(284358,0);
  bitmap.ReplaceColor(1127261,0);

  bitmap.DrawPolyFilled(Minimap.GetPolygon().Offset(-Minimap.X1, -Minimap.Y1), True, 0);

  bitmap.FindColors(TPA, 0);
  bitmap.Blend(TPA.Sorted(bitmap.GetCenter()), 5);
  bitmap.Pad(10);
end;

(*
## Map.GetCleanMinimap()
```pascal
function TRSMap.GetCleanMinimap(): TMufasaBitmap; static;
```
Internal TRSMap method used to "screenshot" the minimap and clean it with TRSMap.CleanMinimap().
You probably don't need to use this directly but you can see what it does in the following example.

Example:
```pascal
Map.GetCleanMinimap().Debug();
```
*)
function TRSMap.GetCleanMinimap(): TMufasaBitmap; static;
var
  Bitmap: TMufasaBitmap;
begin
  Bitmap := GetMufasaBitmap(BitmapFromClient(Minimap.Bounds()));
  Bitmap.ReplaceColor(0, 1); // We need zero to be unique

  TRSMap.CleanMinimap(Bitmap);

  Result.Init();

  Bitmap.RotateBitmapEx(Minimap.GetCompassAngle(False), False, True, Result);
  Bitmap.Free();
end;

(*
## Map.ScaleMinimap
```pascal
function TRSMap.ScaleMinimap(Bitmap: TMufasaBitmap; Scaling: Int32): TMufasaBitmap;
```
Internal TRSMap method used to scale down the minimap to whatever the TRSMap scale is.
You probably don't need to use this directly but you can see what it does in the following example.

Example:
```pascal
Map.SetupChunks([[18,56,22,60], [42,50, 46, 45]], [0, 1]);
Map.ScaleMinimap(Map.GetCleanMinimap(), Map.Scaling).Debug();
```
*)
function TRSMap.ScaleMinimap(Bitmap: TMufasaBitmap; Scaling: Int32): TMufasaBitmap;
var
  RADIUS = 67;
var
  P: TPoint;
  Temp: TMufasaBitmap;
  TPA: TPointArray;
begin
  Temp := Bitmap.Copy();

  P := Temp.GetCenter();
  if RSClient.Mode = ERSClientMode.FIXED then
    P := P.Offset(0, -8).Rotate(-Minimap.GetCompassAngle(False), P); // fixed

  Temp.DrawCircleFilled(P.X, P.Y, RADIUS, True, 0);

  RADIUS += 3;

  Temp.Crop(P.X - RADIUS, P.Y - RADIUS, P.X + RADIUS, P.Y + RADIUS);
  Temp.FindColors(TPA, 0);
  Temp.Blend(TPA.Sorted(Temp.GetCenter()), 3);
  Temp.DrawCircleFilled(Temp.GetCenter().X, Temp.GetCenter().Y, RADIUS, True, 0);

  Result := Temp.Downsample(Scaling, False);

  Temp.Free();
end;

(*
## Map.ScaledSearch
```pascal
function TRSMap.ScaledSearch(bitmap: TMufasaBitmap; samples: Int32): TPointArray;
```
Internal TRSMap method used to get an initial TPointArray of possible positions.
This is performed in a downscaled map with a downscaled minimap.
This is very innacurate by itself but by ruling down most of the map
in a downscaled search before doing a full sized search speed has a dramatic boost.
You probably won't ever need to call this directly.
*)
function TRSMap.ScaledSearch(bitmap: TMufasaBitmap; samples: Int32): TPointArray;
var
  sample: TMufasaBitmap;
  matrix: TSingleMatrix;
  n: Int32;
begin
  sample := Self.ScaleMinimap(bitmap, Self.Loader.Downscale);
  matrix := MatchTemplateMask(Self.Cache, sample.ToMatrix(), TM_CCOEFF_NORMED);

  while Length(Result) < samples do
    with matrix.ArgMax() do
    begin
      Result += Offset(sample.GetWidth() div 2, sample.GetHeight() div 2) * Self.Loader.Downscale;
      matrix.Fill([X - 5, Y - 5, X + 5, Y + 5], 0);
    end;

  n := Self.Loader.Downscale div 2;
  Result := Result.Offset(n, n);

  sample.Free();
end;

(*
## Map.FullSearch
```pascal
function TRSMap.FullSearch(template, world: TMufasaBitmap; position: TPoint; out match: Single): TPoint;
```
Internal TRSMap method used to get the player position.
This is used by TRSMap.Position() to determine how likely is the **Position** passed in, our actual position.
This likelyhood is returned with **Match** which ranges from 0 to 1.
You probably won't ever need to call this directly.
*)
function TRSMap.FullSearch(template, map: TMufasaBitmap; position: TPoint; out match: Single): TPoint;
const
  TEMPL_SIZE = 25;
  SLICE_SIZE = TEMPL_SIZE + 45;
  SCALING = 2;
var
  slice, downscaledSlice, downscaledTemplate: TMufasaBitmap;
  matrix: TSingleMatrix;
  area: TBox;
begin
  area := [
    Max(0, position.X - SLICE_SIZE),
    Max(0, position.Y - SLICE_SIZE),
    Min(map.GetWidth()  - 1, position.X + SLICE_SIZE),
    Min(map.GetHeight() - 1, position.Y + SLICE_SIZE)
  ];

  slice := map.Copy(area);
  downscaledSlice := slice.Downsample(SCALING);

  downscaledTemplate := template.Downsample(SCALING);
  with downscaledTemplate.GetCenter() do
    downscaledTemplate.Crop(X - TEMPL_SIZE, Y - TEMPL_SIZE, X + TEMPL_SIZE, Y + TEMPL_SIZE);

  matrix := downscaledSlice.MatchTemplate(downscaledTemplate, TM_CCOEFF_NORMED);
  with matrix.ArgMax() do
  begin
    match := matrix[Y, X];

    Result.X := area.X1 + (X + TEMPL_SIZE) * SCALING;
    Result.Y := area.Y1 + (Y + TEMPL_SIZE) * SCALING;
  end;

  downscaledTemplate.Free();
  downscaledSlice.Free();
  slice.Free();
end;

(*
## Map.Position
```pascal
function TRSMap.Position(): TPoint;
function TRSMap.FullPosition(): TRSPosition;
```
Returns the players current position on the loaded map.
`TRSMap.FullPosition()` also returns the current Z level.

Example:
```pascal
WriteLn(Map.Position());
WriteLn(Map.Similarity); // Check to see the match percentage if needed
```
*)
function TRSMap.Position(): TPoint;
const
  SAMPLES = 3;
var
  cleanMinimap: TMufasaBitmap;
  tpa: TPointArray;
  i: Int32;
  hit: TPoint;
  match: Single;
begin
  Self.RegionIndex := -1;
  Self.Region := [];
  Self.Similarity := 0;

  cleanMinimap := Self.GetCleanMinimap();

  tpa := Self.ScaledSearch(cleanMinimap, SAMPLES);
  for i := 0 to High(tpa) do
  begin
    hit := Self.FullSearch(cleanMinimap, Self.Loader.Map, tpa[i], match);

    if match > Self.Similarity then
    begin
      Self.Similarity := match;
      Result := hit;
    end;
  end;

  cleanMinimap.Free();

  Self.RegionIndex := Self.Loader.GetRegion(Result);
  if Self.RegionIndex > -1 then
  begin
    Self.Region := Self.Loader.Regions[Self.RegionIndex];
    Exit(Self.Loader.GetGlobal(Self.RegionIndex, Result));
  end;

  Result := [0,0];
end;

function TRSMap.FullPosition(): TRSPosition;
begin
  with Self.Position() do
    Result := [X, Y, Self.Height([X,Y]), Self.Region.Level];
end;

(*
## Map.Height
```pascal
function TRSMap.Height(p: TPoint = [-1,-1]; global: Boolean): Single;
function TRSMap.Height(p: TPoint = [-1,-1]): Single; overload;
```
Returns the height of the player at the specified coordinate if there's a heightmap loaded.
If p is [-1,-1], which is the default then we will use our current position.
global decides wether the coordinate is converted to global coordinates or internal walker coordinates (read about walker regions for more info).

Example:
```pascal
WriteLn rsw.GetHeight();
```
*)
function TRSMap.Height(p: TPoint = [-1,-1]; global: Boolean): Single; overload;
begin
  if Self.DisableHeightmap or not Assigned(Self.Loader.Heightmap) then
    Exit;

  if p = [-1,-1] then
  begin
    global := True;
    p := Self.Position();
  end;

  if global then
    p := Self.Loader.GetLocal(Self.RegionIndex, p);

  if Self.Loader.Heightmap.Bounds().Contains(p) then
    Result := RSTranslator.Color2Height(Self.Loader.Heightmap.GetPixel(p));
end;

function TRSMap.Height(p: TPoint = [-1,-1]): Single;
begin
  Result := Self.Height(p, True);
end;

function TRSMap.HeightDifference(p, q: TPoint; global: Boolean = True): Single;
var
  c1, c2: TColor;
begin
  if Self.DisableHeightmap or not Assigned(Self.Loader.Heightmap) then
    Exit;

  if global then
  begin
    p := Self.Loader.GetLocal(Self.RegionIndex, p);
    q := Self.Loader.GetLocal(Self.RegionIndex, q);
  end;

  c1 := Self.Loader.Heightmap.GetPixel(p);
  c2 := Self.Loader.Heightmap.GetPixel(q);

  if c1 = c2 then Exit;

  Result := RSTranslator.Color2Height(c1) - RSTranslator.Color2Height(c2);
end;


(*
## TRSMap.InRange
```pascal
function TRSMap.InRange(p: TPoint; distance: Int32 = 4): Boolean;
function TRSMap.InRange(tpa: TPointArray; distance: Int32 = 4): Boolean; overload;
```
Method used to quickly check if we are within distance of a certain point or points.
This distance is measure in pixels and in a radial way.
*)
function TRSMap.InRange(p: TPoint; distance: Int32 = 4): Boolean;
begin
  Result := p.InRange(Self.Position(), distance);
end;

function TRSMap.InRange(tpa: TPointArray; distance: Int32 = 4): Boolean; overload;
begin
  Result := tpa.AnyInRange(Self.Position(), distance);
end;


(*
## Map.Map2MM
```pascal
function TRSMap.Map2MM(playerPoint, mapPoint: TPoint; radians: Double): TPoint;
function TRSMap.Map2MM(mapPoint: TPoint): TPoint; overload;
```
Converts a map coordinate to a point on the minimap.

Example:
```pascal
var
  p: TPoint;
  bitmap: TMufasaBitmap;
begin
  Map.SetupChunk([49,54,49,54], [0, 1]); //Make sure you are in GE for this example.
  p := Map.Map2MM([4620, 2100]);         //This is just a random point in the ge with SRL map.

  bitmap.FromClient();
  bitmap.DrawCross(p, 4, $FFFFFF);
  bitmap.Free();
end;
```
*)
function TRSMap.Map2MM(playerPoint, mapPoint: TPoint; radians: Double): TPoint;
begin
  with Minimap.Center() do
  begin
    Result := mapPoint - playerPoint + [X, Y];
    Result := Result.Rotate(radians, [X, Y]);
  end;
end;

function TRSMap.Map2MM(mapPoint: TPoint): TPoint; overload;
begin
  Result := Self.Map2MM(Self.DebugPosition(), mapPoint, Minimap.GetCompassAngle(False));
end;

(*
## TRSMap.MM2Map
```pascal
function TRSMap.MM2Map(playerPoint, minimapPoint: TPoint; radians: Single = $FFFF): TPoint;
function TRSMap.MM2Map(minimapPoint: TPoint; radians: Single = $FFFF): TPoint;
```
Converts a point on the minimap to a map coordinate.
*)
function TRSMap.MM2Map(playerPoint, minimapPoint: TPoint; radians: Single = $FFFF): TPoint;
begin
  Result := playerPoint + minimapPoint - Minimap.Center();
  if (radians = $FFFF) then
    radians := Minimap.GetCompassAngle(False);
  Result := Result.Rotate(-radians, playerPoint);
end;

function TRSMap.MM2Map(minimapPoint: TPoint; radians: Single = $FFFF): TPoint; overload;
begin
  if (radians = $FFFF) then
    radians := Minimap.GetCompassAngle(False);
  Result := Self.MM2Map(Self.Position(), minimapPoint, radians);
end;

(*
## TRSMap.MS2Map
```pascal
function TRSMap.MS2Map(playerPoint, minimapPoint: TPoint; height: Int32 = 0; accuracy: Double = 0.2): TPoint;
function TRSMap.MS2Map(minimapPoint: TPoint; height: Int32=0; accuracy:Double=0.2): TPoint; overload;
```
Converts a point on the mainscreen to a map coordinate.
*)
function TRSMap.MS2Map(playerPoint, minimapPoint: TPoint; height: Int32 = 0; accuracy: Double = 0.2): TPoint;
begin
  Result := Self.MM2Map(
              playerPoint,
              MainScreen.PointToMM(minimapPoint, height, accuracy).ToPoint(),
              Minimap.GetCompassAngle(False)
            );
end;

function TRSMap.MS2Map(minimapPoint: TPoint; height: Int32 = 0; accuracy: Double = 0.2): TPoint; overload;
begin
  Result := Self.MS2Map(Self.Position(), minimapPoint, height, accuracy);
end;


(*
## TRSMap.GetTileMS
```pascal
function TRSMap.GetTileMS(playerPoint, mapPoint: TPoint; height: Double = 0; offset: Vector2 = [0,0]): TRectangle;
function TRSMap.GetTileMS(mapPoint: TPoint; height,  offset: Vector2 = [0,0]): TRectangle; overload;
```
Returns a tile on the mainscreen with the help of TRSMap and MM2MS.

Example:
```pascal
Debug(Map.GetTileMS(Map.Position() + [10, 10]));
```
*)
function TRSMap.GetTileMS(playerPoint, mapPoint: TPoint; height: Double = 0; offset: Vector2 = [0,0]): TRectangle;
var
  radians: Double;
begin
  with Minimap.Center() do
  begin
    mapPoint   := [X, Y] + (mapPoint - playerPoint);
    radians := Minimap.GetCompassAngle(False);
    mapPoint   := mapPoint.Rotate(radians, [X, Y]);
  end;

  Result := Minimap.VectorToMSRect(Vec3(mapPoint.x - offset.X, mapPoint.y - offset.Y, height), 1, 1, radians);
end;

function TRSMap.GetTileMS(mapPoint: TPoint; height: Double = 0; offset: Vector2 = [0,0]): TRectangle; overload;
begin
  Result := Self.GetTileMS(Self.Position(), mapPoint, height, offset);
end;


(*
## Map.DebugPosition
```pascal
function TRSMap.DebugPosition(): TPoint;
```
Debugs the player position in the currently loaded map.

Example:
```pascal
Map.Setup();
while True do
  Map.DebugPosition();
```
*)
function TRSMap.DebugPosition(): TPoint;
var
  x1, y1, x2, y2, x, y, i: Int32;
  p, local: TPoint;
  bitmap, map, cleanMinimap: TMufasaBitmap;
  time: Double;
  lines: TStringArray;
begin
  Freeze();

  time := PerformanceTimer();
  Result := local := Self.Position();
  time := PerformanceTimer() - time;

  if Self.RegionIndex > -1 then
    local := Self.Loader.GetLocal(Self.RegionIndex, Result);

  x1 := Max(0, local.X - 200);
  y1 := Max(0, local.Y - 200);
  x2 := Min(x1 + 400, Self.Loader.Map.GetWidth()  - 1);
  y2 := Min(y1 + 400, Self.Loader.Map.GetHeight() - 1);

  x := local.X - x1;
  y := local.Y - y1;

  map := Self.Loader.Map.Copy(x1, y1, x2, y2);
  map.LineTo(Point(0, Y), Point(x2 - x1, y), $00FF00);
  map.LineTo(Point(X, 0), Point(x, y2 - y1), $00FF00);
  map.DrawBox([x - 2, y - 2, x + 2, y + 2], $FFFFFF);

  cleanMinimap := Self.ScaleMinimap(TRSMap.GetCleanMinimap(), 1);

  p := cleanMinimap.GetCenter();
  if RSClient.Mode = ERSClientMode.FIXED then
    p := p.Offset(0, 8).Rotate(-Minimap.GetCompassAngle(False), p);

  cleanMinimap.DrawBoxFilled([p.X - 1, p.Y - 1, p.X + 1, p.Y + 1], False, $FFFFFF);

  lines := [
    'RegionIndex: ' + ToStr(Self.RegionIndex),
    'RegionName: '  + ToStr(Self.Region.Name),
    'Level: '       + ToStr(Self.Region.Level),
    'Accuracy: '    + ToStr(Round(Self.Similarity, 3)),
    'Time: '        + ToStr(Round(time)) + ' ms'
  ];

  bitmap.Init();
  bitmap.SetSize(560 + cleanMinimap.GetWidth(), 420);
  bitmap.DrawClear($403027);

  bitmap.SetFontName('Consolas');
  bitmap.SetFontSize(18);
  bitmap.SetFontAntialiasing(True);

  bitmap.DrawText('Local: ' + Format('(%d, %d)', [local.X, local.Y]), [420, 40 + cleanMinimap.GetHeight()], $FFFFFF);
  bitmap.DrawText('Global: ' + Format('(%d, %d)', [Result.X, Result.Y]), [420, 60 + cleanMinimap.GetHeight()], $FFFFFF);

  for i := 0 to High(lines) do
    bitmap.DrawText(lines[i], [420, cleanMinimap.GetHeight() + 100 + 20 * i], $FFFFFF);

  map.DrawTransparent(10, 10, bitmap);
  map.Free();

  cleanMinimap.SetTransparentColor($0);
  cleanMinimap.DrawTransparent(450, 10, bitmap);
  cleanMinimap.Free();

  bitmap.Debug();
  DisplayDebugImgWindow(bitmap.getWidth(), bitmap.getHeight());
  bitmap.Free();

  UnFreeze();
end;

procedure TRSMap.DebugHeight(hideCollision: Boolean = True);
var
  me: TRSPosition;
  b: TBox;
  tpa: TPointArray;
  x1, y1, x2, y2, x, y, w, h: Int32;
  p, c, local: TPoint;
  bitmap, map, rotated: TMufasaBitmap;
  angle, height: Single;
  tile: Vector3;
  z: TRectangle;
begin
  angle := Minimap.GetCompassAngle(False);
  me := Self.FullPosition();

  if Self.RegionIndex > -1 then
    local := Self.Loader.GetLocal(Self.RegionIndex, [me.X, me.Y]);

  bitmap.FromClient();

  b := Minimap.Bounds();
  w := b.Width();
  h := b.Height();

  x1 := (local.X - w div 2) - 10;
  y1 := (local.Y - h div 2) - 10;
  x2 := (local.X + w div 2) + 10;
  y2 := (local.Y + h div 2) + 10;

  map := Self.Loader.Heightmap.Copy(x1, y1, x2, y2);

  rotated.Init();
  map.RotateBitmap(-angle, rotated);
  rotated.Crop(Box(rotated.getCenter(), w div 2, h div 2));

  tpa := Minimap.GetPolygon().Offset(-b.X1, -b.Y1);
  tpa := tpa.Connect().ShapeFill().Grow(2);
  rotated.DrawTPA(tpa.Invert(rotated.Bounds()), $0);
  rotated.SetTransparentColor(0);

  bitmap.DrawBitmap(rotated, [b.X1, b.Y1]);

  c := Minimap.Center();
  z := Minimap.GetZoomRectangle().Expand(4);
  for x := c.X - 25 * 4 to c.X + 25 * 4 with 4 do
    for y := c.Y - 25 * 4 to c.Y + 25 * 4 with 4 do
    begin
      p := [x,y];
      if not Minimap.PointOnZoomRectangle(p) then
        Continue;

      p := Self.MM2Map([me.X, me.Y], p, angle);
      p := Self.Loader.GetLocal(Self.RegionIndex, p);

      if hideCollision and (Self.Loader.Collision.GetPixel(p) = $0) then
        Continue;

      height := - (me.Z - Self.Height(p, False));
      height := 4 * Power(height, 2) - 3 * height;

      tile := Vec3(x, y, height).RotateXY(0, c.X, c.Y);

      tpa := Minimap.VectorToMSRect(tile, 1, 1, angle).ToTPA().Connect();

      bitmap.DrawTPA(MainScreen.Filter(tpa), Round(height * $00FF00 / 2040));
    end;

  bitmap.Debug();

  bitmap.Free();
  rotated.Free();
  map.Free();
end;

(*
## TRSMap.Debug
```pascal
procedure TRSMap.Debug(map: ERSMapType = ERSMapType.NORMAL; graph: Boolean = False);
```
Displays one of the maps loaded. You can optionally overlay the webgraph on top of you map.

Example:
```pascal
Map.SetupChunks([[18,56,22,60], [42,50, 46, 45]], [0, 1]);
Map.Debug(ERSMapType.HEIGHT);
```
*)
procedure TRSMap.Debug(map: ERSMapType = ERSMapType.NORMAL; graph: Boolean = False);
var
  bmp: TMufasaBitmap;
  tmp: TWebGraph;
begin
  case map of
    ERSMapType.NORMAL:    bmp := Self.Loader.Map.Copy();
    ERSMapType.HEIGHT:    bmp := Self.Loader.Heightmap.Copy();
    ERSMapType.COLLISION: bmp := Self.Loader.Collision.Copy();
  end;

  if graph then
  begin
    tmp := Self.Loader.Graph;
    tmp.Nodes := Self.Loader.GetLocal(tmp.Nodes);
    tmp.Draw(bmp);
  end;

  bmp.Debug();
  bmp.Free();
end;

var
(*
## var Map
Global TRSMap variable
*)
  Map: TRSMap;
