{$DEFINE SRL_ITEMS_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL-T/utils.simba}
{$ENDIF}

type
  TRSItem = Variant;
  TRSItemArray = array of TRSItem;

(*
## ItemArray.Find
```pascal
function TRSItemArray.Find(const value: TRSItem): Int32; constref;
```
Find a TRSItem in a TRSItemArray and return it's index.
*)
function TRSItemArray.Find(const value: TRSItem): Int32; constref;
begin
  for Result := 0 to High(Self) do
    if value = Self[Result] then
      Exit;
  Result := -1;
end;

function TRSItemArray.FindAll(const value: TRSItem): TIntegerArray; constref;
var
  i: UInt32;
begin
  for i:=0 to High(Self) do
    if (Self[i] = value) then
      Result += i;
end;


procedure TRSItemArray.Insert(const value: String; index: Int32);
var
  l: UInt32;
begin
  l := Length(Self);
  if (l <= index) then
  begin
    Self += value;
    Exit;
  end;

  SetLength(Self, l + 1);
  MemMove(Self[index], self[index + 1], (l - index) * SizeOf(Self[0]));
  Self[index] := value;
end;

procedure TRSItemArray.Del(const index: Int32; const count: Int32 = 1);
begin
  Delete(Self, index, count);
end;


function TRSItemArray.Len(): Int32;
begin
  Result := Length(Self);
end;

procedure TRSItemArray.Remove(const value: TRSItem; const all: Boolean = False);
var
  i: Int32;
  lst: TIntegerArray;
begin
  if (not all) then
  begin
    i := Self.Find(value);
    if i >= 0 then Self.Del(i);
    Exit;
  end;

  lst := Self.FindAll(value);
  for i:=High(lst) downto 0 do
    Self.Del(lst[i]);
end;

function TRSItemArray.Pop(): String;
var
  h: Int32;
begin
  h := High(Self);
  Result := Self[h];
  SetLength(Self, h);
end;

procedure TRSItemArray.Extend(const arr: TRSItemArray);
var
  i, len: Int32;
begin
  len := Length(Self);
  SetLength(Self, len+Length(arr));
  for i:=0 to High(arr) do
    Self[len+i] := arr[i];
end;


(*
## ItemArray.Contains
```pascal
function TRSItemArray.Contains(const value: TRSItem): Boolean; constref;
```
Find a TRSItem in a TRSItemArray and return true or false.
*)
function TRSItemArray.Contains(const value: TRSItem): Boolean; constref;
begin
  Result := Self.Find(value) > -1;
end;

function TRSItemArray.ContainsAny(const values: TRSItemArray): Boolean; constref;
var
  value: String;
begin
  for value in values do
    if Self.Contains(value) then
      Exit(True);
end;

function TRSItemArray.ContainsAll(const values: TRSItemArray): Boolean; constref;
var
  value: String;
begin
  for value in values do
    if not Self.Contains(value) then
      Exit;
  Result := True;
end;


procedure TRSItemArray.Sort();
begin
  System.Sort(Self);
end;

function TRSItemArray.Sorted(): TRSItemArray;
begin
  Result := Copy(Self);
  System.Sort(Result);
end;


function TRSItemArray.Reversed(): TRSItemArray;
var
  lo: PtrUInt;
  p, r: ^TRSItem;
begin
  if (Length(Self) = 0) then
    Exit();

  SetLength(Result,length(self));
  p := @Self[high(self)];
  r := @Result[0];

  lo := PtrUInt(@Self[0]);
  while (lo<=PtrUInt(p)) do
  begin
    r^ := p^;
    dec(p);
    inc(r);
  end;
end;

procedure TRSItemArray.Reverse();
var
  tmp: TRSItem;
  lo, hi: ^TRSItem;
begin
  if (Length(Self) = 0) then
    Exit();

  lo := @Self[0];
  hi := @Self[High(self)];
  while (PtrUInt(lo)<PtrUInt(hi)) do
  begin
    tmp := hi^;
    hi^ := lo^;
    lo^ := tmp;
    dec(hi);
    inc(lo);
  end;
end;


function TRSItemArray.Combine(const arr2: TRSItemArray): TRSItemArray; constref;
var
  i, j: Int32;
begin
  if (Length(arr2) = 0) then
    Exit(Copy(Self));

  Result := Self;
  SetLength(Result, Length(Self) + Length(arr2));

  j := 0;
  for i := Length(Self) to High(arr2) + Length(Self) do
  begin
    Result[i] := arr2[j];
    Inc(j);
  end;
end;

function TRSItemArray.Equals(other: TRSItemArray): Boolean; constref;
var
  i: Int32;
begin
  if (Length(Self) <> Length(other)) then Exit(False);
  if (Length(Self) = 0) then Exit(True);

  for i:=0 to High(self) do
    if (self[i] <> other[i]) then
      Exit(False);
  Result := True;
end;


procedure TRSItemArray.ClearDuplicates();
var
  i: Int32;
  unique: TRSItemArray;
begin
  for i := 0 to High(Self) do
    if unique.Find(Self[i]) = -1 then
      unique += Self[i];
  Self := unique;
end; 

function TRSItemArray.Unique(): TRSItemArray;
begin
  Result := Copy(Self);
  Result.ClearDuplicates();
end;


function TRSItemArray.Count(const value: TRSItem): Int32;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i] = value then
      Inc(Result);
end;


function TRSItemArray.Intersection(other: TRSItemArray): TRSItemArray; constref;
var
  i: Int32;
begin
  for i := 0 to High(other) do
    if Self.Find(other[i]) > -1 then
      Result += other[i];
end;

function TRSItemArray.Difference(other: TRSItemArray): TRSItemArray; constref;
var
  item: TRSItem;
begin
  for item in Self do
    if other.Find(item) = -1 then
      Result += item;

  for item in other do
    if Self.Find(item) = -1 then
      Result += item;

  Result.ClearDuplicates();
end;

function TRSItemArray.SymmetricDifference(other: TRSItemArray): TRSItemArray; constref;
begin
  Result := Self.Difference(other) + other.Difference(Self);
end;


function TRSItemArray.RandomValue(): TRSItem; constref;
begin
  if Self <> [] then
    Result := Self[System.Random(Low(Self), High(Self))];
end;
