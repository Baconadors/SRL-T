(*
# RSTranslator
This file is responsible for conversions or internal RuneScape values to values
that can be used by Simba and back.
*)

{$DEFINE SRL_RSTRANSLATOR_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL-T/utils.simba}
{$ENDIF}

type
  TRSTranslator = record
    TileSize, MaxHeight, Planes: UInt32;

    RSMap, Map: record
      ChunkSide: UInt32;
      Dimensions: TPoint;
      Scope: TBox;
    end;
  end;

procedure TRSTranslator.Setup();
begin
  Self.TileSize := 4;
  Self.MaxHeight := 2040;
  Self.Planes := 3;

  Self.RSMap.ChunkSide := 64;
  Self.RSMap.Dimensions := [100, 200];
  Self.RSMap.Scope := [16, 19, 66, 196];

  Self.Map.ChunkSide := Self.TileSize * Self.RSMap.ChunkSide;
  Self.Map.Dimensions.X := Self.RSMap.Dimensions.X * Self.Map.ChunkSide;
  Self.Map.Dimensions.Y := Self.RSMap.Dimensions.Y * Self.Map.ChunkSide;

  Self.Map.Scope.X1 := Self.RSMap.Scope.X1 * Self.Map.ChunkSide;
  Self.Map.Scope.Y1 := Self.RSMap.Scope.Y1 * Self.Map.ChunkSide;
  Self.Map.Scope.X2 := Self.RSMap.Scope.X2 * Self.Map.ChunkSide;
  Self.Map.Scope.Y2 := Self.RSMap.Scope.Y2 * Self.Map.ChunkSide;
end;


function TRSTranslator.RSWidth(): Int32; constref;
begin
  Result := Self.RSMap.Scope.Width();
end;

function TRSTranslator.RSHeight(): Int32; constref;
begin
  Result := Self.RSMap.Scope.Height();
end;

function TRSTranslator.MapWidth(): Int32; constref;
begin
  Result := Self.RSWidth() * Self.Map.ChunkSide;
end;

function TRSTranslator.MapHeight(): UInt32; constref;
begin
  Result := Self.RSHeight() * Self.Map.ChunkSide;
end;


function TRSTranslator.RSArea(): UInt32; constref;
begin
  Result := Self.RSWidth() * Self.RSHeight();
end;

function TRSTranslator.MapArea(): UInt32; constref;
begin
  Result := Self.MapWidth() * Self.MapHeight();
end;


function TRSTranslator.RSCoordinate2Chunk(p: TPoint): TPoint;
begin
  Result := [p.X div Self.RSMap.ChunkSide, p.Y div Self.RSMap.ChunkSide];
end;

function TRSTranslator.Coordinate2Chunk(p: TPoint): TPoint;
begin
  Result.X := Self.RSMap.Scope.X1 + Floor(p.X / Self.Map.ChunkSide);
  Result.Y := Self.RSMap.Scope.Y2 - Floor(p.Y / Self.Map.ChunkSide);
end;


function TRSTranslator.Chunk2RSCoordinate(p: TPoint): TPoint;
begin
  Result := [p.X * Self.RSMap.ChunkSide, p.Y * Self.RSMap.ChunkSide];
end;

function TRSTranslator.Chunk2Coordinate(p: TPoint): TPoint;
begin
  Result.X := p.X * Self.Map.ChunkSide - Self.Map.Scope.X1;
  Result.Y := Self.Map.Scope.Y2 - p.Y * Self.Map.ChunkSide;
end;

function TRSTranslator.Chunk2Coordinate(b: TBox): TBox; overload;
var
  s, f: TPoint;
begin
  s := Self.Chunk2Coordinate([b.X1, b.Y1]);
  f := Self.Chunk2Coordinate([b.X2+1, b.Y2-1]);
  Result := [s.X, s.Y, f.X-1, f.Y-1];
end;


function TRSTranslator.Coordinate2RSCoordinate(p: TPoint): TPoint;
begin
  Result := [p.X div Self.TileSize, p.Y div Self.TileSize];
end;

function TRSTranslator.RSCoordinate2Coordinate(p: TPoint): TPoint;
begin
  Result.X := p.X * Self.TileSize - Self.Map.Scope.X1;
  Result.Y := Self.Map.ChunkSide - (p.Y * Self.TileSize - Self.Map.Scope.Y2) - Self.RSMap.ChunkSide;
end;



function TRSTranslator.Height2Color(height: Single): UInt32;
const
  H_VALUE := Self.MaxHeight / $FFFFFF;
begin
  Result := Round((height / H_VALUE) * 29.14);
end;

function TRSTranslator.Color2Height(color: Int32): Single;
const
  H_VALUE := Self.MaxHeight / $FFFFFF;
begin
  Result := (color*H_VALUE) / 29.14;
end;


var
  RSTranslator: TRSTranslator;

begin
  RSTranslator.Setup();
end;
